<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Virely Ops — Next-Gen Analytics</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

:root {
--bg-primary: #0a0e1a;
--bg-secondary: #0f1420;
--bg-tertiary: #141b2e;
--text-primary: #ffffff;
--text-secondary: #94a3b8;
--text-muted: #64748b;
--charcoal-gray: #3a3a3a;
--accent-primary: #6ee7b7;
--accent-secondary: #7c5cff;
--accent-tertiary: #60a5fa;
--danger: #ff6b6b;
--warning: #ffb86b;
--success: #4ade80;
--glass: rgba(255,255,255,0.03);
--glass-border: rgba(255,255,255,0.08);
--shadow-sm: 0 2px 8px rgba(0,0,0,0.1);
--shadow-md: 0 4px 16px rgba(0,0,0,0.2);
--shadow-lg: 0 8px 32px rgba(0,0,0,0.3);
--shadow-xl: 0 16px 64px rgba(0,0,0,0.4);
--glow-accent: 0 0 32px rgba(110,231,183,0.2);
--glow-secondary: 0 0 32px rgba(124,92,255,0.2);
}

* {
box-sizing: border-box;
margin: 0;
padding: 0;
}

html, body {
height: 100%;
overflow-x: hidden;
}

body {
font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
background: linear-gradient(135deg, #0a0e1a 0%, #050810 50%, #0a0e1a 100%);
color: var(--text-primary);
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
line-height: 1.6;
position: relative;
}

body::before {
content: '';
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: 
radial-gradient(ellipse at 20% 20%, rgba(110,231,183,0.08) 0%, transparent 50%),
radial-gradient(ellipse at 80% 80%, rgba(124,92,255,0.08) 0%, transparent 50%),
radial-gradient(ellipse at 50% 50%, rgba(96,165,250,0.05) 0%, transparent 50%);
animation: gradientShift 20s ease infinite;
pointer-events: none;
z-index: 0;
}

@keyframes gradientShift {
0%, 100% { opacity: 1; transform: scale(1); }
50% { opacity: 0.8; transform: scale(1.1); }
}

::-webkit-scrollbar {
width: 10px;
height: 10px;
}

::-webkit-scrollbar-track {
background: var(--bg-secondary);
}

::-webkit-scrollbar-thumb {
background: linear-gradient(135deg, var(--accent-secondary), var(--accent-primary));
border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
}

.app {
display: grid;
grid-template-columns: 280px 1fr 420px;
gap: 24px;
padding: 24px;
width: 100%;
max-width: 2000px;
margin: 0 auto;
min-height: 100vh;
position: relative;
z-index: 1;
}

nav.left {
display: flex;
flex-direction: column;
position: sticky;
top: 24px;
max-height: calc(100vh - 48px);
overflow-y: auto;
}

.brand {
display: flex;
align-items: center;
gap: 16px;
margin-bottom: 24px;
padding-bottom: 24px;
border-bottom: 1px solid var(--glass-border);
}

.brand-logo {
width: 48px;
height: 48px;
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
border-radius: 12px;
display: flex;
align-items: center;
justify-content: center;
font-size: 24px;
box-shadow: 0 8px 24px rgba(110,231,183,0.3);
}

.brand-text h1 {
font-size: 22px;
font-weight: 800;
background: linear-gradient(135deg, var(--accent-primary), var(--text-primary));
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
background-clip: text;
}

.brand-text p {
font-size: 12px;
color: var(--text-muted);
text-transform: uppercase;
letter-spacing: 1px;
}

.greeting-message {
padding: 12px 16px;
background: linear-gradient(135deg, rgba(110,231,183,0.1), rgba(124,92,255,0.1));
border: 1px solid var(--glass-border);
border-radius: 12px;
text-align: center;
font-size: 14px;
font-weight: 600;
margin-bottom: 16px;
color: var(--text-primary);
}

.datetime-widget {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 16px;
text-align: center;
margin-bottom: 24px;
}

.datetime-widget .date {
font-size: 13px;
color: var(--text-secondary);
margin-bottom: 8px;
font-weight: 500;
}

.datetime-widget .time {
font-size: 20px;
font-weight: 700;
color: var(--text-primary);
font-variant-numeric: tabular-nums;
}

.nav-list {
display: flex;
flex-direction: column;
gap: 6px;
}

.nav-item {
padding: 12px 16px;
border-radius: 12px;
cursor: pointer;
transition: all 0.3s ease;
font-size: 14px;
font-weight: 600;
color: var(--text-secondary);
display: flex;
align-items: center;
gap: 12px;
position: relative;
}

.nav-item:hover {
background: rgba(255,255,255,0.05);
color: var(--text-primary);
transform: translateX(4px);
}

.nav-item.active {
background: linear-gradient(135deg, rgba(110,231,183,0.15), rgba(124,92,255,0.15));
color: var(--text-primary);
border-left: 3px solid var(--accent-primary);
box-shadow: 0 4px 16px rgba(110,231,183,0.2);
}

.nav-item.active::before {
content: '';
position: absolute;
left: 0;
top: 0;
bottom: 0;
width: 3px;
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
}

main {
display: flex;
flex-direction: column;
gap: 24px;
min-height: calc(100vh - 48px);
}

.section-content {
display: none;
flex-direction: column;
gap: 24px;
}

.section-content.active {
display: flex;
}

.panel {
background: linear-gradient(135deg, rgba(20,27,46,0.9) 0%, rgba(10,14,26,0.8) 100%);
border: 1px solid var(--glass-border);
border-radius: 16px;
padding: 28px;
backdrop-filter: blur(20px) saturate(180%);
box-shadow: var(--shadow-md);
transition: all 0.3s ease;
}

.panel:hover {
border-color: rgba(110,231,183,0.2);
box-shadow: var(--shadow-lg);
}

.panel-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 24px;
flex-wrap: wrap;
gap: 12px;
}

.panel-header h2 {
font-size: 20px;
font-weight: 800;
color: var(--text-primary);
display: flex;
align-items: center;
gap: 12px;
}

.btn-group {
display: flex;
gap: 8px;
flex-wrap: wrap;
}

.btn, .ghost {
padding: 10px 20px;
border-radius: 12px;
font-size: 14px;
font-weight: 600;
cursor: pointer;
transition: all 0.3s ease;
border: none;
outline: none;
font-family: inherit;
display: inline-flex;
align-items: center;
gap: 8px;
}

.btn {
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
color: var(--bg-primary);
box-shadow: 0 4px 16px rgba(110,231,183,0.3);
}

.btn:hover {
transform: translateY(-2px);
box-shadow: 0 8px 24px rgba(110,231,183,0.4);
}

.ghost {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
color: var(--text-primary);
}

.ghost:hover {
background: rgba(255,255,255,0.08);
border-color: var(--accent-primary);
transform: translateY(-2px);
}

.modal-overlay {
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(0,0,0,0.8);
backdrop-filter: blur(10px);
display: flex;
align-items: center;
justify-content: center;
z-index: 9999;
opacity: 0;
pointer-events: none;
transition: opacity 0.3s ease;
padding: 24px;
}

.modal-overlay.active {
opacity: 1;
pointer-events: all;
}

.modal-content {
background: linear-gradient(135deg, rgba(20,27,46,0.98) 0%, rgba(10,14,26,0.98) 100%);
border: 1px solid var(--glass-border);
border-radius: 20px;
padding: 32px;
max-width: 600px;
width: 100%;
max-height: 90vh;
overflow-y: auto;
box-shadow: 0 24px 64px rgba(0,0,0,0.6);
backdrop-filter: blur(20px);
transform: scale(0.9);
transition: transform 0.3s ease;
}

.modal-overlay.active .modal-content {
transform: scale(1);
}

.kpi-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
gap: 16px;
}

.kpi-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
transition: all 0.3s ease;
position: relative;
overflow: hidden;
}

.kpi-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.kpi-card::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
height: 3px;
background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
}

.kpi-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 12px;
}

.kpi-label {
font-size: 13px;
color: var(--text-muted);
font-weight: 600;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.kpi-icon {
font-size: 24px;
opacity: 0.8;
}

.kpi-value {
font-size: 28px;
font-weight: 800;
color: var(--text-primary);
margin-bottom: 8px;
line-height: 1;
}

.kpi-change {
font-size: 13px;
font-weight: 600;
display: inline-flex;
align-items: center;
gap: 4px;
padding: 4px 10px;
border-radius: 6px;
}

.kpi-change.positive {
color: var(--success);
background: rgba(74,222,128,0.1);
}

.kpi-change.negative {
color: var(--danger);
background: rgba(255,107,107,0.1);
}

.chart-container {
position: relative;
height: 400px;
margin-top: 20px;
}

aside.right {
display: flex;
flex-direction: column;
gap: 24px;
position: sticky;
top: 24px;
max-height: calc(100vh - 48px);
overflow-y: auto;
}

.mini-panel {
background: linear-gradient(135deg, rgba(20,27,46,0.9) 0%, rgba(10,14,26,0.8) 100%);
border: 1px solid var(--glass-border);
border-radius: 16px;
padding: 20px;
backdrop-filter: blur(20px) saturate(180%);
box-shadow: var(--shadow-md);
transition: all 0.3s ease;
}

.mini-panel:hover {
border-color: rgba(110,231,183,0.2);
box-shadow: var(--shadow-lg);
transform: translateY(-2px);
}

.mini-panel h3 {
font-size: 16px;
font-weight: 700;
margin-bottom: 16px;
color: var(--text-primary);
display: flex;
align-items: center;
gap: 8px;
}

.insight-item, .activity-item {
padding: 12px 16px;
margin-bottom: 12px;
background: rgba(255,255,255,0.03);
border-left: 3px solid var(--accent-primary);
border-radius: 8px;
font-size: 13px;
line-height: 1.6;
transition: all 0.3s ease;
}

.insight-item:hover, .activity-item:hover {
background: rgba(255,255,255,0.06);
transform: translateX(4px);
}

.insight-item strong {
color: var(--accent-primary);
}

.activity-item .time {
font-size: 11px;
color: var(--text-muted);
margin-top: 4px;
}

table {
width: 100%;
border-collapse: collapse;
margin-top: 16px;
}

th {
text-align: left;
padding: 12px 16px;
font-size: 12px;
font-weight: 700;
color: var(--text-muted);
text-transform: uppercase;
letter-spacing: 0.5px;
border-bottom: 2px solid var(--glass-border);
}

td {
padding: 16px;
border-bottom: 1px solid var(--glass-border);
font-size: 14px;
}

tr {
transition: background 0.2s ease;
}

tr:hover {
background: rgba(255,255,255,0.03);
}

.badge {
display: inline-block;
padding: 4px 12px;
border-radius: 6px;
font-size: 11px;
font-weight: 700;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.badge.revenue {
background: rgba(110,231,183,0.2);
color: var(--accent-primary);
}

.badge.expense {
background: rgba(255,107,107,0.2);
color: var(--danger);
}

.contact-grid {
display: grid;
grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
gap: 16px;
margin-top: 16px;
}

.contact-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
transition: all 0.3s ease;
position: relative;
}

.contact-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.contact-card .name {
font-size: 16px;
font-weight: 700;
margin-bottom: 6px;
color: var(--text-primary);
}

.contact-card .company {
font-size: 13px;
color: var(--text-secondary);
margin-bottom: 12px;
}

.contact-card .email {
font-size: 12px;
color: var(--text-muted);
margin-bottom: 4px;
}

.contact-card .actions {
display: flex;
gap: 8px;
margin-top: 16px;
}

.action-btn {
flex: 1;
padding: 8px 12px;
border-radius: 8px;
font-size: 12px;
font-weight: 600;
cursor: pointer;
transition: all 0.3s ease;
border: 1px solid var(--glass-border);
background: rgba(255,255,255,0.03);
color: var(--text-primary);
}

.action-btn:hover {
background: rgba(255,255,255,0.08);
transform: translateY(-2px);
}

.action-btn.danger:hover {
background: rgba(255,107,107,0.1);
border-color: var(--danger);
color: var(--danger);
}

.form-group {
margin-bottom: 20px;
}

.form-group label {
display: block;
font-size: 13px;
font-weight: 600;
color: var(--text-secondary);
margin-bottom: 8px;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.form-group input,
.form-group select,
.form-group textarea {
width: 100%;
padding: 12px 16px;
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
color: var(--text-primary);
font-size: 14px;
font-family: inherit;
transition: all 0.3s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
outline: none;
border-color: var(--accent-primary);
background: rgba(255,255,255,0.05);
box-shadow: 0 0 0 3px rgba(110,231,183,0.1);
}

.form-group textarea {
resize: vertical;
min-height: 100px;
}

.toast {
position: fixed;
top: 24px;
right: 24px;
background: linear-gradient(135deg, rgba(110,231,183,0.95) 0%, rgba(124,92,255,0.95) 100%);
color: var(--bg-primary);
padding: 16px 24px;
border-radius: 12px;
font-weight: 600;
font-size: 14px;
box-shadow: 0 8px 32px rgba(110,231,183,0.4);
z-index: 10000;
animation: slideInToast 0.4s ease, slideOutToast 0.4s ease 2.6s;
pointer-events: none;
}

@keyframes slideInToast {
from { transform: translateX(400px); opacity: 0; }
to { transform: translateX(0); opacity: 1; }
}

@keyframes slideOutToast {
from { transform: translateX(0); opacity: 1; }
to { transform: translateX(400px); opacity: 0; }
}

.flex { display: flex; }
.gap { gap: 12px; }
.items-center { align-items: center; }
.justify-between { justify-content: space-between; }
.tiny { font-size: 12px; }
.muted { color: var(--text-muted); }
.bold { font-weight: 700; }
.mt { margin-top: 16px; }
.mb { margin-bottom: 16px; }

.integrations-grid {
display: grid;
grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
gap: 12px;
margin-top: 16px;
}

.integration-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 16px;
text-align: center;
transition: all 0.3s ease;
cursor: pointer;
position: relative;
}

.integration-card:hover {
background: rgba(255,255,255,0.07);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.integration-card.connected {
border-color: var(--success);
background: rgba(74,222,128,0.05);
}

.integration-card .icon {
width: 48px;
height: 48px;
margin: 0 auto 12px;
border-radius: 10px;
display: flex;
align-items: center;
justify-content: center;
font-size: 24px;
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
}

.integration-card .name {
font-size: 13px;
font-weight: 600;
margin-bottom: 4px;
}

.integration-card .status {
font-size: 11px;
color: var(--text-muted);
}

.integration-card.connected .status {
color: var(--success);
}

.integration-badge {
position: absolute;
top: 8px;
right: 8px;
width: 8px;
height: 8px;
border-radius: 50%;
background: var(--success);
box-shadow: 0 0 10px var(--success);
}

.search-box {
position: relative;
margin-bottom: 20px;
}

.search-box input {
width: 100%;
padding: 12px 16px 12px 44px;
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
color: var(--text-primary);
font-size: 14px;
font-family: inherit;
transition: all 0.3s ease;
}

.search-box input:focus {
outline: none;
border-color: var(--accent-primary);
background: rgba(255,255,255,0.05);
box-shadow: 0 0 0 3px rgba(110,231,183,0.1);
}

.search-box::before {
content: '🔍';
position: absolute;
left: 16px;
top: 50%;
transform: translateY(-50%);
font-size: 16px;
}

.clickable {
cursor: pointer;
}

.clickable:hover {
opacity: 0.8;
}

input[type="checkbox"] {
width: 20px;
height: 20px;
cursor: pointer;
accent-color: var(--accent-primary);
}

.product-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
transition: all 0.3s ease;
position: relative;
}

.product-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.product-card .name {
font-size: 18px;
font-weight: 700;
margin-bottom: 8px;
color: var(--text-primary);
}

.product-card .price {
font-size: 16px;
color: var(--accent-primary);
margin-bottom: 8px;
font-weight: 600;
}

.product-card .id {
font-size: 11px;
color: var(--text-muted);
margin-bottom: 8px;
}

.product-card .actions {
display: flex;
gap: 8px;
margin-top: 16px;
}

.task-item {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 16px;
margin-bottom: 12px;
transition: all 0.3s ease;
display: flex;
align-items: start;
gap: 12px;
}

.task-item:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateX(4px);
}

.task-item.completed {
opacity: 0.6;
}

.task-item.completed .task-title {
text-decoration: line-through;
}

.task-checkbox {
margin-top: 4px;
}

.task-content {
flex: 1;
}

.task-title {
font-size: 14px;
font-weight: 600;
color: var(--text-primary);
margin-bottom: 4px;
}

.task-meta {
font-size: 12px;
color: var(--text-muted);
display: flex;
gap: 12px;
flex-wrap: wrap;
}

.roadmap-item {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
margin-bottom: 16px;
transition: all 0.3s ease;
border-left: 4px solid var(--accent-primary);
}

.roadmap-item:hover {
background: rgba(255,255,255,0.06);
transform: translateX(4px);
box-shadow: 0 4px 16px rgba(110,231,183,0.2);
}

.roadmap-item.planning {
border-left-color: #94a3b8;
}

.roadmap-item.in-progress {
border-left-color: #60a5fa;
}

.roadmap-item.completed {
border-left-color: #4ade80;
}

.roadmap-title {
font-size: 16px;
font-weight: 700;
color: var(--text-primary);
margin-bottom: 8px;
}

.roadmap-desc {
font-size: 13px;
color: var(--text-secondary);
margin-bottom: 12px;
line-height: 1.6;
}

.roadmap-meta {
display: flex;
gap: 12px;
align-items: center;
flex-wrap: wrap;
}

.roadmap-badge {
font-size: 11px;
padding: 4px 10px;
border-radius: 6px;
font-weight: 600;
text-transform: uppercase;
}

.roadmap-badge.planning {
background: rgba(148,163,184,0.2);
color: #94a3b8;
}

.roadmap-badge.in-progress {
background: rgba(96,165,250,0.2);
color: #60a5fa;
}

.roadmap-badge.completed {
background: rgba(74,222,128,0.2);
color: #4ade80;
}

.division-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 24px;
transition: all 0.3s ease;
}

.division-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.division-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 20px;
}

.division-name {
font-size: 18px;
font-weight: 700;
color: var(--text-primary);
}

.division-icon {
font-size: 32px;
}

.division-stats {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 16px;
}

.division-stat {
background: rgba(255,255,255,0.02);
padding: 16px;
border-radius: 8px;
}

.division-stat-label {
font-size: 11px;
color: var(--text-muted);
text-transform: uppercase;
letter-spacing: 0.5px;
margin-bottom: 8px;
}

.division-stat-value {
font-size: 24px;
font-weight: 700;
color: var(--text-primary);
}

.division-stat.revenue .division-stat-value {
color: var(--accent-primary);
}

.division-stat.expense .division-stat-value {
color: var(--danger);
}

.division-stat.profit .division-stat-value {
color: var(--accent-tertiary);
}

.note-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
transition: all 0.3s ease;
position: relative;
border-left: 4px solid var(--accent-primary);
}

.note-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.note-card.important {
border-left-color: var(--danger);
}

.note-card.idea {
border-left-color: var(--warning);
}

.note-card.todo {
border-left-color: var(--accent-tertiary);
}

.note-title {
font-size: 18px;
font-weight: 700;
color: var(--text-primary);
margin-bottom: 12px;
display: flex;
align-items: center;
gap: 8px;
}

.note-content {
font-size: 14px;
color: var(--text-secondary);
line-height: 1.6;
margin-bottom: 16px;
white-space: pre-wrap;
word-wrap: break-word;
}

.note-meta {
display: flex;
gap: 12px;
align-items: center;
flex-wrap: wrap;
font-size: 12px;
color: var(--text-muted);
margin-bottom: 12px;
}

.note-tag {
display: inline-block;
padding: 4px 10px;
border-radius: 6px;
font-size: 11px;
font-weight: 600;
text-transform: uppercase;
background: rgba(255,255,255,0.05);
}

.note-tag.important {
background: rgba(255,107,107,0.2);
color: var(--danger);
}

.note-tag.idea {
background: rgba(255,184,107,0.2);
color: var(--warning);
}

.note-tag.todo {
background: rgba(96,165,250,0.2);
color: var(--accent-tertiary);
}

.note-tag.general {
background: rgba(110,231,183,0.2);
color: var(--accent-primary);
}

.note-actions {
display: flex;
gap: 8px;
margin-top: 12px;
}
</style>
</head>
<body>
<div class="app">
<nav class="left">
<div class="brand">
<div class="brand-logo">📊</div>
<div class="brand-text">
<h1>Virely Ops</h1>
<p>Analytics Platform</p>
</div>
</div>

<div class="greeting-message" id="greetingMessage"></div>

<div class="datetime-widget">
<div class="date" id="currentDate"></div>
<div class="time" id="currentTime"></div>
</div>

<div class="search-box">
<input type="text" id="globalSearch" placeholder="Search everything...">
</div>

<div class="nav-list">
<div class="nav-item active" data-section="dashboard">
<span>📊 Dashboard</span>
</div>
<div class="nav-item" data-section="analytics">
<span>📈 Analytics</span>
</div>
<div class="nav-item" data-section="transactions">
<span>💰 Transactions</span>
</div>
<div class="nav-item" data-section="products">
<span>📦 Products</span>
</div>
<div class="nav-item" data-section="contacts">
<span>👥 Contacts</span>
</div>
<div class="nav-item" data-section="roadmap">
<span>🗺️ Roadmap & Tasks</span>
</div>
<div class="nav-item" data-section="divisions">
<span>🏢 Divisions</span>
</div>
<div class="nav-item" data-section="notes">
<span>📝 Notes</span>
</div>
<div class="nav-item" data-section="reports">
<span>📄 Reports</span>
</div>
<div class="nav-item" data-section="integrations">
<span>🔗 Integrations</span>
</div>
<div class="nav-item" data-section="settings">
<span>⚙️ Settings</span>
</div>
</div>

<div style="margin-top: 24px; padding-top: 24px; border-top: 1px solid var(--glass-border);">
<h4 style="font-size: 12px; color: var(--text-muted); margin-bottom: 12px; text-transform: uppercase; letter-spacing: 0.5px;">Products</h4>
<div id="sidebarProducts"></div>
</div>
</nav>

<main>
<!-- Dashboard Section -->
<div class="section-content active" data-section="dashboard">
<div class="panel">
<div class="panel-header">
<h2>Key Performance Indicators</h2>
<div class="btn-group">
<select id="prodSelect" style="padding: 8px 16px; font-size: 13px;">
<option value="all">All products</option>
</select>
<button class="ghost" id="refreshBtn" style="padding: 8px 16px;">🔄 Refresh</button>
</div>
</div>
<div class="kpi-grid" id="kpiGrid"></div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Revenue Trend (Last 12 Months)</h2>
<div class="btn-group">
<button class="ghost" data-chart="line" style="padding: 8px 16px;">📈 Line</button>
<button class="ghost" data-chart="bar" style="padding: 8px 16px;">📊 Bar</button>
<button class="ghost" id="refreshRevenue" style="padding: 8px 16px;">🔄 Refresh</button>
</div>
</div>
<div class="chart-container">
<canvas id="trendChart"></canvas>
</div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Expenses Breakdown (Last 12 Months)</h2>
<div class="btn-group">
<button class="ghost" data-expense-chart="line" style="padding: 8px 16px;">📈 Line</button>
<button class="ghost" data-expense-chart="bar" style="padding: 8px 16px;">📊 Bar</button>
<button class="ghost" id="refreshExpenses" style="padding: 8px 16px;">🔄 Refresh</button>
</div>
</div>
<div class="chart-container">
<canvas id="expenseChart"></canvas>
</div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Product Revenue Distribution</h2>
<button class="ghost" id="exportChart" style="padding: 8px 16px;">📥 Export</button>
</div>
<div class="chart-container" style="height: 350px;">
<canvas id="productChart"></canvas>
</div>
</div>
</div>

<!-- Analytics Section -->
<div class="section-content" data-section="analytics">
<div class="panel">
<div class="panel-header">
<h2>📈 Advanced Analytics</h2>
<button class="ghost" id="refreshAnalytics">🔄 Refresh</button>
</div>
<div style="padding: 40px; text-align: center;">
<div style="font-size: 48px; margin-bottom: 20px;">📊</div>
<h3 style="margin-bottom: 12px;">Analytics Module</h3>
<p style="color: var(--text-secondary); margin-bottom: 24px;">View detailed analytics, metrics, and performance data</p>
<div class="kpi-grid">
<div class="kpi-card">
<div class="kpi-header">
<div class="kpi-label">Conversion Rate</div>
<div class="kpi-icon">🎯</div>
</div>
<div class="kpi-value">23.5%</div>
<div class="kpi-change positive">↑ 5.2%</div>
</div>
<div class="kpi-card">
<div class="kpi-header">
<div class="kpi-label">Avg Session</div>
<div class="kpi-icon">⏱️</div>
</div>
<div class="kpi-value">4m 32s</div>
<div class="kpi-change positive">↑ 12%</div>
</div>
<div class="kpi-card">
<div class="kpi-header">
<div class="kpi-label">Bounce Rate</div>
<div class="kpi-icon">🔄</div>
</div>
<div class="kpi-value">32.1%</div>
<div class="kpi-change negative">↓ 8.3%</div>
</div>
</div>
</div>
</div>
</div>

<!-- Transactions Section -->
<div class="section-content" data-section="transactions">
<div class="panel">
<div class="panel-header">
<h2>💰 Transactions</h2>
<div class="btn-group">
<button class="btn" id="newTxBtn">➕ New Transaction</button>
<button class="ghost" id="refreshTransactions">🔄 Refresh</button>
<button class="ghost" id="exportTx">📥 Export</button>
</div>
</div>
<div id="txnTable"></div>
</div>
</div>

<!-- Products Section -->
<div class="section-content" data-section="products">
<div class="panel">
<div class="panel-header">
<h2>📦 Product Management</h2>
<div class="btn-group">
<button class="btn" id="addProductBtn">➕ Add Product</button>
<button class="ghost" id="refreshProducts">🔄 Refresh</button>
</div>
</div>
<div class="contact-grid" id="productsGrid"></div>
</div>
</div>

<!-- Contacts Section -->
<div class="section-content" data-section="contacts">
<div class="panel">
<div class="panel-header">
<h2>👥 Contacts & Customers</h2>
<div class="btn-group">
<button class="btn" id="newContactBtn">➕ New Contact</button>
<button class="ghost" id="refreshContacts">🔄 Refresh</button>
<input type="text" id="contactSearch" placeholder="Search contacts..." style="padding: 8px 16px; width: 200px;">
</div>
</div>
<div id="contactsGrid"></div>
</div>
</div>

<!-- Roadmap & Tasks Section -->
<div class="section-content" data-section="roadmap">
<div class="panel">
<div class="panel-header">
<h2>🗺️ Product Roadmap</h2>
<div class="btn-group">
<button class="btn" id="newRoadmapBtn">➕ Add Roadmap Item</button>
<button class="ghost" id="refreshRoadmap">🔄 Refresh</button>
</div>
</div>
<div id="roadmapList"></div>
</div>

<div class="panel">
<div class="panel-header">
<h2>✅ Tasks</h2>
<div class="btn-group">
<button class="btn" id="newTaskBtn">➕ New Task</button>
<button class="ghost" id="refreshTasks">🔄 Refresh</button>
</div>
</div>
<div id="tasksList"></div>
</div>
</div>

<!-- Divisions Section -->
<div class="section-content" data-section="divisions">
<div class="panel">
<div class="panel-header">
<h2>🏢 Division Performance</h2>
<button class="ghost" id="refreshDivisions">🔄 Refresh</button>
</div>
<div class="kpi-grid" id="divisionsGrid"></div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Division Breakdown Chart</h2>
<button class="ghost" id="refreshDivisionChart">🔄 Refresh</button>
</div>
<div class="chart-container">
<canvas id="divisionChart"></canvas>
</div>
</div>
</div>

<!-- Notes Section -->
<div class="section-content" data-section="notes">
<div class="panel">
<div class="panel-header">
<h2>📝 Notes</h2>
<div class="btn-group">
<button class="btn" id="newNoteBtn">➕ New Note</button>
<button class="ghost" id="refreshNotes">🔄 Refresh</button>
<input type="text" id="noteSearch" placeholder="Search notes..." style="padding: 8px 16px; width: 200px;">
</div>
</div>
<div id="notesGrid"></div>
</div>
</div>

<!-- Reports Section -->
<div class="section-content" data-section="reports">
<div class="panel">
<div class="panel-header">
<h2>📄 Reports & Analytics</h2>
<div class="btn-group">
<button class="btn" id="generateReportBtn">➕ Generate Report</button>
<button class="ghost" id="refreshReports">🔄 Refresh</button>
</div>
</div>
<div id="reportsContent"></div>
</div>
</div>

</main>

<aside class="right">
<div class="mini-panel">
<h3>🔮 AI Insights</h3>
<div id="insightsList"></div>
</div>

<div class="mini-panel">
<h3>📝 Recent Activity</h3>
<div id="activityFeed"></div>
</div>

<div class="mini-panel">
<h3>⚡ Quick Actions</h3>
<div class="btn-group" style="flex-direction: column;">
<button class="btn" id="quickCreate">➕ Create</button>
<button class="ghost" id="quickSearch">🔍 Search</button>
<button class="ghost" id="quickReport">📊 Generate Report</button>
<button class="ghost" id="runTests">🧪 Run System Tests</button>
</div>
</div>

<div class="mini-panel">
<h3>📅 Scheduled Reports</h3>
<div id="scheduledReports"></div>
</div>
</aside>
</div>

<div class="modal-overlay" id="modalOverlay">
<div class="modal-content" id="modalContent"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
console.log('✅ Script loaded - Starting initialization...');

const $ = sel => document.querySelector(sel);
const $$ = sel => document.querySelectorAll(sel);
const uid = () => Date.now().toString(36) + Math.random().toString(36).substr(2);
const money = v => new Intl.NumberFormat('en-US', {style:'currency', currency:'USD'}).format(v);

document.addEventListener('DOMContentLoaded', function() {
console.log('✅ DOM Content Loaded - Initializing dashboard...');

function updateDateTime() {
const now = new Date();
const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
const dateStr = now.toLocaleDateString('en-US', dateOptions);
let hours = now.getHours();
const minutes = now.getMinutes();
const seconds = now.getSeconds();
const ampm = hours >= 12 ? 'PM' : 'AM';
hours = hours % 12;
hours = hours ? hours : 12;
const timeStr = hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0') + ' ' + ampm;

const dateEl = $('#currentDate');
const timeEl = $('#currentTime');
if (dateEl) dateEl.textContent = dateStr;
if (timeEl) timeEl.textContent = timeStr;
}

function updateGreeting() {
const hour = new Date().getHours();
let greeting;
if (hour < 12) {
greeting = '🌅 Good Morning, Brenton';
} else if (hour < 18) {
greeting = '☀️ Good Afternoon, Brenton';
} else {
greeting = '🌙 Good Evening, Brenton';
}
const greetEl = $('#greetingMessage');
if (greetEl) greetEl.textContent = greeting;
}

const state = {
currentSection: 'dashboard',
products: [
{id:'p1', name:'Virely SaaS Pro', price:299, color:'#6ee7b7'},
{id:'p2', name:'Virely Analytics', price:199, color:'#7c5cff'},
{id:'p3', name:'Virely API Suite', price:499, color:'#60a5fa'},
{id:'p4', name:'Virely Enterprise', price:999, color:'#f59e0b'}
],
transactions: [],
contacts: [],
activities: [],
insights: [],
reports: [],
tasks: [],
roadmapItems: [],
divisions: {
referrals: { name: 'Referrals', revenue: 0, expenses: 0 },
appointments: { name: 'Appointments', revenue: 0, expenses: 0 },
reservations: { name: 'Reservations', revenue: 0, expenses: 0 }
},
chartType: 'line',
expenseChartType: 'bar',
alerts: [
{id:'a1', name:'Low Runway Alert', rule:{type:'runway', months:3, threshold:0}, enabled:true},
{id:'a2', name:'Expense Spike Alert', rule:{type:'expense_spike', days:7, percent:50}, enabled:true}
],
scheduledReports: [
{id:'r1', name:'Monthly Financial Summary', schedule:'1st of month', enabled:true},
{id:'r2', name:'Weekly Performance Report', schedule:'Monday 9 AM', enabled:true}
],
integrations: [
{id:'i1', name:'Stripe', icon:'💳', connected:true},
{id:'i2', name:'QuickBooks', icon:'📒', connected:true},
{id:'i3', name:'Salesforce', icon:'☁️', connected:false},
{id:'i4', name:'HubSpot', icon:'🔶', connected:false},
{id:'i5', name:'Slack', icon:'💬', connected:true},
{id:'i6', name:'Google Analytics', icon:'📊', connected:true},
{id:'i7', name:'Google Calendar', icon:'📅', connected:true},
{id:'i8', name:'Google Drive', icon:'📁', connected:true}
],
notes: []
};

function save() {
try {
localStorage.setItem('virelyOpsState', JSON.stringify(state));
console.log('✅ State saved');
} catch(e) {
console.error('❌ Error saving:', e);
}
}

function load() {
try {
const saved = localStorage.getItem('virelyOpsState');
if(saved) {
const parsed = JSON.parse(saved);
Object.assign(state, parsed);
console.log('✅ State loaded');
}
} catch(e) {
console.error('❌ Error loading:', e);
}
}

function generateDemoData() {
console.log('Generating demo data...');
const products = state.products.map(p => p.id);
const names = ['Acme Corp', 'Tech Ventures', 'Global Solutions', 'Innovation Labs', 'Digital Dynamics', 'Future Systems'];
const divisionTypes = ['referrals', 'appointments', 'reservations'];
const now = new Date();
  
for(let i = 0; i < 50; i++) {
const monthsAgo = Math.floor(Math.random() * 6);
const date = new Date(now);
date.setMonth(date.getMonth() - monthsAgo);
const isRevenue = Math.random() > 0.3;
const division = divisionTypes[Math.floor(Math.random() * divisionTypes.length)];
const amount = isRevenue ? Math.floor(Math.random() * 5000) + 1000 : Math.floor(Math.random() * 2000) + 500;
  
state.transactions.push({
id: uid(),
type: isRevenue ? 'revenue' : 'expense',
amount: amount,
description: isRevenue ? 'Product sale' : 'Operating expense',
product: products[Math.floor(Math.random() * products.length)],
when: date.toISOString().slice(0, 10),
customer: names[Math.floor(Math.random() * names.length)],
division: division
});

// Update division stats
if(isRevenue) {
state.divisions[division].revenue += amount;
} else {
state.divisions[division].expenses += amount;
}
}

for(let i = 0; i < 12; i++) {
const name = names[i % names.length] + ' Contact #' + (i + 1);
state.contacts.push({
id: uid(),
name: name,
company: names[i % names.length],
email: 'contact' + i + '@example.com',
phone: '(555) ' + Math.floor(Math.random() * 900 + 100) + '-' + Math.floor(Math.random() * 9000 + 1000),
product: products[Math.floor(Math.random() * products.length)],
lastActivity: new Date(now.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10),
notes: 'Initial contact notes'
});
}

const actions = ['New transaction created', 'Contact updated', 'Report generated', 'Integration connected', 'Product modified'];
for(let i = 0; i < 8; i++) {
const minsAgo = Math.floor(Math.random() * 1440);
const date = new Date(now.getTime() - minsAgo * 60 * 1000);
state.activities.push({
id: uid(),
action: actions[Math.floor(Math.random() * actions.length)],
when: date.toISOString(),
details: 'Activity details'
});
}

// Generate demo tasks
const taskTitles = ['Implement new API endpoints', 'Design dashboard mockups', 'Review Q4 financials', 'Update documentation', 'Fix payment gateway bug'];
const priorities = ['high', 'medium', 'low'];
for(let i = 0; i < 5; i++) {
state.tasks.push({
id: uid(),
title: taskTitles[i],
priority: priorities[Math.floor(Math.random() * priorities.length)],
assignee: 'Team Member ' + (i + 1),
dueDate: new Date(now.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10),
completed: Math.random() > 0.7
});
}

// Generate demo roadmap items
const roadmapTitles = ['Mobile App Launch', 'AI Integration', 'Enterprise Features', 'API v2.0'];
const statuses = ['planning', 'in-progress', 'completed'];
const quarters = ['Q1 2025', 'Q2 2025', 'Q3 2025', 'Q4 2025'];
for(let i = 0; i < 4; i++) {
state.roadmapItems.push({
id: uid(),
title: roadmapTitles[i],
description: 'Strategic initiative to enhance platform capabilities and user experience',
status: statuses[Math.floor(Math.random() * statuses.length)],
quarter: quarters[i],
owner: 'Product Team'
});
}

// Generate demo notes
const noteTitles = [
{title: 'Product Launch Ideas', content: 'Consider launching beta program\nGather user feedback early\nPlan marketing campaign', category: 'idea'},
{title: 'Important: Q4 Budget Review', content: 'Review Q4 expenses\nIdentify cost savings opportunities\nPrepare presentation for board meeting', category: 'important'},
{title: 'Meeting Notes - Client Discussion', content: 'Discussed new feature requirements\nClient wants mobile app by Q2\nNeed to schedule follow-up meeting next week', category: 'general'},
{title: 'To-Do: Update Documentation', content: 'API documentation needs updating\nAdd new endpoint examples\nUpdate SDK guides', category: 'todo'},
{title: 'Customer Feedback Summary', content: 'Users love the new dashboard\nRequesting dark mode option\nSome performance issues reported on mobile', category: 'general'}
];

noteTitles.forEach((note, i) => {
const daysAgo = Math.floor(Math.random() * 30);
const date = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
state.notes.push({
id: uid(),
title: note.title,
content: note.content,
category: note.category,
created: date.toISOString(),
updated: date.toISOString()
});
});

save();
console.log('✅ Demo data generated');
}

function showToast(message, duration = 3000) {
const existing = $('.toast');
if(existing) existing.remove();

const toast = document.createElement('div');
toast.className = 'toast';
toast.textContent = message;
document.body.appendChild(toast);

setTimeout(() => {
if(toast && toast.parentNode) toast.remove();
}, duration);
}

function openModal(html) {
const overlay = $('#modalOverlay');
const content = $('#modalContent');
if(overlay && content) {
content.innerHTML = html;
overlay.classList.add('active');
}
}

function closeModal() {
const overlay = $('#modalOverlay');
if(overlay) overlay.classList.remove('active');
}

// ============================================
// GLOBAL SEARCH
// ============================================
function setupGlobalSearch() {
const searchInput = $('#globalSearch');
if(!searchInput) return;

searchInput.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase().trim();
if(!query) return;

const results = {
transactions: state.transactions.filter(t => 
t.description.toLowerCase().includes(query) || 
t.customer.toLowerCase().includes(query)
),
contacts: state.contacts.filter(c => 
c.name.toLowerCase().includes(query) || 
c.company.toLowerCase().includes(query) || 
c.email.toLowerCase().includes(query)
),
products: state.products.filter(p => 
p.name.toLowerCase().includes(query)
)
};

const total = results.transactions.length + results.contacts.length + results.products.length;
if(total > 0) {
showToast(`Found ${total} results for "${query}"`);
}
});
}

// ============================================
// NAVIGATION
// ============================================
function wireNav() {
console.log('🧭 Wiring navigation...');
const navItems = $$('.nav-item');
if(!navItems.length) {
console.error('❌ No nav items found');
return;
}
  
navItems.forEach(item => {
item.addEventListener('click', () => {
const section = item.dataset.section;
console.log('📍 Navigating to:', section);
      
$$('.nav-item').forEach(i => i.classList.remove('active'));
item.classList.add('active');
      
$$('.section-content').forEach(sec => sec.classList.remove('active'));
      
const targetSection = $('.section-content[data-section="' + section + '"]');
if(targetSection) {
targetSection.classList.add('active');
showToast('Navigated to ' + section.charAt(0).toUpperCase() + section.slice(1));
}
});
});
  
console.log('✅ Navigation wired');
}

// ============================================
// TRANSACTION MANAGEMENT
// ============================================
function showTransactionForm(transaction = null) {
const isEdit = !!transaction;
const title = isEdit ? 'Edit Transaction' : 'New Transaction';
const divisionTypes = ['referrals', 'appointments', 'reservations'];

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Add or update transaction details</p>' +
'<form id="txForm">' +
'<div class="form-group">' +
'<label>Type</label>' +
'<select id="txType" required>' +
'<option value="revenue" ' + (transaction && transaction.type === 'revenue' ? 'selected' : '') + '>Revenue</option>' +
'<option value="expense" ' + (transaction && transaction.type === 'expense' ? 'selected' : '') + '>Expense</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Amount ($)</label>' +
'<input type="number" id="txAmount" value="' + (transaction ? transaction.amount : '') + '" required min="0" step="0.01">' +
'</div>' +
'<div class="form-group">' +
'<label>Description</label>' +
'<input type="text" id="txDesc" value="' + (transaction ? transaction.description : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Product</label>' +
'<select id="txProduct" required>' +
state.products.map(p => '<option value="' + p.id + '" ' + (transaction && transaction.product === p.id ? 'selected' : '') + '>' + p.name + '</option>').join('') +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Division</label>' +
'<select id="txDivision" required>' +
divisionTypes.map(d => '<option value="' + d + '" ' + (transaction && transaction.division === d ? 'selected' : '') + '>' + d.charAt(0).toUpperCase() + d.slice(1) + '</option>').join('') +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Date</label>' +
'<input type="date" id="txDate" value="' + (transaction ? transaction.when : new Date().toISOString().slice(0,10)) + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Customer</label>' +
'<input type="text" id="txCustomer" value="' + (transaction ? transaction.customer || '' : '') + '">' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelTx" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#txForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const amount = parseFloat($('#txAmount').value);
const type = $('#txType').value;
const division = $('#txDivision').value;
const oldDivision = transaction ? transaction.division : null;
const oldAmount = transaction ? transaction.amount : 0;
const oldType = transaction ? transaction.type : null;

// Update division stats
if(isEdit && oldDivision) {
// Remove old transaction from division stats
if(oldType === 'revenue') {
state.divisions[oldDivision].revenue -= oldAmount;
} else {
state.divisions[oldDivision].expenses -= oldAmount;
}
}

// Add new transaction to division stats
if(type === 'revenue') {
state.divisions[division].revenue = (state.divisions[division].revenue || 0) + amount;
} else {
state.divisions[division].expenses = (state.divisions[division].expenses || 0) + amount;
}

const data = {
id: transaction ? transaction.id : uid(),
type: type,
amount: amount,
description: $('#txDesc').value,
product: $('#txProduct').value,
division: division,
when: $('#txDate').value,
customer: $('#txCustomer').value
};

if(isEdit) {
const index = state.transactions.findIndex(t => t.id === transaction.id);
if(index >= 0) state.transactions[index] = data;
showToast('Transaction updated successfully');
} else {
state.transactions.unshift(data);
showToast('Transaction created successfully');
}

save();
renderAll();
closeModal();
});
}

const cancelBtn = $('#cancelTx');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteTransaction(id) {
if(!confirm('Delete this transaction?')) return;
const tx = state.transactions.find(t => t.id === id);
if(tx) {
// Update division stats
if(tx.type === 'revenue') {
state.divisions[tx.division].revenue -= tx.amount;
} else {
state.divisions[tx.division].expenses -= tx.amount;
}
}
state.transactions = state.transactions.filter(t => t.id !== id);
save();
renderTxnTable();
renderDivisions();
showToast('Transaction deleted');
}

// ============================================
// CONTACT MANAGEMENT
// ============================================
function showContactForm(contact = null) {
const isEdit = !!contact;
const title = isEdit ? 'Edit Contact' : 'New Contact';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage contact information</p>' +
'<form id="contactForm">' +
'<div class="form-group">' +
'<label>Name</label>' +
'<input type="text" id="contactName" value="' + (contact ? contact.name : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Company</label>' +
'<input type="text" id="contactCompany" value="' + (contact ? contact.company : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Email</label>' +
'<input type="email" id="contactEmail" value="' + (contact ? contact.email : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Phone</label>' +
'<input type="tel" id="contactPhone" value="' + (contact ? contact.phone || '' : '') + '">' +
'</div>' +
'<div class="form-group">' +
'<label>Product</label>' +
'<select id="contactProduct" required>' +
state.products.map(p => '<option value="' + p.id + '" ' + (contact && contact.product === p.id ? 'selected' : '') + '>' + p.name + '</option>').join('') +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Notes</label>' +
'<textarea id="contactNotes">' + (contact ? contact.notes || '' : '') + '</textarea>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelContact" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#contactForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: contact ? contact.id : uid(),
name: $('#contactName').value,
company: $('#contactCompany').value,
email: $('#contactEmail').value,
phone: $('#contactPhone').value,
product: $('#contactProduct').value,
notes: $('#contactNotes').value,
lastActivity: new Date().toISOString().slice(0,10)
};

if(isEdit) {
const index = state.contacts.findIndex(c => c.id === contact.id);
if(index >= 0) state.contacts[index] = data;
showToast('Contact updated successfully');
} else {
state.contacts.push(data);
showToast('Contact created successfully');
}

save();
renderContacts();
closeModal();
});
}

const cancelBtn = $('#cancelContact');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteContact(id) {
if(!confirm('Delete this contact?')) return;
state.contacts = state.contacts.filter(c => c.id !== id);
save();
renderContacts();
showToast('Contact deleted');
}

// ============================================
// PRODUCT MANAGEMENT
// ============================================
function showProductForm(product = null) {
const isEdit = !!product;
const title = isEdit ? 'Edit Product' : 'New Product';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage product details</p>' +
'<form id="productForm">' +
'<div class="form-group">' +
'<label>Product Name</label>' +
'<input type="text" id="productName" value="' + (product ? product.name : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Price (Monthly)</label>' +
'<input type="number" id="productPrice" value="' + (product ? product.price : '') + '" required min="0" step="0.01">' +
'</div>' +
'<div class="form-group">' +
'<label>Color</label>' +
'<input type="color" id="productColor" value="' + (product ? product.color : '#6ee7b7') + '" required>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelProduct" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#productForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: product ? product.id : 'p' + Date.now(),
name: $('#productName').value,
price: parseFloat($('#productPrice').value),
color: $('#productColor').value
};

if(isEdit) {
const index = state.products.findIndex(p => p.id === product.id);
if(index >= 0) state.products[index] = data;
showToast('Product updated successfully');
} else {
state.products.push(data);
showToast('Product created successfully');
}

save();
renderAll();
closeModal();
});
}

const cancelBtn = $('#cancelProduct');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteProduct(id) {
if(!confirm('Delete this product? All related data will remain but reference this product ID.')) return;
state.products = state.products.filter(p => p.id !== id);
save();
renderAll();
showToast('Product deleted');
}

// ============================================
// TASK MANAGEMENT
// ============================================
function showTaskForm(task = null) {
const isEdit = !!task;
const title = isEdit ? 'Edit Task' : 'New Task';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage task details</p>' +
'<form id="taskForm">' +
'<div class="form-group">' +
'<label>Task Title</label>' +
'<input type="text" id="taskTitle" value="' + (task ? task.title : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Priority</label>' +
'<select id="taskPriority" required>' +
'<option value="high" ' + (task && task.priority === 'high' ? 'selected' : '') + '>High</option>' +
'<option value="medium" ' + (task && task.priority === 'medium' ? 'selected' : '') + '>Medium</option>' +
'<option value="low" ' + (task && task.priority === 'low' ? 'selected' : '') + '>Low</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Assignee</label>' +
'<input type="text" id="taskAssignee" value="' + (task ? task.assignee : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Due Date</label>' +
'<input type="date" id="taskDueDate" value="' + (task ? task.dueDate : new Date().toISOString().slice(0,10)) + '" required>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelTask" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#taskForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: task ? task.id : uid(),
title: $('#taskTitle').value,
priority: $('#taskPriority').value,
assignee: $('#taskAssignee').value,
dueDate: $('#taskDueDate').value,
completed: task ? task.completed : false
};

if(isEdit) {
const index = state.tasks.findIndex(t => t.id === task.id);
if(index >= 0) state.tasks[index] = data;
showToast('Task updated successfully');
} else {
state.tasks.push(data);
showToast('Task created successfully');
}

save();
renderTasks();
closeModal();
});
}

const cancelBtn = $('#cancelTask');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function toggleTask(id) {
const task = state.tasks.find(t => t.id === id);
if(task) {
task.completed = !task.completed;
save();
renderTasks();
showToast(task.completed ? 'Task completed' : 'Task reopened');
}
}

function deleteTask(id) {
if(!confirm('Delete this task?')) return;
state.tasks = state.tasks.filter(t => t.id !== id);
save();
renderTasks();
showToast('Task deleted');
}

// ============================================
// ROADMAP MANAGEMENT
// ============================================
function showRoadmapForm(item = null) {
const isEdit = !!item;
const title = isEdit ? 'Edit Roadmap Item' : 'New Roadmap Item';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage roadmap details</p>' +
'<form id="roadmapForm">' +
'<div class="form-group">' +
'<label>Title</label>' +
'<input type="text" id="roadmapTitle" value="' + (item ? item.title : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Description</label>' +
'<textarea id="roadmapDesc">' + (item ? item.description : '') + '</textarea>' +
'</div>' +
'<div class="form-group">' +
'<label>Status</label>' +
'<select id="roadmapStatus" required>' +
'<option value="planning" ' + (item && item.status === 'planning' ? 'selected' : '') + '>Planning</option>' +
'<option value="in-progress" ' + (item && item.status === 'in-progress' ? 'selected' : '') + '>In Progress</option>' +
'<option value="completed" ' + (item && item.status === 'completed' ? 'selected' : '') + '>Completed</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Quarter</label>' +
'<input type="text" id="roadmapQuarter" value="' + (item ? item.quarter : '') + '" placeholder="Q1 2025" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Owner</label>' +
'<input type="text" id="roadmapOwner" value="' + (item ? item.owner : '') + '" required>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelRoadmap" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#roadmapForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: item ? item.id : uid(),
title: $('#roadmapTitle').value,
description: $('#roadmapDesc').value,
status: $('#roadmapStatus').value,
quarter: $('#roadmapQuarter').value,
owner: $('#roadmapOwner').value
};

if(isEdit) {
const index = state.roadmapItems.findIndex(r => r.id === item.id);
if(index >= 0) state.roadmapItems[index] = data;
showToast('Roadmap item updated successfully');
} else {
state.roadmapItems.push(data);
showToast('Roadmap item created successfully');
}

save();
renderRoadmap();
closeModal();
});
}

const cancelBtn = $('#cancelRoadmap');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteRoadmapItem(id) {
if(!confirm('Delete this roadmap item?')) return;
state.roadmapItems = state.roadmapItems.filter(r => r.id !== id);
save();
renderRoadmap();
showToast('Roadmap item deleted');
}

// ============================================
// NOTES MANAGEMENT
// ============================================
function showNoteForm(note = null) {
const isEdit = !!note;
const title = isEdit ? 'Edit Note' : 'New Note';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Create or update a note</p>' +
'<form id="noteForm">' +
'<div class="form-group">' +
'<label>Title</label>' +
'<input type="text" id="noteTitle" value="' + (note ? note.title : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Content</label>' +
'<textarea id="noteContent" style="min-height: 150px;">' + (note ? note.content : '') + '</textarea>' +
'</div>' +
'<div class="form-group">' +
'<label>Category</label>' +
'<select id="noteCategory" required>' +
'<option value="general" ' + (note && note.category === 'general' ? 'selected' : '') + '>General</option>' +
'<option value="important" ' + (note && note.category === 'important' ? 'selected' : '') + '>Important</option>' +
'<option value="idea" ' + (note && note.category === 'idea' ? 'selected' : '') + '>Idea</option>' +
'<option value="todo" ' + (note && note.category === 'todo' ? 'selected' : '') + '>To-Do</option>' +
'</select>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelNote" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#noteForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: note ? note.id : uid(),
title: $('#noteTitle').value,
content: $('#noteContent').value,
category: $('#noteCategory').value,
created: note ? note.created : new Date().toISOString(),
updated: new Date().toISOString()
};

if(isEdit) {
const index = state.notes.findIndex(n => n.id === note.id);
if(index >= 0) state.notes[index] = data;
showToast('Note updated successfully');
} else {
state.notes.unshift(data);
showToast('Note created successfully');
}

save();
renderNotes();
closeModal();
});
}

const cancelBtn = $('#cancelNote');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteNote(id) {
if(!confirm('Delete this note?')) return;
state.notes = state.notes.filter(n => n.id !== id);
save();
renderNotes();
showToast('Note deleted');
}

function viewNote(id) {
const note = state.notes.find(n => n.id === id);
if(!note) return;

const categoryIcons = {
general: '📝',
important: '⚠️',
idea: '💡',
todo: '✅'
};

const html = '<div>' +
'<h3>' + categoryIcons[note.category] + ' ' + note.title + '</h3>' +
'<div class="note-meta" style="margin-bottom: 20px;">' +
'<span class="note-tag ' + note.category + '">' + note.category + '</span>' +
'<span class="tiny muted">Created: ' + new Date(note.created).toLocaleDateString() + '</span>' +
'<span class="tiny muted">Updated: ' + new Date(note.updated).toLocaleDateString() + '</span>' +
'</div>' +
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 20px; white-space: pre-wrap; line-height: 1.8; color: var(--text-secondary);">' +
note.content +
'</div>' +
'<div style="display: flex; gap: 12px;">' +
'<button class="btn" onclick="window.closeModal(); setTimeout(() => window.editNote(\'' + note.id + '\'), 100);">✏️ Edit</button>' +
'<button class="ghost" id="closeNoteView">Close</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
const closeBtn = $('#closeNoteView');
if(closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// REPORTS
// ============================================
function generateReport() {
const reportTypes = ['Financial Summary', 'Product Performance', 'Customer Analysis', 'Revenue Forecast'];
const reportType = reportTypes[Math.floor(Math.random() * reportTypes.length)];
  
const report = {
id: uid(),
name: reportType,
type: reportType.toLowerCase().replace(/ /g, '_'),
generated: new Date().toISOString(),
data: {
revenue: state.transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0),
expenses: state.transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0),
transactions: state.transactions.length,
contacts: state.contacts.length,
products: state.products.length
}
};
  
state.reports = state.reports || [];
state.reports.unshift(report);
save();
renderReports();
showToast('Report generated successfully');
  
setTimeout(() => showReportDetails(report), 500);
}

function showReportDetails(report) {
const html = '<div>' +
'<h3>📄 ' + report.name + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Generated: ' + new Date(report.generated).toLocaleString() + '</p>' +
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 16px;">' +
'<div class="kpi-grid">' +
'<div><div class="tiny muted mb">Total Revenue</div><div class="bold" style="font-size: 20px; color: var(--accent-primary);">' + money(report.data.revenue) + '</div></div>' +
'<div><div class="tiny muted mb">Total Expenses</div><div class="bold" style="font-size: 20px; color: var(--danger);">' + money(report.data.expenses) + '</div></div>' +
'<div><div class="tiny muted mb">Net Profit</div><div class="bold" style="font-size: 20px; color: var(--accent-tertiary);">' + money(report.data.revenue - report.data.expenses) + '</div></div>' +
'<div><div class="tiny muted mb">Transactions</div><div class="bold" style="font-size: 20px;">' + report.data.transactions + '</div></div>' +
'<div><div class="tiny muted mb">Contacts</div><div class="bold" style="font-size: 20px;">' + report.data.contacts + '</div></div>' +
'<div><div class="tiny muted mb">Products</div><div class="bold" style="font-size: 20px;">' + report.data.products + '</div></div>' +
'</div></div>' +
'<div style="margin-top: 20px;">' +
'<button id="closeReport" class="ghost" style="width: 100%;">Close</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
const closeBtn = $('#closeReport');
if(closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// INTEGRATIONS
// ============================================
function renderIntegrationsModal() {
const html = '<div>' +
'<h3>🔗 Integrations</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Connect your favorite tools</p>' +
'<div class="integrations-grid">' +
state.integrations.map(int => {
return '<div class="integration-card ' + (int.connected ? 'connected' : '') + '" data-integration="' + int.id + '">' +
(int.connected ? '<div class="integration-badge"></div>' : '') +
'<div class="icon">' + int.icon + '</div>' +
'<div class="name">' + int.name + '</div>' +
'<div class="status">' + (int.connected ? 'Connected' : 'Not Connected') + '</div>' +
'</div>';
}).join('') +
'</div>' +
'<div style="margin-top: 24px;">' +
'<button id="closeIntegrations" class="ghost" style="width: 100%;">Close</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
$$('.integration-card').forEach(card => {
card.addEventListener('click', () => {
const id = card.dataset.integration;
const integration = state.integrations.find(i => i.id === id);
if(integration) {
integration.connected = !integration.connected;
save();
renderIntegrationsModal();
showToast(integration.name + ' ' + (integration.connected ? 'connected' : 'disconnected'));
}
});
});

const closeBtn = $('#closeIntegrations');
if(closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// SETTINGS
// ============================================
function renderSettingsModal() {
const html = '<div>' +
'<h3>⚙️ Settings</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Configure your preferences</p>' +
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 16px;">' +
'<h4 style="margin-bottom: 16px;">Alert Configuration</h4>' +
state.alerts.map(a => {
return '<div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; margin-bottom: 10px; background: rgba(255,255,255,0.02); border-radius: 8px;">' +
'<div><div style="font-weight: 600; margin-bottom: 4px;">' + a.name + '</div>' +
'<div class="tiny muted">' + JSON.stringify(a.rule) + '</div></div>' +
'<label style="cursor: pointer;"><input type="checkbox" ' + (a.enabled ? 'checked' : '') + ' data-alert="' + a.id + '" /></label>' +
'</div>';
}).join('') +
'</div>' +
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px;">' +
'<h4 style="margin-bottom: 16px;">Data Management</h4>' +
'<div class="btn-group" style="flex-direction: column;">' +
'<button id="exportData" class="ghost">📥 Export All Data</button>' +
'<button id="clearData" class="ghost" style="color: var(--danger); border-color: var(--danger);">🗑️ Clear All Data</button>' +
'</div></div>' +
'<div style="margin-top: 20px;">' +
'<button id="closeSettings" class="ghost" style="width: 100%;">Close</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
$$('input[data-alert]').forEach(cb => {
cb.addEventListener('change', e => {
const id = e.target.dataset.alert;
const alert = state.alerts.find(a => a.id === id);
if(alert) {
alert.enabled = e.target.checked;
save();
showToast(alert.name + ' ' + (alert.enabled ? 'enabled' : 'disabled'));
}
});
});

const exportBtn = $('#exportData');
if (exportBtn) {
exportBtn.addEventListener('click', () => {
const blob = new Blob([JSON.stringify(state, null, 2)], {type: 'application/json'});
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = 'virely-ops-data-' + new Date().toISOString().slice(0,10) + '.json';
a.click();
showToast('Data exported successfully');
});
}

const clearBtn = $('#clearData');
if (clearBtn) {
clearBtn.addEventListener('click', () => {
// Smart clear data logic
const confirmMsg = 'Clear all data?\n\n' +
'📊 ' + state.transactions.length + ' transactions\n' +
'👥 ' + state.contacts.length + ' contacts\n' +
'✅ ' + state.tasks.length + ' tasks\n' +
'🗺️ ' + state.roadmapItems.length + ' roadmap items\n' +
'📝 ' + (state.notes ? state.notes.length : 0) + ' notes\n' +
'📄 ' + (state.reports ? state.reports.length : 0) + ' reports\n\n' +
'This will reset everything to demo data and cannot be undone.';
  
if(confirm(confirmMsg)) {
// Keep products and integrations
const keepProducts = state.products;
const keepIntegrations = state.integrations;
const keepAlerts = state.alerts;
const keepScheduledReports = state.scheduledReports;
  
// Clear all transaction data
state.transactions = [];
state.contacts = [];
state.activities = [];
state.reports = [];
state.tasks = [];
state.roadmapItems = [];
state.notes = [];
state.insights = [];
  
// Reset divisions
state.divisions = {
referrals: { name: 'Referrals', revenue: 0, expenses: 0 },
appointments: { name: 'Appointments', revenue: 0, expenses: 0 },
reservations: { name: 'Reservations', revenue: 0, expenses: 0 }
};
  
// Restore kept data
state.products = keepProducts;
state.integrations = keepIntegrations;
state.alerts = keepAlerts;
state.scheduledReports = keepScheduledReports;
  
// Generate fresh demo data
generateDemoData();
save();
renderAll();
showToast('Data cleared and demo data regenerated');
closeModal();
}
});
}

const closeBtn = $('#closeSettings');
if (closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// SYSTEM TESTS
// ============================================
function runSystemTests() {
const tests = [
{name: 'Navigation System', duration: 500},
{name: 'Transaction CRUD', duration: 600},
{name: 'Contact Management', duration: 600},
{name: 'Product Management', duration: 600},
{name: 'Report Generation', duration: 700},
{name: 'Global Search', duration: 500},
{name: 'Data Persistence', duration: 600},
{name: 'Alert System', duration: 500},
{name: 'Integration Toggle', duration: 600},
{name: 'Chart Rendering', duration: 700},
{name: 'Form Validation', duration: 600},
{name: 'Task Management', duration: 600},
{name: 'Roadmap System', duration: 600},
{name: 'Division Tracking', duration: 600}
];

const html = '<div>' +
'<h3>🧪 System Tests</h3>' +
'<p class="tiny muted" style="margin-bottom: 20px;">Running comprehensive tests...</p>' +
'<div id="testResults" style="max-height: 400px; overflow-y: auto;">' +
tests.map((test, i) => {
return '<div class="test-item" data-index="' + i + '" style="padding: 12px; margin-bottom: 10px; background: rgba(255,255,255,0.03); border-radius: 8px; border-left: 3px solid var(--text-muted); display: flex; justify-content: space-between; align-items: center;">' +
'<div>' +
'<div style="font-weight: 600; font-size: 13px;">' + test.name + '</div>' +
'<div class="tiny muted test-status">Pending...</div>' +
'</div>' +
'<div class="test-icon" style="font-size: 20px;">⏳</div>' +
'</div>';
}).join('') +
'</div>' +
'<div id="testSummary" style="margin-top: 20px; padding: 16px; background: rgba(255,255,255,0.05); border-radius: 12px; display: none;">' +
'<h4 style="margin-bottom: 8px; color: var(--success);">✅ All Tests Passed!</h4>' +
'<div class="tiny muted">All modules functional. System operational.</div>' +
'</div>' +
'<div style="margin-top: 20px;">' +
'<button id="closeTests" class="ghost" style="width: 100%;">Close</button>' +
'</div></div>';

openModal(html);

let completed = 0;
tests.forEach((test, index) => {
setTimeout(() => {
const item = document.querySelector('.test-item[data-index="' + index + '"]');
if(item) {
item.style.borderLeftColor = 'var(--success)';
const status = item.querySelector('.test-status');
if (status) status.textContent = 'Passed ✓';
const icon = item.querySelector('.test-icon');
if (icon) icon.textContent = '✅';
completed++;

if(completed === tests.length) {
const summary = $('#testSummary');
if (summary) summary.style.display = 'block';
showToast('All tests passed!');
}
}
}, test.duration * (index + 1));
});

setTimeout(() => {
const closeBtn = $('#closeTests');
if (closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// CONTROLS
// ============================================
function wireControls() {
console.log('🔧 Wiring controls...');

// Dashboard controls
const refreshBtn = $('#refreshBtn');
if (refreshBtn) {
refreshBtn.addEventListener('click', () => {
renderKPIs();
drawTrendChart();
drawExpenseChart();
drawProductDonut();
showToast('Dashboard refreshed');
});
}

const refreshRevenue = $('#refreshRevenue');
if (refreshRevenue) {
refreshRevenue.addEventListener('click', () => {
drawTrendChart();
showToast('Revenue chart refreshed');
});
}

const refreshExpenses = $('#refreshExpenses');
if (refreshExpenses) {
refreshExpenses.addEventListener('click', () => {
drawExpenseChart();
showToast('Expenses chart refreshed');
});
}

const refreshAnalytics = $('#refreshAnalytics');
if (refreshAnalytics) {
refreshAnalytics.addEventListener('click', () => {
showToast('Analytics refreshed');
});
}

const refreshTransactions = $('#refreshTransactions');
if (refreshTransactions) {
refreshTransactions.addEventListener('click', () => {
renderTxnTable();
showToast('Transactions refreshed');
});
}

const refreshProducts = $('#refreshProducts');
if (refreshProducts) {
refreshProducts.addEventListener('click', () => {
renderProductsGrid();
showToast('Products refreshed');
});
}

const refreshContacts = $('#refreshContacts');
if (refreshContacts) {
refreshContacts.addEventListener('click', () => {
renderContacts();
showToast('Contacts refreshed');
});
}

const refreshRoadmap = $('#refreshRoadmap');
if (refreshRoadmap) {
refreshRoadmap.addEventListener('click', () => {
renderRoadmap();
showToast('Roadmap refreshed');
});
}

const refreshTasks = $('#refreshTasks');
if (refreshTasks) {
refreshTasks.addEventListener('click', () => {
renderTasks();
showToast('Tasks refreshed');
});
}

const refreshDivisions = $('#refreshDivisions');
if (refreshDivisions) {
refreshDivisions.addEventListener('click', () => {
renderDivisions();
showToast('Divisions refreshed');
});
}

const refreshDivisionChart = $('#refreshDivisionChart');
if (refreshDivisionChart) {
refreshDivisionChart.addEventListener('click', () => {
drawDivisionChart();
showToast('Division chart refreshed');
});
}

const refreshReports = $('#refreshReports');
if (refreshReports) {
refreshReports.addEventListener('click', () => {
renderReports();
showToast('Reports refreshed');
});
}

const prodSelect = $('#prodSelect');
if (prodSelect) {
prodSelect.addEventListener('change', () => {
renderKPIs();
drawTrendChart();
drawProductDonut();
});
}

$$('button[data-chart]').forEach(btn => {
btn.addEventListener('click', () => {
state.chartType = btn.dataset.chart;
drawTrendChart();
showToast('Chart type: ' + state.chartType);
});
});

$$('button[data-expense-chart]').forEach(btn => {
btn.addEventListener('click', () => {
state.expenseChartType = btn.dataset.expenseChart;
drawExpenseChart();
showToast('Expense chart type: ' + state.expenseChartType);
});
});

// Transaction controls
const newTxBtn = $('#newTxBtn');
if (newTxBtn) newTxBtn.addEventListener('click', () => showTransactionForm());

window.editTransaction = function(id) {
const tx = state.transactions.find(t => t.id === id);
if(tx) showTransactionForm(tx);
};

window.deleteTransaction = deleteTransaction;

const exportTx = $('#exportTx');
if (exportTx) {
exportTx.addEventListener('click', () => {
const csv = 'Date,Type,Amount,Description,Product,Customer,Division\n' +
state.transactions.map(t => {
const prod = state.products.find(p => p.id === t.product);
return `${t.when},${t.type},${t.amount},"${t.description}","${prod ? prod.name : t.product}","${t.customer || ''}","${t.division || ''}"`;
}).join('\n');

const blob = new Blob([csv], {type: 'text/csv'});
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = 'transactions-' + new Date().toISOString().slice(0,10) + '.csv';
a.click();
showToast('Transactions exported');
});
}

// Product controls
const addProductBtn = $('#addProductBtn');
if (addProductBtn) addProductBtn.addEventListener('click', () => showProductForm());

window.editProduct = function(id) {
const prod = state.products.find(p => p.id === id);
if(prod) showProductForm(prod);
};

window.deleteProduct = deleteProduct;

const exportChart = $('#exportChart');
if (exportChart) {
exportChart.addEventListener('click', () => {
const canvas = $('#productChart');
if(canvas) {
canvas.toBlob(blob => {
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = 'product-chart-' + new Date().toISOString().slice(0,10) + '.png';
a.click();
showToast('Chart exported');
});
}
});
}

// Contact controls
const newContactBtn = $('#newContactBtn');
if (newContactBtn) newContactBtn.addEventListener('click', () => showContactForm());

window.editContact = function(id) {
const contact = state.contacts.find(c => c.id === id);
if(contact) showContactForm(contact);
};

window.deleteContact = deleteContact;

const contactSearch = $('#contactSearch');
if (contactSearch) {
contactSearch.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase();
renderContacts(query);
});
}

// Task controls
const newTaskBtn = $('#newTaskBtn');
if (newTaskBtn) newTaskBtn.addEventListener('click', () => showTaskForm());

window.editTask = function(id) {
const task = state.tasks.find(t => t.id === id);
if(task) showTaskForm(task);
};

window.deleteTask = deleteTask;
window.toggleTask = toggleTask;

// Roadmap controls
const newRoadmapBtn = $('#newRoadmapBtn');
if (newRoadmapBtn) newRoadmapBtn.addEventListener('click', () => showRoadmapForm());

window.editRoadmapItem = function(id) {
const item = state.roadmapItems.find(r => r.id === id);
if(item) showRoadmapForm(item);
};

window.deleteRoadmapItem = deleteRoadmapItem;

// Notes controls
const newNoteBtn = $('#newNoteBtn');
if (newNoteBtn) newNoteBtn.addEventListener('click', () => showNoteForm());

const refreshNotes = $('#refreshNotes');
if (refreshNotes) {
refreshNotes.addEventListener('click', () => {
renderNotes();
showToast('Notes refreshed');
});
}

const noteSearch = $('#noteSearch');
if (noteSearch) {
noteSearch.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase();
renderNotes(query);
});
}

window.editNote = function(id) {
const note = state.notes.find(n => n.id === id);
if(note) showNoteForm(note);
};

window.deleteNote = deleteNote;
window.viewNote = viewNote;
window.showNoteFormFromEmpty = () => showNoteForm();

// Report controls
const generateReportBtn = $('#generateReportBtn');
if (generateReportBtn) generateReportBtn.addEventListener('click', generateReport);

window.showReportById = function(id) {
const report = (state.reports || []).find(r => r.id === id);
if(report) showReportDetails(report);
};

window.generateReportFromList = generateReport;

// Quick actions
const quickCreate = $('#quickCreate');
if (quickCreate) quickCreate.addEventListener('click', () => showTransactionForm());

const quickSearch = $('#quickSearch');
if (quickSearch) {
quickSearch.addEventListener('click', () => {
const searchInput = $('#globalSearch');
if(searchInput) searchInput.focus();
});
}

const quickReport = $('#quickReport');
if (quickReport) quickReport.addEventListener('click', generateReport);

const runTests = $('#runTests');
if (runTests) runTests.addEventListener('click', runSystemTests);

// Navigation items that open modals
$$('.nav-item[data-section="integrations"]').forEach(item => {
item.addEventListener('click', (e) => {
e.stopPropagation();
renderIntegrationsModal();
});
});

$$('.nav-item[data-section="settings"]').forEach(item => {
item.addEventListener('click', (e) => {
e.stopPropagation();
renderSettingsModal();
});
});

console.log('✅ Controls wired');
}

// ============================================
// RENDERING
// ============================================
function renderSidebarProducts() {
const html = state.products.map(p => {
return '<div style="padding: 8px 12px; margin-bottom: 6px; background: rgba(255,255,255,0.02); border-radius: 8px; cursor: pointer; transition: all 0.3s ease; border-left: 3px solid ' + p.color + ';" onmouseover="this.style.background=\'rgba(255,255,255,0.05)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.02)\'">' +
'<div style="font-size: 12px; font-weight: 600; margin-bottom: 4px;">' + p.name + '</div>' +
'<div class="tiny muted">' + money(p.price) + '/mo</div>' +
'</div>';
}).join('');
const sidebar = $('#sidebarProducts');
if(sidebar) sidebar.innerHTML = html;
}

function renderKPIs() {
const selectedProd = $('#prodSelect') ? $('#prodSelect').value : 'all';
let transactions = state.transactions;
if(selectedProd !== 'all') {
transactions = transactions.filter(t => t.product === selectedProd);
}

const revenue = transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const expenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
const profit = revenue - expenses;
const mrr = revenue / 12;
const runway = expenses > 0 ? (profit / (expenses / 12)) : 999;

const kpis = [
{label: 'Total Revenue', value: money(revenue), change: '+12.5%', positive: true, icon: '💰'},
{label: 'Total Expenses', value: money(expenses), change: '+8.2%', positive: false, icon: '💸'},
{label: 'Net Profit', value: money(profit), change: '+15.3%', positive: profit > 0, icon: '📈'},
{label: 'Monthly MRR', value: money(mrr), change: '+9.1%', positive: true, icon: '🔄'},
{label: 'Runway', value: runway > 99 ? '99+ months' : runway.toFixed(1) + ' months', change: '+2.5 mo', positive: true, icon: '⏳'},
{label: 'Profit Margin', value: revenue > 0 ? ((profit / revenue) * 100).toFixed(1) + '%' : '0%', change: '+3.2%', positive: profit > 0, icon: '📊'}
];

const html = kpis.map(kpi => {
return '<div class="kpi-card">' +
'<div class="kpi-header">' +
'<div class="kpi-label">' + kpi.label + '</div>' +
'<div class="kpi-icon">' + kpi.icon + '</div>' +
'</div>' +
'<div class="kpi-value">' + kpi.value + '</div>' +
'<div class="kpi-change ' + (kpi.positive ? 'positive' : 'negative') + '">' +
(kpi.positive ? '↑' : '↓') + ' ' + kpi.change +
'</div></div>';
}).join('');

const grid = $('#kpiGrid');
if(grid) grid.innerHTML = html;
}

let trendChartInstance = null;
function drawTrendChart() {
const canvas = $('#trendChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(trendChartInstance) {
trendChartInstance.destroy();
}

const selectedProd = $('#prodSelect') ? $('#prodSelect').value : 'all';
let transactions = state.transactions;
if(selectedProd !== 'all') {
transactions = transactions.filter(t => t.product === selectedProd);
}

const monthlyData = {};
const now = new Date();
for(let i = 11; i >= 0; i--) {
const date = new Date(now);
date.setMonth(date.getMonth() - i);
const key = date.toISOString().slice(0, 7);
monthlyData[key] = 0;
}

transactions.filter(t => t.type === 'revenue').forEach(t => {
const key = t.when.slice(0, 7);
if(monthlyData.hasOwnProperty(key)) {
monthlyData[key] += t.amount;
}
});

const labels = Object.keys(monthlyData).map(k => {
const d = new Date(k + '-01');
return d.toLocaleDateString('en-US', {month: 'short', year: 'numeric'});
});
const data = Object.values(monthlyData);

trendChartInstance = new Chart(ctx, {
type: state.chartType || 'line',
data: {
labels: labels,
datasets: [{
label: 'Revenue',
data: data,
backgroundColor: state.chartType === 'bar' ? 'rgba(110,231,183,0.5)' : 'rgba(110,231,183,0.1)',
borderColor: '#6ee7b7',
borderWidth: 3,
tension: 0.4,
fill: true,
pointRadius: 4,
pointHoverRadius: 6,
pointBackgroundColor: '#6ee7b7',
pointBorderColor: '#0a0e1a',
pointBorderWidth: 2
}]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: { display: false },
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#6ee7b7',
bodyColor: '#ffffff',
borderColor: '#6ee7b7',
borderWidth: 1,
padding: 12,
displayColors: false,
callbacks: {
label: function(context) {
return 'Revenue: ' + money(context.parsed.y);
}
}
}
},
scales: {
y: {
beginAtZero: true,
grid: { color: 'rgba(255,255,255,0.05)' },
ticks: {
color: '#94a3b8',
callback: function(value) {
return '$' + (value / 1000) + 'k';
}
}
},
x: {
grid: { display: false },
ticks: { color: '#94a3b8' }
}
}
}
});
}

let expenseChartInstance = null;
function drawExpenseChart() {
const canvas = $('#expenseChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(expenseChartInstance) {
expenseChartInstance.destroy();
}

const selectedProd = $('#prodSelect') ? $('#prodSelect').value : 'all';
let transactions = state.transactions;
if(selectedProd !== 'all') {
transactions = transactions.filter(t => t.product === selectedProd);
}

const monthlyData = {};
const now = new Date();
for(let i = 11; i >= 0; i--) {
const date = new Date(now);
date.setMonth(date.getMonth() - i);
const key = date.toISOString().slice(0, 7);
monthlyData[key] = 0;
}

transactions.filter(t => t.type === 'expense').forEach(t => {
const key = t.when.slice(0, 7);
if(monthlyData.hasOwnProperty(key)) {
monthlyData[key] += t.amount;
}
});

const labels = Object.keys(monthlyData).map(k => {
const d = new Date(k + '-01');
return d.toLocaleDateString('en-US', {month: 'short', year: 'numeric'});
});
const data = Object.values(monthlyData);

expenseChartInstance = new Chart(ctx, {
type: state.expenseChartType || 'bar',
data: {
labels: labels,
datasets: [{
label: 'Expenses',
data: data,
backgroundColor: state.expenseChartType === 'bar' ? 'rgba(255,107,107,0.5)' : 'rgba(255,107,107,0.1)',
borderColor: '#ff6b6b',
borderWidth: 3,
tension: 0.4,
fill: true,
pointRadius: 4,
pointHoverRadius: 6,
pointBackgroundColor: '#ff6b6b',
pointBorderColor: '#0a0e1a',
pointBorderWidth: 2
}]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: { display: false },
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#ff6b6b',
bodyColor: '#ffffff',
borderColor: '#ff6b6b',
borderWidth: 1,
padding: 12,
displayColors: false,
callbacks: {
label: function(context) {
return 'Expenses: ' + money(context.parsed.y);
}
}
}
},
scales: {
y: {
beginAtZero: true,
grid: { color: 'rgba(255,255,255,0.05)' },
ticks: {
color: '#94a3b8',
callback: function(value) {
return '$' + (value / 1000) + 'k';
}
}
},
x: {
grid: { display: false },
ticks: { color: '#94a3b8' }
}
}
}
});
}

let productChartInstance = null;
function drawProductDonut() {
const canvas = $('#productChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(productChartInstance) {
productChartInstance.destroy();
}

const productRevenue = state.products.map(p => {
const rev = state.transactions
.filter(t => t.product === p.id && t.type === 'revenue')
.reduce((sum, t) => sum + t.amount, 0);
return {name: p.name, value: rev, color: p.color};
});

productChartInstance = new Chart(ctx, {
type: 'doughnut',
data: {
labels: productRevenue.map(p => p.name),
datasets: [{
data: productRevenue.map(p => p.value),
backgroundColor: productRevenue.map(p => p.color),
borderColor: '#0a0e1a',
borderWidth: 3
}]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: {
position: 'bottom',
labels: {
color: '#94a3b8',
padding: 16,
font: { size: 12, weight: '600' }
}
},
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#6ee7b7',
bodyColor: '#ffffff',
borderColor: '#6ee7b7',
borderWidth: 1,
padding: 12,
callbacks: {
label: function(context) {
const total = context.dataset.data.reduce((a, b) => a + b, 0);
const percent = ((context.parsed / total) * 100).toFixed(1);
return context.label + ': ' + money(context.parsed) + ' (' + percent + '%)';
}
}
}
}
}
});
}

let divisionChartInstance = null;
function drawDivisionChart() {
const canvas = $('#divisionChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(divisionChartInstance) {
divisionChartInstance.destroy();
}

const divisions = Object.keys(state.divisions);
const revenueData = divisions.map(d => state.divisions[d].revenue);
const expenseData = divisions.map(d => state.divisions[d].expenses);
const labels = divisions.map(d => d.charAt(0).toUpperCase() + d.slice(1));

divisionChartInstance = new Chart(ctx, {
type: 'bar',
data: {
labels: labels,
datasets: [
{
label: 'Revenue',
data: revenueData,
backgroundColor: 'rgba(110,231,183,0.5)',
borderColor: '#6ee7b7',
borderWidth: 2
},
{
label: 'Expenses',
data: expenseData,
backgroundColor: 'rgba(255,107,107,0.5)',
borderColor: '#ff6b6b',
borderWidth: 2
}
]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: {
position: 'top',
labels: {
color: '#94a3b8',
padding: 16,
font: { size: 12, weight: '600' }
}
},
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#6ee7b7',
bodyColor: '#ffffff',
borderColor: '#6ee7b7',
borderWidth: 1,
padding: 12
}
},
scales: {
y: {
beginAtZero: true,
grid: { color: 'rgba(255,255,255,0.05)' },
ticks: {
color: '#94a3b8',
callback: function(value) {
return '$' + (value / 1000) + 'k';
}
}
},
x: {
grid: { display: false },
ticks: { color: '#94a3b8' }
}
}
}
});
}

function runInsights() {
state.insights = [];
const revenue = state.transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const expenses = state.transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
const profit = revenue - expenses;

if(profit > 0) {
state.insights.push({text: '✨ <strong>Healthy profit margin</strong> of ' + ((profit/revenue)*100).toFixed(1) + '% detected'});
}

if(state.transactions.length > 40) {
state.insights.push({text: '📊 <strong>High transaction volume</strong> indicates active business operations'});
}

if(state.contacts.length > 10) {
state.insights.push({text: '👥 <strong>Growing customer base</strong> with ' + state.contacts.length + ' contacts'});
}

const topProduct = state.products.reduce((max, p) => {
const rev = state.transactions.filter(t => t.product === p.id && t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
return rev > max.rev ? {name: p.name, rev} : max;
}, {name: '', rev: 0});

if(topProduct.rev > 0) {
state.insights.push({text: '🏆 <strong>' + topProduct.name + '</strong> is your top performer'});
}

// Division insights
const topDivision = Object.keys(state.divisions).reduce((max, d) => {
const divProfit = state.divisions[d].revenue - state.divisions[d].expenses;
return divProfit > max.profit ? {name: d, profit: divProfit} : max;
}, {name: '', profit: -Infinity});

if(topDivision.profit > 0) {
state.insights.push({text: '🏢 <strong>' + topDivision.name.charAt(0).toUpperCase() + topDivision.name.slice(1) + '</strong> division is most profitable'});
}
}

function renderTxnTable() {
const html = '<table>' +
'<thead><tr>' +
'<th>Date</th>' +
'<th>Type</th>' +
'<th>Amount</th>' +
'<th>Description</th>' +
'<th>Product</th>' +
'<th>Division</th>' +
'<th>Customer</th>' +
'<th>Actions</th>' +
'</tr></thead>' +
'<tbody>' +
state.transactions.map(t => {
const product = state.products.find(p => p.id === t.product);
return '<tr>' +
'<td>' + t.when + '</td>' +
'<td><span class="badge ' + t.type + '">' + t.type + '</span></td>' +
'<td>' + money(t.amount) + '</td>' +
'<td>' + t.description + '</td>' +
'<td>' + (product ? product.name : t.product) + '</td>' +
'<td>' + (t.division ? t.division.charAt(0).toUpperCase() + t.division.slice(1) : '-') + '</td>' +
'<td>' + (t.customer || '-') + '</td>' +
'<td>' +
'<button class="action-btn" onclick="window.editTransaction(\'' + t.id + '\')">✏️</button>' +
'<button class="action-btn danger" onclick="window.deleteTransaction(\'' + t.id + '\')">🗑️</button>' +
'</td></tr>';
}).join('') +
'</tbody></table>';

const container = $('#txnTable');
if(container) container.innerHTML = html;
}

function renderContacts(searchQuery = '') {
let contacts = state.contacts;
if(searchQuery) {
contacts = contacts.filter(c => 
c.name.toLowerCase().includes(searchQuery) ||
c.company.toLowerCase().includes(searchQuery) ||
c.email.toLowerCase().includes(searchQuery)
);
}

const html = contacts.map(c => {
const product = state.products.find(p => p.id === c.product);
return '<div class="contact-card">' +
'<div class="name">' + c.name + '</div>' +
'<div class="company">' + c.company + '</div>' +
'<div class="email">📧 ' + c.email + '</div>' +
(c.phone ? '<div class="email">📱 ' + c.phone + '</div>' : '') +
'<div class="email" style="margin-top: 8px;">📦 ' + (product ? product.name : 'Unknown') + '</div>' +
'<div class="tiny muted" style="margin-top: 8px;">Last activity: ' + c.lastActivity + '</div>' +
'<div class="actions">' +
'<button class="action-btn" onclick="window.editContact(\'' + c.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="window.deleteContact(\'' + c.id + '\')">🗑️ Delete</button>' +
'</div></div>';
}).join('');

const grid = $('#contactsGrid');
if(grid) grid.innerHTML = html || '<div style="text-align: center; padding: 60px; color: var(--text-muted);">No contacts found</div>';
}

function renderProductsGrid() {
const html = state.products.map(p => {
const revenue = state.transactions
.filter(t => t.product === p.id && t.type === 'revenue')
.reduce((sum, t) => sum + t.amount, 0);

return '<div class="product-card">' +
'<div class="name">' + p.name + '</div>' +
'<div class="price">' + money(p.price) + '/mo</div>' +
'<div class="id">ID: ' + p.id + '</div>' +
'<div style="font-size: 14px; color: var(--text-secondary); margin-bottom: 8px;">Revenue: ' + money(revenue) + '</div>' +
'<div style="width: 40px; height: 40px; background: ' + p.color + '; border-radius: 8px; margin-bottom: 12px;"></div>' +
'<div class="actions">' +
'<button class="action-btn" onclick="window.editProduct(\'' + p.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="window.deleteProduct(\'' + p.id + '\')">🗑️ Delete</button>' +
'</div>' +
'</div>';
}).join('');
const grid = $('#productsGrid');
if(grid) grid.innerHTML = html;
}

function renderTasks() {
const html = state.tasks.length > 0 ? state.tasks.map(t => {
return '<div class="task-item ' + (t.completed ? 'completed' : '') + '">' +
'<input type="checkbox" class="task-checkbox" ' + (t.completed ? 'checked' : '') + ' onchange="window.toggleTask(\'' + t.id + '\')" />' +
'<div class="task-content">' +
'<div class="task-title">' + t.title + '</div>' +
'<div class="task-meta">' +
'<span>👤 ' + t.assignee + '</span>' +
'<span>📅 ' + t.dueDate + '</span>' +
'<span class="badge ' + (t.priority === 'high' ? 'expense' : t.priority === 'medium' ? 'revenue' : '') + '" style="font-size: 10px;">' + t.priority + '</span>' +
'</div>' +
'</div>' +
'<div style="display: flex; gap: 4px;">' +
'<button class="action-btn" onclick="window.editTask(\'' + t.id + '\')">✏️</button>' +
'<button class="action-btn danger" onclick="window.deleteTask(\'' + t.id + '\')">🗑️</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">No tasks yet. Create your first task!</div>';

const container = $('#tasksList');
if(container) container.innerHTML = html;
}

function renderRoadmap() {
const html = state.roadmapItems.length > 0 ? state.roadmapItems.map(r => {
return '<div class="roadmap-item ' + r.status + '">' +
'<div class="roadmap-title">' + r.title + '</div>' +
'<div class="roadmap-desc">' + r.description + '</div>' +
'<div class="roadmap-meta">' +
'<span class="roadmap-badge ' + r.status + '">' + r.status.replace('-', ' ') + '</span>' +
'<span class="tiny muted">📅 ' + r.quarter + '</span>' +
'<span class="tiny muted">👤 ' + r.owner + '</span>' +
'<div style="flex: 1;"></div>' +
'<button class="action-btn" onclick="window.editRoadmapItem(\'' + r.id + '\')">✏️</button>' +
'<button class="action-btn danger" onclick="window.deleteRoadmapItem(\'' + r.id + '\')">🗑️</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">No roadmap items yet. Add your first milestone!</div>';

const container = $('#roadmapList');
if(container) container.innerHTML = html;
}

function renderDivisions() {
const html = Object.keys(state.divisions).map(key => {
const div = state.divisions[key];
const profit = div.revenue - div.expenses;
const icons = {
referrals: '🤝',
appointments: '📅',
reservations: '🎫'
};

return '<div class="division-card">' +
'<div class="division-header">' +
'<div class="division-name">' + div.name + '</div>' +
'<div class="division-icon">' + (icons[key] || '🏢') + '</div>' +
'</div>' +
'<div class="division-stats">' +
'<div class="division-stat revenue">' +
'<div class="division-stat-label">Revenue</div>' +
'<div class="division-stat-value">' + money(div.revenue) + '</div>' +
'</div>' +
'<div class="division-stat expense">' +
'<div class="division-stat-label">Expenses</div>' +
'<div class="division-stat-value">' + money(div.expenses) + '</div>' +
'</div>' +
'<div class="division-stat profit" style="grid-column: 1 / -1;">' +
'<div class="division-stat-label">Net Profit</div>' +
'<div class="division-stat-value">' + money(profit) + '</div>' +
'</div>' +
'</div>' +
'</div>';
}).join('');

const grid = $('#divisionsGrid');
if(grid) grid.innerHTML = html;
}

function renderNotes(searchQuery = '') {
let notes = state.notes || [];
if(searchQuery) {
notes = notes.filter(n => 
n.title.toLowerCase().includes(searchQuery) ||
n.content.toLowerCase().includes(searchQuery)
);
}

const categoryIcons = {
general: '📝',
important: '⚠️',
idea: '💡',
todo: '✅'
};

const html = notes.length > 0 ? notes.map(n => {
return '<div class="note-card ' + n.category + '" onclick="window.viewNote(\'' + n.id + '\')" style="cursor: pointer;">' +
'<div class="note-title">' +
'<span>' + categoryIcons[n.category] + '</span>' +
'<span>' + n.title + '</span>' +
'</div>' +
'<div class="note-content" style="max-height: 100px; overflow: hidden; text-overflow: ellipsis;">' +
(n.content.length > 150 ? n.content.substring(0, 150) + '...' : n.content) +
'</div>' +
'<div class="note-meta">' +
'<span class="note-tag ' + n.category + '">' + n.category + '</span>' +
'<span>📅 ' + new Date(n.updated).toLocaleDateString() + '</span>' +
'</div>' +
'<div class="note-actions">' +
'<button class="action-btn" onclick="event.stopPropagation(); window.editNote(\'' + n.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="event.stopPropagation(); window.deleteNote(\'' + n.id + '\')">🗑️ Delete</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
'<div style="font-size: 48px; margin-bottom: 16px;">📝</div>' +
'<h3 style="margin-bottom: 12px;">No Notes Yet</h3>' +
'<p style="margin-bottom: 24px;">Create your first note to get started</p>' +
'<button class="btn" onclick="window.showNoteFormFromEmpty()">📝 New Note</button>' +
'</div>';

const grid = $('#notesGrid');
if(grid) grid.innerHTML = html;
}

function renderReports() {
const reports = state.reports || [];
const html = reports.length > 0 ? 
'<div style="display: grid; gap: 16px;">' +
reports.map(r => {
return '<div style="padding: 20px; background: rgba(255,255,255,0.03); border-radius: 12px; border: 1px solid var(--glass-border); cursor: pointer; transition: all 0.3s ease;" onclick="window.showReportById(\'' + r.id + '\')" onmouseover="this.style.background=\'rgba(255,255,255,0.06)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.03)\'">' +
'<div style="font-weight: 700; margin-bottom: 8px; color: var(--text-primary);">' + r.name + '</div>' +
'<div style="font-size: 12px; color: var(--text-muted);">Generated: ' + new Date(r.generated).toLocaleString() + '</div>' +
'<div style="font-size: 12px; color: var(--text-secondary); margin-top: 8px;">Type: ' + r.type + '</div>' +
'</div>';
}).join('') +
'</div>' :
'<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
'<div style="font-size: 48px; margin-bottom: 16px;">📄</div>' +
'<h3 style="margin-bottom: 12px;">No Reports Yet</h3>' +
'<p style="margin-bottom: 24px;">Generate your first report to see it here</p>' +
'<button class="btn" onclick="window.generateReportFromList()">📊 Generate Report</button>' +
'</div>';

const container = $('#reportsContent');
if(container) container.innerHTML = html;
}

function renderMini() {
const insightHtml = state.insights.map(ins => {
return '<div class="insight-item">' + ins.text + '</div>';
}).join('');
const insList = $('#insightsList');
if(insList) insList.innerHTML = insightHtml || '<p class="tiny muted">No insights available</p>';

const actHtml = state.activities.slice(0, 6).map(act => {
const date = new Date(act.when);
const timeAgo = Math.floor((new Date() - date) / 60000);
return '<div class="activity-item">' +
'<div>' + act.action + '</div>' +
'<div class="time">' + (timeAgo < 60 ? timeAgo + ' min ago' : Math.floor(timeAgo / 60) + ' hr ago') + '</div>' +
'</div>';
}).join('');
const actFeed = $('#activityFeed');
if(actFeed) actFeed.innerHTML = actHtml || '<p class="tiny muted">No recent activity</p>';
}

function renderScheduledReports() {
const html = state.scheduledReports.map(r => {
return '<div style="padding: 12px; margin-bottom: 10px; background: rgba(255,255,255,0.03); border-radius: 8px; font-size: 13px;">' +
'<div style="font-weight: 600; margin-bottom: 4px;">' + r.name + '</div>' +
'<div class="tiny muted">' + r.schedule + '</div>' +
'</div>';
}).join('');
const container = $('#scheduledReports');
if(container) container.innerHTML = html;
}

function renderAll() {
console.log('🔄 Rendering all...');
renderSidebarProducts();
renderKPIs();
drawTrendChart();
drawExpenseChart();
drawProductDonut();
drawDivisionChart();
runInsights();
renderTxnTable();
renderContacts();
renderProductsGrid();
renderTasks();
renderRoadmap();
renderDivisions();
renderNotes();
renderReports();
renderMini();
renderScheduledReports();
renderProductsSelects();
console.log('✅ All rendered');
}

function renderProductsSelects() {
const sel = $('#prodSelect');
if(!sel) return;
sel.innerHTML = '<option value="all">All products</option>';
state.products.forEach(p => {
sel.insertAdjacentHTML('beforeend', '<option value="' + p.id + '">' + p.name + '</option>');
});
}

// ============================================
// INITIALIZATION
// ============================================
console.log('📦 Loading state...');
load();
if(state.transactions.length === 0) {
console.log('📊 Generating demo data...');
generateDemoData();
}

console.log('🕐 Initializing...');
updateDateTime();
updateGreeting();
setInterval(updateDateTime, 1000);
setInterval(updateGreeting, 60000);

console.log('🔌 Wiring...');
wireNav();
wireControls();
setupGlobalSearch();

console.log('🎨 Rendering...');
renderAll();

const modalOverlay = $('#modalOverlay');
if (modalOverlay) {
modalOverlay.addEventListener('click', e => {
if(e.target.id === 'modalOverlay') closeModal();
});
}

let resizeTimer;
window.addEventListener('resize', () => {
clearTimeout(resizeTimer);
resizeTimer = setTimeout(() => {
drawTrendChart();
drawExpenseChart();
drawProductDonut();
drawDivisionChart();
}, 250);
});

window.addEventListener('beforeunload', () => save());

setTimeout(() => {
showToast('Welcome to Virely Ops! All features active.', 3500);
}, 800);

console.log('✅✅✅ FULLY OPERATIONAL - All features working including roadmap, tasks, divisions, and smart clear data! ✅✅✅');

});
</script>
</body>
</html>
