<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Virely Ops — SaaS Business Operations System</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

:root {
--bg-primary: #0a0e1a;
--bg-secondary: #0f1420;
--bg-tertiary: #141b2e;
--text-primary: #ffffff;
--text-secondary: #94a3b8;
--text-muted: #64748b;
--charcoal-gray: #3a3a3a;
--accent-primary: #6ee7b7;
--accent-secondary: #7c5cff;
--accent-tertiary: #60a5fa;
--danger: #ff6b6b;
--warning: #ffb86b;
--success: #4ade80;
--glass: rgba(255,255,255,0.03);
--glass-border: rgba(255,255,255,0.08);
--shadow-sm: 0 2px 8px rgba(0,0,0,0.1);
--shadow-md: 0 4px 16px rgba(0,0,0,0.2);
--shadow-lg: 0 8px 32px rgba(0,0,0,0.3);
--shadow-xl: 0 16px 64px rgba(0,0,0,0.4);
--glow-accent: 0 0 32px rgba(110,231,183,0.2);
--glow-secondary: 0 0 32px rgba(124,92,255,0.2);
}

* {
box-sizing: border-box;
margin: 0;
padding: 0;
}

html, body {
height: 100%;
overflow-x: hidden;
}

body {
font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
background: linear-gradient(135deg, #0a0e1a 0%, #050810 50%, #0a0e1a 100%);
color: var(--text-primary);
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
line-height: 1.6;
position: relative;
}

body::before {
content: '';
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: 
radial-gradient(ellipse at 20% 20%, rgba(110,231,183,0.08) 0%, transparent 50%),
radial-gradient(ellipse at 80% 80%, rgba(124,92,255,0.08) 0%, transparent 50%),
radial-gradient(ellipse at 50% 50%, rgba(96,165,250,0.05) 0%, transparent 50%);
animation: gradientShift 20s ease infinite;
pointer-events: none;
z-index: 0;
}

@keyframes gradientShift {
0%, 100% { opacity: 1; transform: scale(1); }
50% { opacity: 0.8; transform: scale(1.1); }
}

::-webkit-scrollbar {
width: 10px;
height: 10px;
}

::-webkit-scrollbar-track {
background: var(--bg-secondary);
}

::-webkit-scrollbar-thumb {
background: linear-gradient(135deg, var(--accent-secondary), var(--accent-primary));
border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
}

.app {
display: grid;
grid-template-columns: 280px 1fr;
gap: 24px;
padding: 24px;
width: 100%;
max-width: 2000px;
margin: 0 auto;
min-height: 100vh;
position: relative;
z-index: 1;
}

nav.left {
display: flex;
flex-direction: column;
position: sticky;
top: 24px;
max-height: calc(100vh - 48px);
overflow-y: auto;
}

.brand {
display: flex;
align-items: center;
gap: 16px;
margin-bottom: 24px;
padding-bottom: 24px;
border-bottom: 1px solid var(--glass-border);
}

.brand-logo {
width: 48px;
height: 48px;
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
border-radius: 12px;
display: flex;
align-items: center;
justify-content: center;
font-size: 24px;
box-shadow: 0 8px 24px rgba(110,231,183,0.3);
}

.brand-text h1 {
font-size: 22px;
font-weight: 800;
background: linear-gradient(135deg, var(--accent-primary), var(--text-primary));
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
background-clip: text;
}

.brand-text p {
font-size: 12px;
color: var(--text-muted);
text-transform: uppercase;
letter-spacing: 1px;
}

.greeting-message {
padding: 12px 16px;
background: linear-gradient(135deg, rgba(110,231,183,0.1), rgba(124,92,255,0.1));
border: 1px solid var(--glass-border);
border-radius: 12px;
text-align: center;
font-size: 14px;
font-weight: 600;
margin-bottom: 16px;
color: var(--text-primary);
}

.datetime-widget {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 16px;
text-align: center;
margin-bottom: 24px;
}

.datetime-widget .date {
font-size: 13px;
color: var(--text-secondary);
margin-bottom: 8px;
font-weight: 500;
}

.datetime-widget .time {
font-size: 20px;
font-weight: 700;
color: var(--text-primary);
font-variant-numeric: tabular-nums;
}

.nav-list {
display: flex;
flex-direction: column;
gap: 6px;
}

.nav-item {
padding: 12px 16px;
border-radius: 12px;
cursor: pointer;
transition: all 0.3s ease;
font-size: 14px;
font-weight: 600;
color: var(--text-secondary);
display: flex;
align-items: center;
gap: 12px;
position: relative;
}

.nav-item:hover {
background: rgba(255,255,255,0.05);
color: var(--text-primary);
transform: translateX(4px);
}

.nav-item.active {
background: linear-gradient(135deg, rgba(110,231,183,0.15), rgba(124,92,255,0.15));
color: var(--text-primary);
border-left: 3px solid var(--accent-primary);
box-shadow: 0 4px 16px rgba(110,231,183,0.2);
}

.nav-item.active::before {
content: '';
position: absolute;
left: 0;
top: 0;
bottom: 0;
width: 3px;
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
}

main {
display: flex;
flex-direction: column;
gap: 24px;
min-height: calc(100vh - 48px);
}

.section-content {
display: none;
flex-direction: column;
gap: 24px;
}

.section-content.active {
display: flex;
}

.panel {
background: linear-gradient(135deg, rgba(20,27,46,0.9) 0%, rgba(10,14,26,0.8) 100%);
border: 1px solid var(--glass-border);
border-radius: 16px;
padding: 28px;
backdrop-filter: blur(20px) saturate(180%);
box-shadow: var(--shadow-md);
transition: all 0.3s ease;
}

.panel:hover {
border-color: rgba(110,231,183,0.2);
box-shadow: var(--shadow-lg);
}

.panel-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 24px;
flex-wrap: wrap;
gap: 12px;
}

.panel-header h2 {
font-size: 20px;
font-weight: 800;
color: var(--text-primary);
display: flex;
align-items: center;
gap: 12px;
}

.btn-group {
display: flex;
gap: 8px;
flex-wrap: wrap;
}

.btn, .ghost {
padding: 10px 20px;
border-radius: 12px;
font-size: 14px;
font-weight: 600;
cursor: pointer;
transition: all 0.3s ease;
border: none;
outline: none;
font-family: inherit;
display: inline-flex;
align-items: center;
gap: 8px;
}

.btn {
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
color: var(--bg-primary);
box-shadow: 0 4px 16px rgba(110,231,183,0.3);
}

.btn:hover {
transform: translateY(-2px);
box-shadow: 0 8px 24px rgba(110,231,183,0.4);
}

.ghost {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
color: var(--text-primary);
}

.ghost:hover {
background: rgba(255,255,255,0.08);
border-color: var(--accent-primary);
transform: translateY(-2px);
}

.ghost.danger {
color: var(--danger);
border-color: rgba(255,107,107,0.3);
}

.ghost.danger:hover {
background: rgba(255,107,107,0.1);
border-color: var(--danger);
}

.modal-overlay {
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(0,0,0,0.8);
backdrop-filter: blur(10px);
display: flex;
align-items: center;
justify-content: center;
z-index: 9999;
opacity: 0;
pointer-events: none;
transition: opacity 0.3s ease;
padding: 24px;
}

.modal-overlay.active {
opacity: 1;
pointer-events: all;
}

.modal-content {
background: linear-gradient(135deg, rgba(20,27,46,0.98) 0%, rgba(10,14,26,0.98) 100%);
border: 1px solid var(--glass-border);
border-radius: 20px;
padding: 32px;
max-width: 600px;
width: 100%;
max-height: 90vh;
overflow-y: auto;
box-shadow: 0 24px 64px rgba(0,0,0,0.6);
backdrop-filter: blur(20px);
transform: scale(0.9);
transition: transform 0.3s ease;
}

.modal-overlay.active .modal-content {
transform: scale(1);
}

/* Search Results Modal */
.search-results-modal {
position: fixed;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
z-index: 10001;
width: 90%;
max-width: 700px;
max-height: 80vh;
background: linear-gradient(135deg, rgba(20,27,46,0.98) 0%, rgba(10,14,26,0.98) 100%);
border: 1px solid var(--glass-border);
border-radius: 20px;
box-shadow: 0 24px 64px rgba(0,0,0,0.6), 0 0 0 1px rgba(110,231,183,0.1);
backdrop-filter: blur(20px);
overflow: hidden;
animation: searchModalSlideIn 0.3s ease;
}

@keyframes searchModalSlideIn {
from {
opacity: 0;
transform: translate(-50%, -45%);
}
to {
opacity: 1;
transform: translate(-50%, -50%);
}
}

.search-results-modal.search-results-closing {
animation: searchModalSlideOut 0.3s ease;
}

@keyframes searchModalSlideOut {
from {
opacity: 1;
transform: translate(-50%, -50%);
}
to {
opacity: 0;
transform: translate(-50%, -45%);
}
}

.search-results-content {
display: flex;
flex-direction: column;
height: 100%;
}

.search-results-header {
display: flex;
justify-content: space-between;
align-items: center;
padding: 24px 28px 16px 28px;
border-bottom: 1px solid var(--glass-border);
}

.search-results-header h3 {
font-size: 20px;
font-weight: 800;
margin: 0;
color: var(--text-primary);
}

.search-query {
padding: 16px 28px;
font-size: 14px;
color: var(--text-secondary);
background: rgba(110,231,183,0.05);
border-bottom: 1px solid var(--glass-border);
margin: 0;
}

.search-results-list {
overflow-y: auto;
padding: 16px 28px 24px 28px;
max-height: calc(80vh - 150px);
}

.search-category {
margin-bottom: 24px;
}

.search-category:last-child {
margin-bottom: 0;
}

.search-category h4 {
font-size: 13px;
font-weight: 700;
color: var(--text-secondary);
text-transform: uppercase;
letter-spacing: 1px;
margin-bottom: 12px;
padding-bottom: 8px;
border-bottom: 1px solid rgba(255,255,255,0.05);
}

.search-result-item {
display: flex;
align-items: center;
gap: 12px;
padding: 12px;
margin-bottom: 8px;
background: rgba(255,255,255,0.02);
border: 1px solid var(--glass-border);
border-radius: 12px;
cursor: pointer;
transition: all 0.2s ease;
}

.search-result-item:hover {
background: rgba(110,231,183,0.08);
border-color: var(--accent-primary);
transform: translateX(4px);
}

.result-icon {
width: 40px;
height: 40px;
border-radius: 10px;
display: flex;
align-items: center;
justify-content: center;
font-size: 18px;
flex-shrink: 0;
}

.result-content {
flex: 1;
min-width: 0;
}

.result-title {
font-size: 14px;
font-weight: 600;
color: var(--text-primary);
margin-bottom: 4px;
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
}

.result-meta {
font-size: 12px;
color: var(--text-muted);
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
}

.result-arrow {
color: var(--accent-primary);
font-size: 18px;
font-weight: 700;
opacity: 0;
transition: opacity 0.2s ease;
flex-shrink: 0;
}

.search-result-item:hover .result-arrow {
opacity: 1;
}

.kpi-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
gap: 16px;
}

.kpi-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
transition: all 0.3s ease;
position: relative;
overflow: hidden;
}

.kpi-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.kpi-card::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
height: 3px;
background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
}

.kpi-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 12px;
}

.kpi-label {
font-size: 13px;
color: var(--text-muted);
font-weight: 600;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.kpi-icon {
font-size: 24px;
opacity: 0.8;
}

.kpi-value {
font-size: 28px;
font-weight: 800;
color: var(--text-primary);
margin-bottom: 8px;
line-height: 1;
}

.kpi-change {
font-size: 13px;
font-weight: 600;
display: inline-flex;
align-items: center;
gap: 4px;
padding: 4px 10px;
border-radius: 6px;
}

.kpi-change.positive {
color: var(--success);
background: rgba(74,222,128,0.1);
}

.kpi-change.negative {
color: var(--danger);
background: rgba(255,107,107,0.1);
}

.hint-display {
display: none;
margin-bottom: 16px;
padding: 20px 24px;
background: linear-gradient(135deg, rgba(110,231,183,0.08), rgba(124,92,255,0.08));
border: 1px solid var(--accent-primary);
border-radius: 12px;
animation: slideDown 0.3s ease;
}

.hint-display.active {
display: block;
}

@keyframes slideDown {
from {
opacity: 0;
transform: translateY(-10px);
}
to {
opacity: 1;
transform: translateY(0);
}
}

.hint-display .hint-title {
font-size: 14px;
font-weight: 700;
color: var(--accent-primary);
margin-bottom: 8px;
display: flex;
align-items: center;
gap: 8px;
}

.hint-display .hint-content {
font-size: 13px;
line-height: 1.7;
color: var(--text-secondary);
}

.hint-display .hint-close {
float: right;
background: none;
border: none;
color: var(--text-muted);
cursor: pointer;
font-size: 18px;
padding: 0;
margin: -4px 0 0 0;
transition: all 0.3s ease;
}

.hint-display .hint-close:hover {
color: var(--accent-primary);
transform: scale(1.2);
}

.kpi-card {
cursor: pointer;
}

.kpi-card.active-hint {
background: rgba(110,231,183,0.1);
border-color: var(--accent-primary);
box-shadow: 0 4px 16px rgba(110,231,183,0.3);
}


.chart-container {
position: relative;
height: 400px;
margin-top: 20px;
}

aside.right {
display: flex;
flex-direction: column;
gap: 24px;
position: sticky;
top: 24px;
max-height: calc(100vh - 48px);
overflow-y: auto;
}

.mini-panel {
background: linear-gradient(135deg, rgba(20,27,46,0.9) 0%, rgba(10,14,26,0.8) 100%);
border: 1px solid var(--glass-border);
border-radius: 16px;
padding: 20px;
backdrop-filter: blur(20px) saturate(180%);
box-shadow: var(--shadow-md);
transition: all 0.3s ease;
}

.mini-panel:hover {
border-color: rgba(110,231,183,0.2);
box-shadow: var(--shadow-lg);
transform: translateY(-2px);
}

.mini-panel h3 {
font-size: 16px;
font-weight: 700;
margin-bottom: 16px;
color: var(--text-primary);
display: flex;
align-items: center;
gap: 8px;
}

.insight-item, .activity-item {
padding: 10px 14px;
margin-bottom: 10px;
background: rgba(255,255,255,0.03);
border-left: 3px solid var(--accent-primary);
border-radius: 8px;
font-size: 12px;
line-height: 1.6;
transition: all 0.3s ease;
}

.insight-item:hover, .activity-item:hover {
background: rgba(255,255,255,0.06);
transform: translateX(2px);
}

.insight-item strong {
color: var(--accent-primary);
font-size: 12px;
}

.activity-item .time {
font-size: 11px;
color: var(--text-muted);
margin-top: 4px;
}

table {
width: 100%;
border-collapse: collapse;
margin-top: 16px;
}

th {
text-align: left;
padding: 12px 16px;
font-size: 12px;
font-weight: 700;
color: var(--text-muted);
text-transform: uppercase;
letter-spacing: 0.5px;
border-bottom: 2px solid var(--glass-border);
}

td {
padding: 16px;
border-bottom: 1px solid var(--glass-border);
font-size: 14px;
}

tr {
transition: background 0.2s ease;
}

tr:hover {
background: rgba(255,255,255,0.03);
}

.badge {
display: inline-block;
padding: 4px 12px;
border-radius: 6px;
font-size: 11px;
font-weight: 700;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.badge.revenue {
background: rgba(110,231,183,0.2);
color: var(--accent-primary);
}

.badge.expense {
background: rgba(255,107,107,0.2);
color: var(--danger);
}

.contact-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 16px;
margin-top: 16px;
}

@media (max-width: 768px) {
.contact-grid {
grid-template-columns: 1fr;
}
}

.contact-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 10px;
padding: 14px;
transition: all 0.3s ease;
position: relative;
}

.contact-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-2px);
box-shadow: 0 4px 16px rgba(110,231,183,0.2);
}

.contact-card .name {
font-size: 14px;
font-weight: 700;
margin-bottom: 3px;
color: var(--text-primary);
}

.contact-card .company {
font-size: 12px;
color: var(--text-secondary);
margin-bottom: 8px;
}

.contact-card .email {
font-size: 11px;
color: var(--text-muted);
margin-bottom: 3px;
}

.contact-link {
color: var(--text-muted);
text-decoration: none;
transition: all 0.2s ease;
display: inline-block;
position: relative;
}

.contact-link:hover {
color: var(--accent-primary);
text-decoration: none;
transform: translateX(2px);
}

.contact-link:hover::before {
content: '→ ';
position: absolute;
left: -16px;
color: var(--accent-primary);
font-weight: 700;
animation: arrowBounce 0.6s ease infinite;
}

@keyframes arrowBounce {
0%, 100% { transform: translateX(0); }
50% { transform: translateX(3px); }
}

.contact-link:active {
color: var(--accent-secondary);
}

.contact-card .actions {
display: flex;
gap: 6px;
margin-top: 10px;
}

.action-btn {
flex: 1;
padding: 6px 10px;
border-radius: 7px;
font-size: 11px;
font-weight: 600;
cursor: pointer;
transition: all 0.3s ease;
border: 1px solid var(--glass-border);
background: rgba(255,255,255,0.03);
color: var(--text-primary);
}

.action-btn:hover {
background: rgba(255,255,255,0.08);
transform: translateY(-2px);
}

.action-btn.danger:hover {
background: rgba(255,107,107,0.1);
border-color: var(--danger);
color: var(--danger);
}

.form-group {
margin-bottom: 20px;
}

.form-group label {
display: block;
font-size: 13px;
font-weight: 600;
color: var(--text-secondary);
margin-bottom: 8px;
text-transform: uppercase;
letter-spacing: 0.5px;
}

.form-group input,
.form-group select,
.form-group textarea {
width: 100%;
padding: 12px 16px;
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
color: var(--text-primary);
font-size: 14px;
font-family: inherit;
transition: all 0.3s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
outline: none;
border-color: var(--accent-primary);
background: rgba(255,255,255,0.05);
box-shadow: 0 0 0 3px rgba(110,231,183,0.1);
}

/* Enhanced styling for select dropdowns for better readability */
.form-group select {
background: rgba(20,27,46,0.95) !important;
color: var(--text-primary);
font-weight: 500;
border: 1px solid rgba(110,231,183,0.2);
cursor: pointer;
}

.form-group select option {
background: rgba(15,20,32,0.98);
color: var(--text-primary);
padding: 12px;
font-weight: 500;
}

.form-group select:focus {
background: rgba(20,27,46,1) !important;
border-color: var(--accent-primary);
}

/* Global select styling */
select {
background: rgba(20,27,46,0.95);
color: var(--text-primary);
border: 1px solid rgba(110,231,183,0.2);
border-radius: 8px;
font-weight: 500;
cursor: pointer;
}

select option {
background: rgba(15,20,32,0.98);
color: var(--text-primary);
padding: 10px;
font-weight: 500;
}

select:focus {
outline: none;
border-color: var(--accent-primary);
box-shadow: 0 0 0 2px rgba(110,231,183,0.15);
}

.form-group textarea {
resize: vertical;
min-height: 100px;
}

.toast {
position: fixed;
top: 24px;
right: 24px;
background: linear-gradient(135deg, rgba(110,231,183,0.95) 0%, rgba(124,92,255,0.95) 100%);
color: var(--bg-primary);
padding: 16px 24px;
border-radius: 12px;
font-weight: 600;
font-size: 14px;
box-shadow: 0 8px 32px rgba(110,231,183,0.4);
z-index: 10000;
animation: slideInToast 0.4s ease, slideOutToast 0.4s ease 2.6s;
pointer-events: none;
}

@keyframes slideInToast {
from { transform: translateX(400px); opacity: 0; }
to { transform: translateX(0); opacity: 1; }
}

@keyframes slideOutToast {
from { transform: translateX(0); opacity: 1; }
to { transform: translateX(400px); opacity: 0; }
}

.toast-error {
background: linear-gradient(135deg, rgba(255,107,107,0.95) 0%, rgba(255,180,107,0.95) 100%) !important;
box-shadow: 0 8px 32px rgba(255,107,107,0.4) !important;
}

.flex { display: flex; }
.gap { gap: 12px; }
.items-center { align-items: center; }
.justify-between { justify-content: space-between; }
.tiny { font-size: 12px; }
.muted { color: var(--text-muted); }
.bold { font-weight: 700; }
.mt { margin-top: 16px; }
.mb { margin-bottom: 16px; }

.integrations-grid {
display: grid;
grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
gap: 12px;
margin-top: 16px;
}

.integration-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 16px;
text-align: center;
transition: all 0.3s ease;
cursor: pointer;
position: relative;
}

.integration-card:hover {
background: rgba(255,255,255,0.07);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.integration-card.connected {
border-color: var(--success);
background: rgba(74,222,128,0.05);
}

.integration-card .icon {
width: 48px;
height: 48px;
margin: 0 auto 12px;
border-radius: 10px;
display: flex;
align-items: center;
justify-content: center;
font-size: 24px;
background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
}

.integration-card .name {
font-size: 13px;
font-weight: 600;
margin-bottom: 4px;
}

.integration-card .status {
font-size: 11px;
color: var(--text-muted);
}

.integration-card.connected .status {
color: var(--success);
}

.integration-badge {
position: absolute;
top: 8px;
right: 8px;
width: 8px;
height: 8px;
border-radius: 50%;
background: var(--success);
box-shadow: 0 0 10px var(--success);
}

.search-box {
position: relative;
margin-bottom: 20px;
}

.search-box input {
width: 100%;
padding: 12px 16px 12px 44px;
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
color: var(--text-primary);
font-size: 14px;
font-family: inherit;
transition: all 0.3s ease;
}

.search-box input:focus {
outline: none;
border-color: var(--accent-primary);
background: rgba(255,255,255,0.05);
box-shadow: 0 0 0 3px rgba(110,231,183,0.1);
}

.search-box::before {
content: '🔍';
position: absolute;
left: 16px;
top: 50%;
transform: translateY(-50%);
font-size: 16px;
}

.clickable {
cursor: pointer;
}

.clickable:hover {
opacity: 0.8;
}

input[type="checkbox"] {
width: 20px;
height: 20px;
cursor: pointer;
accent-color: var(--accent-primary);
}

.product-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
transition: all 0.3s ease;
position: relative;
}

.product-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.product-card .name {
font-size: 18px;
font-weight: 700;
margin-bottom: 8px;
color: var(--text-primary);
}

.product-card .price {
font-size: 16px;
color: var(--accent-primary);
margin-bottom: 8px;
font-weight: 600;
}

.product-card .id {
font-size: 11px;
color: var(--text-muted);
margin-bottom: 8px;
}

.product-card .actions {
display: flex;
gap: 8px;
margin-top: 16px;
}

.task-item {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 16px;
margin-bottom: 12px;
transition: all 0.3s ease;
display: flex;
align-items: start;
gap: 12px;
}

.task-item:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateX(4px);
}

.task-item.completed {
opacity: 0.6;
}

.task-item.completed .task-title {
text-decoration: line-through;
}

.task-checkbox {
margin-top: 4px;
}

.task-content {
flex: 1;
}

.task-title {
font-size: 14px;
font-weight: 600;
color: var(--text-primary);
margin-bottom: 4px;
}

.task-meta {
font-size: 12px;
color: var(--text-muted);
display: flex;
gap: 12px;
flex-wrap: wrap;
}

.roadmap-item {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
margin-bottom: 16px;
transition: all 0.3s ease;
border-left: 4px solid var(--accent-primary);
}

.roadmap-item:hover {
background: rgba(255,255,255,0.06);
transform: translateX(4px);
box-shadow: 0 4px 16px rgba(110,231,183,0.2);
}

.roadmap-item.planning {
border-left-color: #94a3b8;
}

.roadmap-item.in-progress {
border-left-color: #60a5fa;
}

.roadmap-item.completed {
border-left-color: #4ade80;
}

.roadmap-title {
font-size: 16px;
font-weight: 700;
color: var(--text-primary);
margin-bottom: 8px;
}

.roadmap-desc {
font-size: 13px;
color: var(--text-secondary);
margin-bottom: 12px;
line-height: 1.6;
}

.roadmap-meta {
display: flex;
gap: 12px;
align-items: center;
flex-wrap: wrap;
}

.roadmap-badge {
font-size: 11px;
padding: 4px 10px;
border-radius: 6px;
font-weight: 600;
text-transform: uppercase;
}

.roadmap-badge.planning {
background: rgba(148,163,184,0.2);
color: #94a3b8;
}

.roadmap-badge.in-progress {
background: rgba(96,165,250,0.2);
color: #60a5fa;
}

.roadmap-badge.completed {
background: rgba(74,222,128,0.2);
color: #4ade80;
}

.division-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 24px;
transition: all 0.3s ease;
}

.division-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.division-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 20px;
}

.division-name {
font-size: 18px;
font-weight: 700;
color: var(--text-primary);
}

.division-icon {
font-size: 32px;
}

.division-stats {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 16px;
}

.division-stat {
background: rgba(255,255,255,0.02);
padding: 16px;
border-radius: 8px;
}

.division-stat-label {
font-size: 11px;
color: var(--text-muted);
text-transform: uppercase;
letter-spacing: 0.5px;
margin-bottom: 8px;
}

.division-stat-value {
font-size: 24px;
font-weight: 700;
color: var(--text-primary);
}

.division-stat.revenue .division-stat-value {
color: var(--accent-primary);
}

.division-stat.expense .division-stat-value {
color: var(--danger);
}

.division-stat.profit .division-stat-value {
color: var(--accent-tertiary);
}

.note-card {
background: rgba(255,255,255,0.03);
border: 1px solid var(--glass-border);
border-radius: 12px;
padding: 20px;
transition: all 0.3s ease;
position: relative;
border-left: 4px solid var(--accent-primary);
}

.note-card:hover {
background: rgba(255,255,255,0.06);
border-color: var(--accent-primary);
transform: translateY(-4px);
box-shadow: 0 8px 24px rgba(110,231,183,0.2);
}

.note-card.important {
border-left-color: var(--danger);
}

.note-card.idea {
border-left-color: var(--warning);
}

.note-card.todo {
border-left-color: var(--accent-tertiary);
}

.note-title {
font-size: 18px;
font-weight: 700;
color: var(--text-primary);
margin-bottom: 12px;
display: flex;
align-items: center;
gap: 8px;
}

.note-content {
font-size: 14px;
color: var(--text-secondary);
line-height: 1.6;
margin-bottom: 16px;
white-space: pre-wrap;
word-wrap: break-word;
}

.note-meta {
display: flex;
gap: 12px;
align-items: center;
flex-wrap: wrap;
font-size: 12px;
color: var(--text-muted);
margin-bottom: 12px;
}

.note-tag {
display: inline-block;
padding: 4px 10px;
border-radius: 6px;
font-size: 11px;
font-weight: 600;
text-transform: uppercase;
background: rgba(255,255,255,0.05);
}

.note-tag.important {
background: rgba(255,107,107,0.2);
color: var(--danger);
}

.note-tag.idea {
background: rgba(255,184,107,0.2);
color: var(--warning);
}

.note-tag.todo {
background: rgba(96,165,250,0.2);
color: var(--accent-tertiary);
}

.note-tag.general {
background: rgba(110,231,183,0.2);
color: var(--accent-primary);
}

.note-actions {
display: flex;
gap: 8px;
margin-top: 12px;
}
</style>
</head>
<body>
<div class="app">
<nav class="left">
<div class="brand">
<div class="brand-logo">📊</div>
<div class="brand-text">
<h1>Virely Ops</h1>
<p>SaaS Business Operations System</p>
</div>
</div>

<div class="greeting-message" id="greetingMessage"></div>

<div class="datetime-widget">
<div class="date" id="currentDate"></div>
<div class="time" id="currentTime"></div>
</div>

<div class="search-box">
<input type="text" id="globalSearch" placeholder="Search everything...">
</div>

<div class="nav-list">
<div class="nav-item active" data-section="dashboard">
<span>📊 Dashboard</span>
</div>
<div class="nav-item" data-section="analytics">
<span>📈 Analytics</span>
</div>
<div class="nav-item" data-section="transactions">
<span>💰 Transactions</span>
</div>
<div class="nav-item" data-section="products">
<span>📦 Products</span>
</div>
<div class="nav-item" data-section="contacts">
<span>👥 Contacts</span>
</div>
<div class="nav-item" data-section="roadmap">
<span>🗺️ Roadmap & Tasks</span>
</div>
<div class="nav-item" data-section="calendar">
<span>📅 Calendar</span>
</div>
<div class="nav-item" data-section="divisions">
<span>🏢 Divisions</span>
</div>
<div class="nav-item" data-section="team-directory">
<span>👥 Team Directory</span>
</div>
<div class="nav-item" data-section="vendor-directory">
<span>🔧 Tech Vendor Directory</span>
</div>
<div class="nav-item" data-section="advertising">
<span>📢 Advertising & Marketing</span>
</div>
<div class="nav-item" data-section="notes">
<span>📝 Notes</span>
</div>
<div class="nav-item" data-section="reports">
<span>📄 Reports</span>
</div>
<div class="nav-item" data-section="integrations">
<span>🔗 Integrations</span>
</div>
<div class="nav-item" data-section="alerts">
<span>🚨 Operations Alerts</span>
</div>
<div class="nav-item" data-section="settings">
<span>⚙️ Settings</span>
</div>
</div>

<div style="margin-top: 24px; padding-top: 24px; border-top: 1px solid var(--glass-border);">
<h4 style="font-size: 12px; color: var(--text-muted); margin-bottom: 12px; text-transform: uppercase; letter-spacing: 0.5px;">Products</h4>
<div id="sidebarProducts"></div>
</div>
</nav>

<main>
<!-- Dashboard Section -->
<div class="section-content active" data-section="dashboard">
<div style="display: grid; grid-template-columns: 1fr 450px; gap: 24px;">
<!-- Main KPI Area -->
<div>
<div class="panel">
<div class="panel-header">
<h2>Key Performance Indicators</h2>
<div class="btn-group">
<select id="prodSelect" style="padding: 8px 16px; font-size: 13px;">
<option value="all">All products</option>
</select>
<button class="ghost" id="refreshBtn" style="padding: 8px 16px;">🔄 Refresh</button>
</div>
</div>
<div class="kpi-grid" id="kpiGrid"></div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Revenue Trend (Last 12 Months)</h2>
<div class="btn-group">
<button class="ghost" data-chart="line" style="padding: 8px 16px;">📈 Line</button>
<button class="ghost" data-chart="bar" style="padding: 8px 16px;">📊 Bar</button>
<button class="ghost" id="refreshRevenue" style="padding: 8px 16px;">🔄 Refresh</button>
</div>
</div>
<div class="chart-container">
<canvas id="trendChart"></canvas>
</div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Expenses Breakdown (Last 12 Months)</h2>
<div class="btn-group">
<button class="ghost" data-expense-chart="line" style="padding: 8px 16px;">📈 Line</button>
<button class="ghost" data-expense-chart="bar" style="padding: 8px 16px;">📊 Bar</button>
<button class="ghost" id="refreshExpenses" style="padding: 8px 16px;">🔄 Refresh</button>
</div>
</div>
<div class="chart-container">
<canvas id="expenseChart"></canvas>
</div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Product Revenue Distribution</h2>
<button class="ghost" id="exportChart" style="padding: 8px 16px;">📥 Export</button>
</div>
<div class="chart-container" style="height: 350px;">
<canvas id="productChart"></canvas>
</div>
</div>
</div>

<!-- Compact Right Sidebar Panels -->
<div style="display: flex; flex-direction: column; gap: 18px;">
<!-- AI Insights - Compact -->
<div class="mini-panel" style="padding: 20px;">
<h3 style="font-size: 15px; margin-bottom: 12px; display: flex; align-items: center; gap: 8px;">🔮 AI Insights</h3>
<div id="insightsList" style="max-height: 250px; overflow-y: auto;"></div>
</div>

<!-- Invoices Due - Enhanced -->
<div class="mini-panel" id="invoiceRemindersPanel" style="padding: 20px;">
<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
	<h3 style="font-size: 15px; margin: 0; display: flex; align-items: center; gap: 8px;">
		📋 Invoices Due
		<span id="invoiceCount" style="font-size: 11px; padding: 3px 8px; background: var(--accent-primary); color: var(--bg-primary); border-radius: 6px; font-weight: 700;">0</span>
	</h3>
	<button class="ghost" onclick="showRecurringInvoicesModal()" style="padding: 4px 10px; font-size: 11px;">⚙️ Manage</button>
</div>
<div id="invoiceRemindersList" style="max-height: 280px; overflow-y: auto;"></div>
</div>

<!-- Recent Activity - Compact -->
<div class="mini-panel" style="padding: 20px;">
<h3 style="font-size: 15px; margin-bottom: 12px; display: flex; align-items: center; gap: 8px;">📝 Recent Activity</h3>
<div id="activityFeed" style="max-height: 250px; overflow-y: auto;"></div>
</div>

<!-- Quick Actions - Compact -->
<div class="mini-panel" style="padding: 20px;">
<h3 style="font-size: 15px; margin-bottom: 12px; display: flex; align-items: center; gap: 8px;">⚡ Quick Actions</h3>
<div class="btn-group" style="flex-direction: column; gap: 10px;">
<button class="btn" id="quickCreate" style="padding: 10px 16px; font-size: 14px;">➕ Create</button>
<button class="ghost" id="quickSearch" style="padding: 10px 16px; font-size: 14px;">🔍 Search</button>
<button class="ghost" id="quickReport" style="padding: 10px 16px; font-size: 14px;">📊 Generate Report</button>
<button class="ghost" id="runTests" style="padding: 10px 16px; font-size: 14px;">🧪 Run Tests</button>
</div>
</div>

<!-- Scheduled Reports - Compact -->
<div class="mini-panel" style="padding: 20px;">
<h3 style="font-size: 15px; margin-bottom: 12px;">📅 Scheduled Reports</h3>
<div id="scheduledReports" style="font-size: 12px;"></div>
</div>

<!-- Pro Tip - Compact -->
<div class="mini-panel" style="padding: 18px; background: linear-gradient(135deg, rgba(110,231,183,0.1), rgba(124,92,255,0.1)); border: 1px solid rgba(110,231,183,0.3);">
<h3 style="color: var(--accent-primary); font-size: 14px; margin-bottom: 8px;">💡 Tip</h3>
<p style="font-size: 12px; color: var(--text-secondary); line-height: 1.6;">
Generate detailed reports from 35+ templates covering all business metrics.
</p>
</div>
</div>
</div>
</div>

<!-- Analytics Section -->
<div class="section-content" data-section="analytics">
<div class="panel">
<div class="panel-header">
<h2>📈 Advanced Analytics Dashboard</h2>
<button class="ghost" id="refreshAnalytics">🔄 Refresh</button>
</div>

<!-- Revenue Metrics -->
<div style="margin-bottom: 32px;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 16px; color: var(--accent-primary);">💰 Revenue Metrics</h3>
<div id="revenueHint" class="hint-display"></div>
<div class="kpi-grid" id="revenueMetrics"></div>
</div>

<!-- Expense & Profitability Metrics -->
<div style="margin-bottom: 32px;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 16px; color: var(--danger);">💸 Expense & Profitability</h3>
<div id="expenseHint" class="hint-display"></div>
<div class="kpi-grid" id="expenseMetrics"></div>
</div>

<!-- Customer Metrics -->
<div style="margin-bottom: 32px;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 16px; color: var(--accent-tertiary);">👥 Customer Metrics</h3>
<div id="customerHint" class="hint-display"></div>
<div class="kpi-grid" id="customerMetrics"></div>
</div>

<!-- Operational Efficiency -->
<div style="margin-bottom: 32px;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 16px; color: var(--warning);">⚡ Operational Efficiency</h3>
<div id="operationalHint" class="hint-display"></div>
<div class="kpi-grid" id="operationalMetrics"></div>
</div>

<!-- Product Performance -->
<div style="margin-bottom: 32px;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 16px; color: var(--accent-secondary);">📦 Product Performance</h3>
<div id="productHint" class="hint-display"></div>
<div class="kpi-grid" id="productMetrics"></div>
</div>

<!-- Division Performance Summary -->
<div style="margin-bottom: 32px;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 16px; color: var(--success);">🏢 Division Performance</h3>
<div id="divisionHint" class="hint-display"></div>
<div class="kpi-grid" id="divisionMetrics"></div>
</div>

<!-- Time-Based Trends -->
<div>
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 16px; color: var(--text-primary);">📊 Trend Analysis</h3>
<div id="trendHint" class="hint-display"></div>
<div class="kpi-grid" id="trendMetrics"></div>
</div>
</div>
</div>

<!-- Transactions Section -->
<div class="section-content" data-section="transactions">
<div class="panel">
<div class="panel-header">
<h2>💰 Transactions</h2>
<div class="btn-group">
<button class="btn" id="newTxBtn">➕ New Transaction</button>
<button class="ghost" id="manageRecurringBtn">📋 Recurring Invoices</button>
<button class="ghost" id="importCsvBtn">📤 Import CSV</button>
<button class="ghost" id="refreshTransactions">🔄 Refresh</button>
<button class="ghost" id="exportTx">📥 Export</button>
<input type="file" id="csvFileInput" accept=".csv" style="display: none;">
</div>
</div>
<div id="bulkActionsBar" style="display: none; padding: 16px; margin-bottom: 16px; background: rgba(110,231,183,0.1); border: 1px solid var(--glass-border); border-radius: 12px; display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 12px;">
<div style="display: flex; align-items: center; gap: 12px;">
<span id="selectedCount" style="font-weight: 600; color: var(--text-primary);">0 selected</span>
</div>
<div style="display: flex; gap: 8px;">
<button class="ghost" id="deselectAllBtn" style="font-size: 13px; padding: 8px 16px;">Clear Selection</button>
<button class="ghost danger" id="bulkDeleteBtn" style="font-size: 13px; padding: 8px 16px;">🗑️ Delete Selected</button>
</div>
</div>
<div id="txnTable"></div>
</div>
</div>

<!-- Products Section -->
<div class="section-content" data-section="products">
<div class="panel">
<div class="panel-header">
<h2>📦 Product Management</h2>
<div class="btn-group">
<button class="btn" id="addProductBtn">➕ Add Product</button>
<button class="ghost" id="refreshProducts">🔄 Refresh</button>
</div>
</div>
<div class="contact-grid" id="productsGrid"></div>
</div>
</div>

<!-- Contacts Section -->
<div class="section-content" data-section="contacts">
<div class="panel">
<div class="panel-header">
<h2>👥 Contacts & Customers</h2>
<div class="btn-group">
<button class="btn" id="newContactBtn">➕ New Contact</button>
<button class="ghost" id="refreshContacts">🔄 Refresh</button>
<input type="text" id="contactSearch" placeholder="Search contacts..." style="padding: 8px 16px; width: 200px;">
</div>
</div>
<div class="contact-grid" id="contactsGrid"></div>
</div>
</div>

<!-- Roadmap & Tasks Section -->
<div class="section-content" data-section="roadmap">
<div class="panel">
<div class="panel-header">
<h2>🗺️ Product Roadmap</h2>
<div class="btn-group">
<button class="btn" id="newRoadmapBtn">➕ Add Roadmap Item</button>
<button class="ghost" id="refreshRoadmap">🔄 Refresh</button>
<button class="ghost" id="exportRoadmapBtn">📄 Export .docx</button>
</div>
</div>
<div id="roadmapList"></div>
</div>

<div class="panel">
<div class="panel-header">
<h2>✅ Tasks</h2>
<div class="btn-group">
<button class="btn" id="newTaskBtn">➕ New Task</button>
<button class="ghost" id="refreshTasks">🔄 Refresh</button>
<button class="ghost" id="exportTasksBtn">📄 Export .docx</button>
</div>
</div>
<div id="tasksList"></div>
</div>
</div>

<!-- Calendar Section -->
<div class="section-content" data-section="calendar">
<div class="panel">
<div class="panel-header">
<h2>📅 Google Calendar</h2>
<div class="btn-group">
<button class="btn" id="connectCalendarBtn">🔗 Connect Calendar</button>
<button class="ghost" id="refreshCalendar">🔄 Refresh</button>
<button class="ghost" id="todayBtn">📍 Today</button>
</div>
</div>
<div id="calendarStatus" style="padding: 16px; background: rgba(110,231,183,0.1); border: 1px solid rgba(110,231,183,0.3); border-radius: 12px; margin-bottom: 16px; display: none;">
<div style="display: flex; align-items: center; gap: 12px;">
<span style="font-size: 24px;">✅</span>
<div>
<div style="font-weight: 600; margin-bottom: 4px;">Connected to Google Calendar</div>
<div class="tiny muted">Viewing schedule for <span id="calendarEmail">user@example.com</span></div>
</div>
</div>
</div>
<div id="calendarDisconnected" style="padding: 40px; text-align: center; background: rgba(255,255,255,0.02); border-radius: 12px;">
<div style="font-size: 48px; margin-bottom: 16px;">📅</div>
<h3 style="margin-bottom: 12px;">Connect Your Google Calendar</h3>
<p class="tiny muted" style="margin-bottom: 24px;">Sync your calendar to view and manage your schedule directly from Virely Ops</p>
<button class="btn" onclick="connectGoogleCalendar()">🔗 Connect Google Calendar</button>
</div>
</div>

<div class="panel" id="calendarViewPanel" style="display: none;">
<div class="panel-header">
<h2>📆 Schedule</h2>
<div class="btn-group">
<button class="ghost" data-view="day" onclick="changeCalendarView('day')">Day</button>
<button class="ghost" data-view="week" onclick="changeCalendarView('week')">Week</button>
<button class="ghost active" data-view="month" onclick="changeCalendarView('month')">Month</button>
</div>
</div>
<div id="calendarControls" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding: 16px; background: rgba(255,255,255,0.02); border-radius: 12px;">
<button class="ghost" onclick="navigateCalendar(-1)">◀ Previous</button>
<h3 id="calendarMonth" style="margin: 0;">January 2025</h3>
<button class="ghost" onclick="navigateCalendar(1)">Next ▶</button>
</div>
<div id="calendarView"></div>
</div>

<div class="panel" id="upcomingEventsPanel" style="display: none;">
<div class="panel-header">
<h2>🔔 Upcoming Events</h2>
<span class="tiny muted">Next 7 days</span>
</div>
<div id="upcomingEventsList"></div>
</div>
</div>

<!-- Divisions Section -->
<div class="section-content" data-section="divisions">
<div class="panel">
<div class="panel-header">
<h2>🏢 Division Performance</h2>
<button class="ghost" id="refreshDivisions">🔄 Refresh</button>
</div>
<div class="kpi-grid" id="divisionsGrid"></div>
</div>

<div class="panel">
<div class="panel-header">
<h2>Division Breakdown Chart</h2>
<button class="ghost" id="refreshDivisionChart">🔄 Refresh</button>
</div>
<div class="chart-container">
<canvas id="divisionChart"></canvas>
</div>
</div>
</div>

<!-- Team Directory Section -->
<div class="section-content" data-section="team-directory">
<div class="panel">
<div class="panel-header">
<h2>👥 Team Directory</h2>
<div class="btn-group">
<button class="btn" id="newTeamMemberBtn">➕ New Team Member</button>
<button class="ghost" id="refreshTeam">🔄 Refresh</button>
<input type="text" id="teamSearch" placeholder="Search team..." style="padding: 8px 16px; width: 200px;">
</div>
</div>
<div id="teamGrid"></div>
</div>
</div>

<!-- Technology Vendor Directory Section -->
<div class="section-content" data-section="vendor-directory">
<div class="panel">
<div class="panel-header">
<h2>🔧 Technology Vendor Directory</h2>
<div class="btn-group">
<button class="btn" id="newVendorBtn">➕ New Vendor</button>
<button class="ghost" id="refreshVendors">🔄 Refresh</button>
<input type="text" id="vendorSearch" placeholder="Search vendors..." style="padding: 8px 16px; width: 200px;">
</div>
</div>
<div id="vendorGrid"></div>
</div>
</div>

<!-- Advertising & Marketing Section -->
<div class="section-content" data-section="advertising">
<div class="panel">
<div class="panel-header">
<h2>📢 Advertising & Marketing Hub</h2>
<div class="btn-group">
<button class="btn" id="newCampaignBtn">➕ New Campaign</button>
<button class="ghost" id="refreshAdvertising">🔄 Refresh</button>
<button class="ghost" id="exportMarketingReport">📊 Export Report</button>
</div>
</div>

<!-- Marketing Overview Stats -->
<div class="kpi-grid" id="marketingKPIs" style="margin-bottom: 24px;"></div>

<!-- Tabs for Different Marketing Sections -->
<div style="display: flex; gap: 12px; margin-bottom: 24px; border-bottom: 2px solid var(--glass-border); padding-bottom: 12px; flex-wrap: wrap;">
<button class="marketing-tab active" data-tab="campaigns" style="padding: 10px 20px; background: none; border: none; color: var(--text-secondary); font-weight: 600; cursor: pointer; border-bottom: 3px solid transparent; transition: all 0.3s;">Campaigns</button>
<button class="marketing-tab" data-tab="channels" style="padding: 10px 20px; background: none; border: none; color: var(--text-secondary); font-weight: 600; cursor: pointer; border-bottom: 3px solid transparent; transition: all 0.3s;">Channels</button>
<button class="marketing-tab" data-tab="budget" style="padding: 10px 20px; background: none; border: none; color: var(--text-secondary); font-weight: 600; cursor: pointer; border-bottom: 3px solid transparent; transition: all 0.3s;">Budget</button>
<button class="marketing-tab" data-tab="analytics" style="padding: 10px 20px; background: none; border: none; color: var(--text-secondary); font-weight: 600; cursor: pointer; border-bottom: 3px solid transparent; transition: all 0.3s;">Analytics</button>
<button class="marketing-tab" data-tab="leads" style="padding: 10px 20px; background: none; border: none; color: var(--text-secondary); font-weight: 600; cursor: pointer; border-bottom: 3px solid transparent; transition: all 0.3s;">Lead Gen</button>
</div>

<!-- Campaigns Tab -->
<div class="marketing-tab-content active" data-tab-content="campaigns">
<div id="campaignsGrid"></div>
</div>

<!-- Channels Tab -->
<div class="marketing-tab-content" data-tab-content="channels" style="display: none;">
<div class="kpi-grid" id="channelMetrics" style="margin-bottom: 24px;"></div>
<div id="channelsList"></div>
</div>

<!-- Budget Tab -->
<div class="marketing-tab-content" data-tab-content="budget" style="display: none;">
<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
<div style="background: rgba(255,255,255,0.03); padding: 24px; border-radius: 12px; border: 1px solid var(--glass-border);">
<h3 style="font-size: 16px; margin-bottom: 16px; color: var(--accent-primary);">Monthly Budget</h3>
<div id="budgetOverview"></div>
</div>
<div style="background: rgba(255,255,255,0.03); padding: 24px; border-radius: 12px; border: 1px solid var(--glass-border);">
<h3 style="font-size: 16px; margin-bottom: 16px; color: var(--accent-tertiary);">ROI Summary</h3>
<div id="roiSummary"></div>
</div>
</div>
<div id="budgetAllocation"></div>
</div>

<!-- Analytics Tab -->
<div class="marketing-tab-content" data-tab-content="analytics" style="display: none;">
<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
<div style="background: rgba(255,255,255,0.03); padding: 24px; border-radius: 12px; border: 1px solid var(--glass-border);">
<h3 style="font-size: 16px; margin-bottom: 16px;">📈 Performance Trends</h3>
<canvas id="performanceChart" style="max-height: 300px;"></canvas>
</div>
<div style="background: rgba(255,255,255,0.03); padding: 24px; border-radius: 12px; border: 1px solid var(--glass-border);">
<h3 style="font-size: 16px; margin-bottom: 16px;">🎯 Conversion Funnel</h3>
<canvas id="funnelChart" style="max-height: 300px;"></canvas>
</div>
</div>
<div style="margin-top: 24px; background: rgba(255,255,255,0.03); padding: 24px; border-radius: 12px; border: 1px solid var(--glass-border);">
<h3 style="font-size: 16px; margin-bottom: 16px;">📊 Channel Comparison</h3>
<canvas id="channelComparisonChart" style="max-height: 300px;"></canvas>
</div>
</div>

<!-- Lead Generation Tab -->
<div class="marketing-tab-content" data-tab-content="leads" style="display: none;">
<div class="btn-group" style="margin-bottom: 24px;">
<button class="btn" id="newLeadBtn">➕ New Lead</button>
<button class="ghost" id="exportLeadsBtn">📥 Export Leads</button>
</div>
<div id="leadsGrid"></div>
</div>
</div>
</div>

<!-- Notes Section -->
<div class="section-content" data-section="notes">
<div class="panel">
<div class="panel-header">
<h2>📝 Notes</h2>
<div class="btn-group">
<button class="btn" id="newNoteBtn">➕ New Note</button>
<button class="ghost" id="refreshNotes">🔄 Refresh</button>
<button class="ghost" id="exportNotesBtn">📄 Export .docx</button>
<input type="text" id="noteSearch" placeholder="Search notes..." style="padding: 8px 16px; width: 200px;">
</div>
</div>
<div id="notesGrid"></div>
</div>
</div>

<!-- Reports Section -->
<div class="section-content" data-section="reports">
<div class="panel">
<div class="panel-header">
<h2>📄 Reports & Analytics <span style="font-size: 14px; color: var(--text-secondary); font-weight: 500; margin-left: 12px;">(35+ Report Templates)</span></h2>
<div class="btn-group">
<button class="btn" id="generateReportBtn">➕ Generate Report</button>
<button class="ghost" id="refreshReports">🔄 Refresh</button>
</div>
</div>

<!-- Report Categories Overview -->
<div style="background: linear-gradient(135deg, rgba(110,231,183,0.05), rgba(124,92,255,0.05)); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid rgba(110,231,183,0.2);">
<h3 style="font-size: 15px; font-weight: 700; margin-bottom: 12px; color: var(--accent-primary);">📊 Available Report Categories</h3>
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 12px;">
<div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 8px; border-left: 3px solid #6ee7b7;">
<div style="font-size: 18px; font-weight: 700; color: #6ee7b7; margin-bottom: 4px;">8</div>
<div style="font-size: 11px; color: var(--text-secondary);">Financial Reports</div>
</div>
<div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 8px; border-left: 3px solid #60a5fa;">
<div style="font-size: 18px; font-weight: 700; color: #60a5fa; margin-bottom: 4px;">7</div>
<div style="font-size: 11px; color: var(--text-secondary);">Customer & Sales</div>
</div>
<div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 8px; border-left: 3px solid #ffb86b;">
<div style="font-size: 18px; font-weight: 700; color: #ffb86b; margin-bottom: 4px;">6</div>
<div style="font-size: 11px; color: var(--text-secondary);">Operational Reports</div>
</div>
<div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 8px; border-left: 3px solid #7c5cff;">
<div style="font-size: 18px; font-weight: 700; color: #7c5cff; margin-bottom: 4px;">7</div>
<div style="font-size: 11px; color: var(--text-secondary);">Executive & Strategic</div>
</div>
<div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 8px; border-left: 3px solid #f59e0b;">
<div style="font-size: 18px; font-weight: 700; color: #f59e0b; margin-bottom: 4px;">3</div>
<div style="font-size: 11px; color: var(--text-secondary);">Marketing & Analytics</div>
</div>
<div style="background: rgba(255,255,255,0.03); padding: 12px; border-radius: 8px; border-left: 3px solid #8b5cf6;">
<div style="font-size: 18px; font-weight: 700; color: #8b5cf6; margin-bottom: 4px;">3</div>
<div style="font-size: 11px; color: var(--text-secondary);">Compliance & Audit</div>
</div>
</div>
</div>

<div id="reportsContent"></div>
</div>
</div>

<!-- Operations Alerts Section -->
<div class="section-content" data-section="alerts">
<div class="panel">
<div class="panel-header">
<h2>🚨 Operations Alerts <span style="font-size: 14px; color: var(--text-secondary); font-weight: 500; margin-left: 12px;">(24 Total Alert Configurations)</span></h2>
<div class="btn-group">
<button class="btn" onclick="enableAllAlerts()">✅ Enable All</button>
<button class="ghost" onclick="disableAllAlerts()">❌ Disable All</button>
<button class="ghost" onclick="resetAlerts()">🔄 Reset</button>
<button class="ghost danger" onclick="deleteSelectedAlerts()">🗑️ Delete Selected</button>
</div>
</div>

<!-- Alert System Overview -->
<div style="background: linear-gradient(135deg, rgba(110,231,183,0.05), rgba(124,92,255,0.05)); padding: 24px; border-radius: 16px; margin-bottom: 24px; border: 1px solid rgba(110,231,183,0.2);">
<h3 style="margin-bottom: 16px; display: flex; align-items: center; gap: 8px; color: var(--accent-primary);">
📋 Alert Configuration System
</h3>
<p style="font-size: 13px; color: var(--text-secondary); line-height: 1.7; margin-bottom: 16px;">
This comprehensive alert system monitors your business operations in real-time across four key categories: Financial Health, Customer Behavior, Operational Performance, and Business Growth. Each alert can be individually enabled/disabled and configured with custom thresholds and parameters.
</p>
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px; margin-top: 16px;">
<div style="background: rgba(110,231,183,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid #6ee7b7;">
<div style="font-size: 11px; color: var(--text-muted); text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 4px;">Financial Alerts</div>
<div style="font-size: 20px; font-weight: 700; color: #6ee7b7;">10 Types</div>
<div style="font-size: 11px; color: var(--text-secondary); margin-top: 4px;">Cash flow, expenses, revenue</div>
</div>
<div style="background: rgba(96,165,250,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid #60a5fa;">
<div style="font-size: 11px; color: var(--text-muted); text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 4px;">Customer Alerts</div>
<div style="font-size: 20px; font-weight: 700; color: #60a5fa;">8 Types</div>
<div style="font-size: 11px; color: var(--text-secondary); margin-top: 4px;">Churn, CAC, LTV, conversion</div>
</div>
<div style="background: rgba(255,184,107,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid #ffb86b;">
<div style="font-size: 11px; color: var(--text-muted); text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 4px;">Operational Alerts</div>
<div style="font-size: 20px; font-weight: 700; color: #ffb86b;">4 Types</div>
<div style="font-size: 11px; color: var(--text-secondary); margin-top: 4px;">Integrations, data quality</div>
</div>
<div style="background: rgba(124,92,255,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid #7c5cff;">
<div style="font-size: 11px; color: var(--text-muted); text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 4px;">Performance Alerts</div>
<div style="font-size: 20px; font-weight: 700; color: #7c5cff;">2 Types</div>
<div style="font-size: 11px; color: var(--text-secondary); margin-top: 4px;">MRR growth, products</div>
</div>
</div>
</div>

<!-- Alert Statistics -->
<div id="alertStatistics"></div>

<!-- Severity Level Legend -->
<div style="background: rgba(255,255,255,0.02); padding: 20px; border-radius: 12px; margin-bottom: 24px; border: 1px solid var(--glass-border);">
<h3 style="margin-bottom: 16px; display: flex; align-items: center; gap: 8px; font-size: 15px;">
⚠️ Severity Levels & Response Guidelines
</h3>
<div style="display: grid; gap: 12px;">
<div style="display: flex; align-items: center; gap: 16px; padding: 12px; background: rgba(255,107,107,0.1); border-radius: 8px; border-left: 3px solid #ff6b6b;">
<span style="font-size: 24px;">🔴</span>
<div style="flex: 1;">
<div style="font-weight: 700; color: #ff6b6b; margin-bottom: 4px;">CRITICAL - Immediate Action Required</div>
<div style="font-size: 12px; color: var(--text-secondary);">Business-threatening issues requiring immediate executive attention (runway, cash flow, division losses)</div>
</div>
</div>
<div style="display: flex; align-items: center; gap: 16px; padding: 12px; background: rgba(255,184,107,0.1); border-radius: 8px; border-left: 3px solid #ffb86b;">
<span style="font-size: 24px;">🟠</span>
<div style="flex: 1;">
<div style="font-weight: 700; color: #ffb86b; margin-bottom: 4px;">HIGH - Action Within 24 Hours</div>
<div style="font-size: 12px; color: var(--text-secondary);">Significant issues impacting revenue or operations (expense spikes, revenue drops, high churn)</div>
</div>
</div>
<div style="display: flex; align-items: center; gap: 16px; padding: 12px; background: rgba(96,165,250,0.1); border-radius: 8px; border-left: 3px solid #60a5fa;">
<span style="font-size: 24px;">🟡</span>
<div style="flex: 1;">
<div style="font-weight: 700; color: #60a5fa; margin-bottom: 4px;">MEDIUM - Review Within 1 Week</div>
<div style="font-size: 12px; color: var(--text-secondary);">Important trends requiring monitoring and planning (CAC increases, transaction drops)</div>
</div>
</div>
<div style="display: flex; align-items: center; gap: 16px; padding: 12px; background: rgba(110,231,183,0.1); border-radius: 8px; border-left: 3px solid #6ee7b7;">
<span style="font-size: 24px;">🟢</span>
<div style="flex: 1;">
<div style="font-weight: 700; color: #6ee7b7; margin-bottom: 4px;">LOW - Monitor & Document</div>
<div style="font-size: 12px; color: var(--text-secondary);">Informational alerts for tracking and optimization opportunities (MRR growth, engagement)</div>
</div>
</div>
</div>
</div>

<!-- Alert Configurations List -->
<div style="margin-top: 24px;">
<div style="background: linear-gradient(135deg, rgba(110,231,183,0.1), rgba(110,231,183,0.05)); padding: 20px; border-radius: 12px; margin-bottom: 16px; border-left: 4px solid #6ee7b7;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 8px; color: var(--accent-primary); display: flex; align-items: center; gap: 8px;">
💰 Financial Alerts (10)
<span style="font-size: 11px; font-weight: 500; color: var(--text-muted); background: rgba(255,255,255,0.05); padding: 4px 10px; border-radius: 6px;">Toggle Each Alert On/Off</span>
</h3>
<p style="font-size: 12px; color: var(--text-secondary); margin-bottom: 12px;">Monitor cash flow, expenses, revenue, margins, and financial health metrics</p>
</div>
<div id="financialAlertsList"></div>
</div>

<div style="margin-top: 32px;">
<div style="background: linear-gradient(135deg, rgba(96,165,250,0.1), rgba(96,165,250,0.05)); padding: 20px; border-radius: 12px; margin-bottom: 16px; border-left: 4px solid #60a5fa;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 8px; color: var(--accent-tertiary); display: flex; align-items: center; gap: 8px;">
👥 Customer Alerts (8)
<span style="font-size: 11px; font-weight: 500; color: var(--text-muted); background: rgba(255,255,255,0.05); padding: 4px 10px; border-radius: 6px;">Toggle Each Alert On/Off</span>
</h3>
<p style="font-size: 12px; color: var(--text-secondary); margin-bottom: 12px;">Track churn, acquisition costs, lifetime value, conversion rates, and customer behavior</p>
</div>
<div id="customerAlertsList"></div>
</div>

<div style="margin-top: 32px;">
<div style="background: linear-gradient(135deg, rgba(255,184,107,0.1), rgba(255,184,107,0.05)); padding: 20px; border-radius: 12px; margin-bottom: 16px; border-left: 4px solid #ffb86b;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 8px; color: var(--warning); display: flex; align-items: center; gap: 8px;">
⚡ Operational Alerts (4)
<span style="font-size: 11px; font-weight: 500; color: var(--text-muted); background: rgba(255,255,255,0.05); padding: 4px 10px; border-radius: 6px;">Toggle Each Alert On/Off</span>
</h3>
<p style="font-size: 12px; color: var(--text-secondary); margin-bottom: 12px;">Monitor transaction volumes, integrations, data quality, and operational efficiency</p>
</div>
<div id="operationalAlertsList"></div>
</div>

<div style="margin-top: 32px;">
<div style="background: linear-gradient(135deg, rgba(124,92,255,0.1), rgba(124,92,255,0.05)); padding: 20px; border-radius: 12px; margin-bottom: 16px; border-left: 4px solid #7c5cff;">
<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 8px; color: var(--accent-secondary); display: flex; align-items: center; gap: 8px;">
📈 Performance Alerts (2)
<span style="font-size: 11px; font-weight: 500; color: var(--text-muted); background: rgba(255,255,255,0.05); padding: 4px 10px; border-radius: 6px;">Toggle Each Alert On/Off</span>
</h3>
<p style="font-size: 12px; color: var(--text-secondary); margin-bottom: 12px;">Track MRR growth momentum and individual product performance metrics</p>
</div>
<div id="performanceAlertsList"></div>
</div>

<!-- Alert Management Guide -->
<div style="margin-top: 32px; background: linear-gradient(135deg, rgba(20,27,46,0.95) 0%, rgba(10,14,26,0.9) 100%); border: 1px solid rgba(124,92,255,0.3); border-radius: 16px; padding: 28px;">
<h3 style="margin-bottom: 20px; display: flex; align-items: center; gap: 8px; color: var(--accent-secondary); font-size: 18px;">
📚 Alert System Guide
</h3>

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 16px; margin-bottom: 24px;">
<div style="background: rgba(255,255,255,0.02); padding: 18px; border-radius: 10px; border-left: 3px solid #ff6b6b;">
<div style="font-size: 20px; margin-bottom: 8px;">🔴</div>
<div style="font-weight: 700; color: #ff6b6b; margin-bottom: 6px; font-size: 13px;">CRITICAL Alerts</div>
<div style="font-size: 11px; color: var(--text-secondary); line-height: 1.6;">Immediate action required. Business-threatening issues like runway depletion, negative cash flow, or division losses.</div>
</div>
<div style="background: rgba(255,255,255,0.02); padding: 18px; border-radius: 10px; border-left: 3px solid #ffb86b;">
<div style="font-size: 20px; margin-bottom: 8px;">🟠</div>
<div style="font-weight: 700; color: #ffb86b; margin-bottom: 6px; font-size: 13px;">HIGH Priority Alerts</div>
<div style="font-size: 11px; color: var(--text-secondary); line-height: 1.6;">Action within 24 hours. Significant issues impacting revenue, expenses, or customer metrics.</div>
</div>
<div style="background: rgba(255,255,255,0.02); padding: 18px; border-radius: 10px; border-left: 3px solid #60a5fa;">
<div style="font-size: 20px; margin-bottom: 8px;">🟡</div>
<div style="font-weight: 700; color: #60a5fa; margin-bottom: 6px; font-size: 13px;">MEDIUM Priority Alerts</div>
<div style="font-size: 11px; color: var(--text-secondary); line-height: 1.6;">Review within 1 week. Important trends requiring monitoring and strategic planning.</div>
</div>
<div style="background: rgba(255,255,255,0.02); padding: 18px; border-radius: 10px; border-left: 3px solid #6ee7b7;">
<div style="font-size: 20px; margin-bottom: 8px;">🟢</div>
<div style="font-weight: 700; color: #6ee7b7; margin-bottom: 6px; font-size: 13px;">LOW Priority Alerts</div>
<div style="font-size: 11px; color: var(--text-secondary); line-height: 1.6;">Monitor and document. Informational alerts for tracking optimization opportunities.</div>
</div>
</div>

<div style="background: rgba(110,231,183,0.05); padding: 18px; border-radius: 10px; border: 1px solid rgba(110,231,183,0.2);">
<h4 style="color: var(--accent-primary); font-size: 14px; margin-bottom: 12px; display: flex; align-items: center; gap: 8px;">
💡 How to Use Alert Toggles
</h4>
<div style="font-size: 12px; color: var(--text-secondary); line-height: 1.8;">
<strong style="color: var(--text-primary);">Individual Toggle:</strong> Click the switch on any alert card to enable/disable that specific alert.<br>
<strong style="color: var(--text-primary);">Bulk Actions:</strong> Use the "Enable All" or "Disable All" buttons at the top to control all alerts at once.<br>
<strong style="color: var(--text-primary);">Delete Selected:</strong> Check the boxes next to alerts and use "Delete Selected" to remove unwanted configurations.<br>
<strong style="color: var(--text-primary);">Status Badges:</strong> Each alert shows ENABLED/DISABLED status and severity level (Critical/High/Medium/Low).
</div>
</div>

<div style="margin-top: 18px; padding: 16px; background: rgba(124,92,255,0.05); border-radius: 10px; border: 1px solid rgba(124,92,255,0.2);">
<h4 style="color: var(--accent-secondary); font-size: 13px; margin-bottom: 10px;">⚙️ Alert Configuration Details</h4>
<div style="font-size: 11px; color: var(--text-secondary); line-height: 1.7;">
All 24 alerts above are fully configured and ready to use. Each alert description shows the specific trigger conditions and thresholds. These parameters are optimized for typical SaaS businesses but can be customized based on your specific needs. The system continuously monitors your data and will automatically trigger alerts when conditions are met.
</div>
</div>
</div>
</div>
</div>
</div>

</main>


</div>

<div class="modal-overlay" id="modalOverlay">
<div class="modal-content" id="modalContent"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
console.log('✅ Script loaded - Starting initialization...');

const $ = sel => document.querySelector(sel);
const $$ = sel => document.querySelectorAll(sel);
const uid = () => Date.now().toString(36) + Math.random().toString(36).substr(2);
const money = v => new Intl.NumberFormat('en-US', {style:'currency', currency:'USD'}).format(v);

document.addEventListener('DOMContentLoaded', function() {
console.log('✅ DOM Content Loaded - Initializing dashboard...');

function updateDateTime() {
const now = new Date();
const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
const dateStr = now.toLocaleDateString('en-US', dateOptions);
let hours = now.getHours();
const minutes = now.getMinutes();
const seconds = now.getSeconds();
const ampm = hours >= 12 ? 'PM' : 'AM';
hours = hours % 12;
hours = hours ? hours : 12;
const timeStr = hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0') + ' ' + ampm;

const dateEl = $('#currentDate');
const timeEl = $('#currentTime');
if (dateEl) dateEl.textContent = dateStr;
if (timeEl) timeEl.textContent = timeStr;
}

function updateGreeting() {
const hour = new Date().getHours();
let greeting;
if (hour < 12) {
greeting = '🌅 Good Morning, Brenton';
} else if (hour < 18) {
greeting = '☀️ Good Afternoon, Brenton';
} else {
greeting = '🌙 Good Evening, Brenton';
}
const greetEl = $('#greetingMessage');
if (greetEl) greetEl.textContent = greeting;
}

const state = {
currentSection: 'dashboard',
products: [
{id:'p1', name:'Virely SaaS Pro', price:299, color:'#6ee7b7'},
{id:'p2', name:'Virely Analytics', price:199, color:'#7c5cff'},
{id:'p3', name:'Virely API Suite', price:499, color:'#60a5fa'},
{id:'p4', name:'Virely Enterprise', price:999, color:'#f59e0b'}
],
transactions: [],
selectedTransactions: [],
contacts: [],
activities: [],
insights: [],
reports: [],
tasks: [],
roadmapItems: [],
divisions: {
'referrals': { name: 'Referral Marketing', revenue: 0, expenses: 0, mrr: 0, arr: 0, metric: 'referrals', count: 0 },
'appointments': { name: 'Appointments', revenue: 0, expenses: 0, mrr: 0, arr: 0, metric: 'appointments', count: 0 },
'reservations': { name: 'Reservations', revenue: 0, expenses: 0, mrr: 0, arr: 0, metric: 'reservations', count: 0 }
},
chartType: 'line',
expenseChartType: 'bar',
alerts: [
{id:'a1', name:'Low Runway Alert', rule:{type:'runway', months:3, threshold:0}, enabled:true},
{id:'a2', name:'Expense Spike Alert', rule:{type:'expense_spike', days:7, percent:50}, enabled:true},
{id:'a3', name:'High Churn Rate Alert', rule:{type:'churn_rate', threshold:5}, enabled:true},
{id:'a4', name:'Low Profit Margin Alert', rule:{type:'profit_margin', threshold:15}, enabled:true},
{id:'a5', name:'Revenue Drop Alert', rule:{type:'revenue_drop', days:30, percent:20}, enabled:true},
{id:'a6', name:'High CAC Alert', rule:{type:'high_cac', threshold:500}, enabled:true},
{id:'a7', name:'Low LTV:CAC Ratio Alert', rule:{type:'ltv_cac_ratio', threshold:3}, enabled:true},
{id:'a8', name:'MRR Growth Stagnation', rule:{type:'mrr_growth', days:90, threshold:2}, enabled:false},
{id:'a9', name:'Transaction Volume Drop', rule:{type:'transaction_volume', days:7, percent:30}, enabled:true},
{id:'a10', name:'Negative Cash Flow Alert', rule:{type:'cash_flow', days:30}, enabled:true},
{id:'a11', name:'Product Underperformance', rule:{type:'product_performance', threshold:1000}, enabled:false},
{id:'a12', name:'Division Loss Alert', rule:{type:'division_loss'}, enabled:true},
{id:'a13', name:'Budget Overrun Alert', rule:{type:'budget_overrun', percent:10}, enabled:true},
{id:'a14', name:'Late Payment Warning', rule:{type:'late_payment', days:30}, enabled:true},
{id:'a15', name:'Contact Engagement Drop', rule:{type:'contact_engagement', days:60}, enabled:false},
{id:'a16', name:'Conversion Rate Drop', rule:{type:'conversion_rate', threshold:2, percent:25}, enabled:true},
{id:'a17', name:'Average Order Value Change', rule:{type:'aov_change', percent:20, direction:'decrease'}, enabled:false},
{id:'a18', name:'Customer Lifetime Value Drop', rule:{type:'clv_drop', threshold:1000, percent:30}, enabled:false},
{id:'a19', name:'Integration Sync Failure', rule:{type:'integration_failure', service:'any'}, enabled:true},
{id:'a20', name:'Data Quality Alert', rule:{type:'data_quality', missing_percent:15}, enabled:true},
{id:'a21', name:'High Refund Rate', rule:{type:'refund_rate', threshold:5, days:30}, enabled:true},
{id:'a22', name:'New Customer Acquisition Slowdown', rule:{type:'new_customers', percent:30, days:30}, enabled:false},
{id:'a23', name:'Outstanding Invoices Alert', rule:{type:'outstanding_invoices', count:10, age_days:45}, enabled:true},
{id:'a24', name:'Gross Margin Compression', rule:{type:'gross_margin', threshold:35}, enabled:true}
],
scheduledReports: [
{id:'r1', name:'Monthly Financial Summary', schedule:'1st of month', enabled:true},
{id:'r2', name:'Weekly Performance Report', schedule:'Monday 9 AM', enabled:true}
],
integrations: [
{id:'i1', name:'Stripe', icon:'💳', connected:true},
{id:'i2', name:'QuickBooks', icon:'📒', connected:true},
{id:'i3', name:'Salesforce', icon:'☁️', connected:false},
{id:'i4', name:'HubSpot', icon:'🔶', connected:false},
{id:'i5', name:'Slack', icon:'💬', connected:true},
{id:'i6', name:'Google Analytics', icon:'📊', connected:true},
{id:'i7', name:'Google Calendar', icon:'📅', connected:true},
{id:'i8', name:'Google Drive', icon:'📁', connected:true}
],
notes: [],
team: [],
vendors: [],
recurringInvoices: [],
campaigns: [],
marketingChannels: [],
leads: [],
marketingBudget: { monthly: 10000, allocated: 0 }
};

function save() {
try {
localStorage.setItem('virelyOpsState', JSON.stringify(state));
console.log('✅ State saved');
} catch(e) {
console.error('❌ Error saving:', e);
}
}

function load() {
try {
const saved = localStorage.getItem('virelyOpsState');
if(saved) {
const parsed = JSON.parse(saved);
Object.assign(state, parsed);
console.log('✅ State loaded');
}
} catch(e) {
console.error('❌ Error loading:', e);
}
}

function generateDemoData() {
console.log('Generating demo data...');
const divisionOptions = ['referrals', 'appointments', 'reservations'];
const names = ['Acme Corp', 'Tech Ventures', 'Global Solutions', 'Innovation Labs', 'Digital Dynamics', 'Future Systems'];
const paymentSources = ['mercury', 'capital-one-personal', 'capital-one-business', 'paypal', 'bank-of-america'];
const now = new Date();
  
for(let i = 0; i < 50; i++) {
const monthsAgo = Math.floor(Math.random() * 6);
const date = new Date(now);
date.setMonth(date.getMonth() - monthsAgo);
const isRevenue = Math.random() > 0.3;
const paymentSource = paymentSources[Math.floor(Math.random() * paymentSources.length)];
const amount = isRevenue ? Math.floor(Math.random() * 5000) + 1000 : Math.floor(Math.random() * 2000) + 500;
  
state.transactions.push({
id: uid(),
type: isRevenue ? 'revenue' : 'expense',
amount: amount,
description: isRevenue ? 'Product sale' : 'Operating expense',
product: divisionOptions[Math.floor(Math.random() * divisionOptions.length)],
when: date.toISOString().slice(0, 10),
customer: names[Math.floor(Math.random() * names.length)],
division: paymentSource
});

// Update division stats (payment sources)
if(isRevenue) {
state.divisions[paymentSource].revenue += amount;
} else {
state.divisions[paymentSource].expenses += amount;
}
}

for(let i = 0; i < 12; i++) {
const name = names[i % names.length] + ' Contact #' + (i + 1);
const contactDivision = divisionOptions[Math.floor(Math.random() * divisionOptions.length)];
state.contacts.push({
id: uid(),
name: name,
company: names[i % names.length],
email: 'contact' + i + '@example.com',
phone: '(555) ' + Math.floor(Math.random() * 900 + 100) + '-' + Math.floor(Math.random() * 9000 + 1000),
product: divisionOptions[Math.floor(Math.random() * divisionOptions.length)],
division: contactDivision,
lastActivity: new Date(now.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10),
notes: 'Initial contact notes'
});
}

const actions = ['New transaction created', 'Contact updated', 'Report generated', 'Integration connected', 'Product modified'];
for(let i = 0; i < 8; i++) {
const minsAgo = Math.floor(Math.random() * 1440);
const date = new Date(now.getTime() - minsAgo * 60 * 1000);
state.activities.push({
id: uid(),
action: actions[Math.floor(Math.random() * actions.length)],
when: date.toISOString(),
details: 'Activity details'
});
}

// Generate demo tasks
const taskTitles = ['Implement new API endpoints', 'Design dashboard mockups', 'Review Q4 financials', 'Update documentation', 'Fix payment gateway bug'];
const priorities = ['high', 'medium', 'low'];
for(let i = 0; i < 5; i++) {
state.tasks.push({
id: uid(),
title: taskTitles[i],
priority: priorities[Math.floor(Math.random() * priorities.length)],
assignee: 'Team Member ' + (i + 1),
dueDate: new Date(now.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10),
completed: Math.random() > 0.7
});
}

// Generate demo roadmap items
const roadmapTitles = ['Mobile App Launch', 'AI Integration', 'Enterprise Features', 'API v2.0'];
const statuses = ['planning', 'in-progress', 'completed'];
const quarters = ['Q1 2025', 'Q2 2025', 'Q3 2025', 'Q4 2025'];
for(let i = 0; i < 4; i++) {
state.roadmapItems.push({
id: uid(),
title: roadmapTitles[i],
description: 'Strategic initiative to enhance platform capabilities and user experience',
status: statuses[Math.floor(Math.random() * statuses.length)],
quarter: quarters[i],
owner: 'Product Team'
});
}

// Generate demo notes
const noteTitles = [
{title: 'Product Launch Ideas', content: 'Consider launching beta program\nGather user feedback early\nPlan marketing campaign', category: 'idea'},
{title: 'Important: Q4 Budget Review', content: 'Review Q4 expenses\nIdentify cost savings opportunities\nPrepare presentation for board meeting', category: 'important'},
{title: 'Meeting Notes - Client Discussion', content: 'Discussed new feature requirements\nClient wants mobile app by Q2\nNeed to schedule follow-up meeting next week', category: 'general'},
{title: 'To-Do: Update Documentation', content: 'API documentation needs updating\nAdd new endpoint examples\nUpdate SDK guides', category: 'todo'},
{title: 'Customer Feedback Summary', content: 'Users love the new dashboard\nRequesting dark mode option\nSome performance issues reported on mobile', category: 'general'}
];

noteTitles.forEach((note, i) => {
const daysAgo = Math.floor(Math.random() * 30);
const date = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
state.notes.push({
id: uid(),
title: note.title,
content: note.content,
category: note.category,
created: date.toISOString(),
updated: date.toISOString()
});
});

save();
console.log('✅ Demo data generated');
}

function showToast(message, isError = false, duration = 3000) {
const existing = $('.toast');
if(existing) existing.remove();

const toast = document.createElement('div');
toast.className = 'toast' + (isError ? ' toast-error' : '');
toast.textContent = message;
document.body.appendChild(toast);

setTimeout(() => {
if(toast && toast.parentNode) toast.remove();
}, duration);
}

function openModal(html) {
const overlay = $('#modalOverlay');
const content = $('#modalContent');
if(overlay && content) {
content.innerHTML = html;
overlay.classList.add('active');
}
}

function closeModal() {
const overlay = $('#modalOverlay');
if(overlay) overlay.classList.remove('active');
}

// ============================================
// GLOBAL SEARCH
// ============================================
function setupGlobalSearch() {
const searchInput = $('#globalSearch');
if(!searchInput) return;

let searchTimeout;
searchInput.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase().trim();

// Clear previous timeout
clearTimeout(searchTimeout);

if(!query) {
closeSearchResults();
return;
}

// Debounce search
searchTimeout = setTimeout(() => {
performGlobalSearch(query);
}, 300);
});

// Close search results when clicking outside
document.addEventListener('click', (e) => {
const searchBox = $('.search-box');
const searchResultsModal = $('#searchResultsModal');
if (searchResultsModal && !searchBox.contains(e.target) && !searchResultsModal.contains(e.target)) {
closeSearchResults();
}
});

// Allow Enter key to search
searchInput.addEventListener('keypress', (e) => {
if (e.key === 'Enter') {
const query = e.target.value.toLowerCase().trim();
if (query) performGlobalSearch(query);
}
});
}

function performGlobalSearch(query) {
// Search across all data types
const results = {
transactions: state.transactions.filter(t => 
t.description.toLowerCase().includes(query) || 
t.customer.toLowerCase().includes(query) ||
t.type.toLowerCase().includes(query) ||
money(t.amount).toLowerCase().includes(query)
).slice(0, 10),
contacts: state.contacts.filter(c => 
c.name.toLowerCase().includes(query) || 
c.company.toLowerCase().includes(query) || 
c.email.toLowerCase().includes(query) ||
(c.phone && c.phone.toLowerCase().includes(query))
).slice(0, 10),
products: state.products.filter(p => 
p.name.toLowerCase().includes(query)
).slice(0, 10),
notes: (state.notes || []).filter(n =>
n.title.toLowerCase().includes(query) ||
n.content.toLowerCase().includes(query)
).slice(0, 10),
tasks: (state.tasks || []).filter(t =>
t.title.toLowerCase().includes(query) ||
(t.assignee && t.assignee.toLowerCase().includes(query))
).slice(0, 10),
roadmap: (state.roadmapItems || []).filter(r =>
r.title.toLowerCase().includes(query) ||
r.description.toLowerCase().includes(query)
).slice(0, 10)
};

const total = results.transactions.length + results.contacts.length + 
results.products.length + results.notes.length + 
results.tasks.length + results.roadmap.length;

if (total === 0) {
showSearchResults([], query, 0);
} else {
showSearchResults(results, query, total);
}
}

function showSearchResults(results, query, total) {
const resultsHTML = buildSearchResultsHTML(results, query, total);
const existingModal = $('#searchResultsModal');

if (existingModal) {
existingModal.remove();
}

const modalDiv = document.createElement('div');
modalDiv.id = 'searchResultsModal';
modalDiv.className = 'search-results-modal';
modalDiv.innerHTML = resultsHTML;
document.body.appendChild(modalDiv);

// Add click handlers to results
setTimeout(() => {
$$('.search-result-item').forEach(item => {
item.addEventListener('click', () => {
const section = item.dataset.section;
const itemId = item.dataset.id;
navigateToSearchResult(section, itemId);
closeSearchResults();
});
});

const closeBtn = $('#closeSearchResults');
if (closeBtn) {
closeBtn.addEventListener('click', closeSearchResults);
}
}, 50);
}

function buildSearchResultsHTML(results, query, total) {
if (total === 0) {
return '<div class="search-results-content">' +
'<div class="search-results-header">' +
'<h3>🔍 Search Results</h3>' +
'<button class="ghost" id="closeSearchResults" style="padding: 8px 16px;">✕</button>' +
'</div>' +
'<p class="search-query">No results found for "<strong>' + query + '</strong>"</p>' +
'<div style="text-align: center; padding: 40px; color: var(--text-muted);">' +
'<div style="font-size: 48px; margin-bottom: 16px;">🔍</div>' +
'<p>Try different keywords or check your spelling</p>' +
'</div></div>';
}

let html = '<div class="search-results-content">' +
'<div class="search-results-header">' +
'<h3>🔍 Search Results</h3>' +
'<button class="ghost" id="closeSearchResults" style="padding: 8px 16px;">✕</button>' +
'</div>' +
'<p class="search-query">Found <strong>' + total + '</strong> results for "<strong>' + query + '</strong>"</p>' +
'<div class="search-results-list">';

// Transactions
if (results.transactions && results.transactions.length > 0) {
html += '<div class="search-category">' +
'<h4>💰 Transactions (' + results.transactions.length + ')</h4>';
results.transactions.forEach(t => {
html += '<div class="search-result-item" data-section="transactions" data-id="' + t.id + '">' +
'<div class="result-icon" style="background: ' + (t.type === 'revenue' ? 'rgba(110,231,183,0.2)' : 'rgba(255,107,107,0.2)') + ';">💰</div>' +
'<div class="result-content">' +
'<div class="result-title">' + t.description + '</div>' +
'<div class="result-meta">' + money(t.amount) + ' • ' + t.type + ' • ' + t.when + '</div>' +
'</div>' +
'<div class="result-arrow">→</div>' +
'</div>';
});
html += '</div>';
}

// Contacts
if (results.contacts && results.contacts.length > 0) {
html += '<div class="search-category">' +
'<h4>👥 Contacts (' + results.contacts.length + ')</h4>';
results.contacts.forEach(c => {
html += '<div class="search-result-item" data-section="contacts" data-id="' + c.id + '">' +
'<div class="result-icon" style="background: rgba(96,165,250,0.2);">👤</div>' +
'<div class="result-content">' +
'<div class="result-title">' + c.name + '</div>' +
'<div class="result-meta">' + c.company + ' • ' + c.email + '</div>' +
'</div>' +
'<div class="result-arrow">→</div>' +
'</div>';
});
html += '</div>';
}

// Products
if (results.products && results.products.length > 0) {
html += '<div class="search-category">' +
'<h4>📦 Products (' + results.products.length + ')</h4>';
results.products.forEach(p => {
html += '<div class="search-result-item" data-section="products" data-id="' + p.id + '">' +
'<div class="result-icon" style="background: rgba(124,92,255,0.2);">📦</div>' +
'<div class="result-content">' +
'<div class="result-title">' + p.name + '</div>' +
'<div class="result-meta">' + money(p.price) + '/mo</div>' +
'</div>' +
'<div class="result-arrow">→</div>' +
'</div>';
});
html += '</div>';
}

// Notes
if (results.notes && results.notes.length > 0) {
html += '<div class="search-category">' +
'<h4>📝 Notes (' + results.notes.length + ')</h4>';
results.notes.forEach(n => {
html += '<div class="search-result-item" data-section="notes" data-id="' + n.id + '">' +
'<div class="result-icon" style="background: rgba(255,180,107,0.2);">📝</div>' +
'<div class="result-content">' +
'<div class="result-title">' + n.title + '</div>' +
'<div class="result-meta">' + n.category + ' • ' + new Date(n.updated).toLocaleDateString() + '</div>' +
'</div>' +
'<div class="result-arrow">→</div>' +
'</div>';
});
html += '</div>';
}

// Tasks
if (results.tasks && results.tasks.length > 0) {
html += '<div class="search-category">' +
'<h4>✅ Tasks (' + results.tasks.length + ')</h4>';
results.tasks.forEach(t => {
html += '<div class="search-result-item" data-section="roadmap" data-id="' + t.id + '">' +
'<div class="result-icon" style="background: rgba(74,222,128,0.2);">✓</div>' +
'<div class="result-content">' +
'<div class="result-title">' + t.title + '</div>' +
'<div class="result-meta">' + t.assignee + ' • ' + t.priority + ' priority</div>' +
'</div>' +
'<div class="result-arrow">→</div>' +
'</div>';
});
html += '</div>';
}

// Roadmap
if (results.roadmap && results.roadmap.length > 0) {
html += '<div class="search-category">' +
'<h4>🗺️ Roadmap (' + results.roadmap.length + ')</h4>';
results.roadmap.forEach(r => {
html += '<div class="search-result-item" data-section="roadmap" data-id="' + r.id + '">' +
'<div class="result-icon" style="background: rgba(110,231,183,0.2);">🗺️</div>' +
'<div class="result-content">' +
'<div class="result-title">' + r.title + '</div>' +
'<div class="result-meta">' + r.quarter + ' • ' + r.status + '</div>' +
'</div>' +
'<div class="result-arrow">→</div>' +
'</div>';
});
html += '</div>';
}

html += '</div></div>';
return html;
}

function navigateToSearchResult(section, itemId) {
// Clear search input
const searchInput = $('#globalSearch');
if (searchInput) searchInput.value = '';

// Navigate to section
$$('.nav-item').forEach(i => i.classList.remove('active'));
const navItem = $('.nav-item[data-section="' + section + '"]');
if (navItem) {
navItem.classList.add('active');
}

$$('.section-content').forEach(sec => sec.classList.remove('active'));
const targetSection = $('.section-content[data-section="' + section + '"]');
if (targetSection) {
targetSection.classList.add('active');
showToast('Navigated to ' + section.charAt(0).toUpperCase() + section.slice(1));

// Scroll to the item if possible
setTimeout(() => {
const itemElement = $('[data-id="' + itemId + '"]') || 
$('#' + itemId) ||
$('[onclick*="' + itemId + '"]');
if (itemElement) {
itemElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
// Highlight the item temporarily
itemElement.style.boxShadow = '0 0 0 3px rgba(110,231,183,0.5)';
setTimeout(() => {
itemElement.style.boxShadow = '';
}, 2000);
}
}, 300);
}
}

function closeSearchResults() {
const modal = $('#searchResultsModal');
if (modal) {
modal.classList.add('search-results-closing');
setTimeout(() => modal.remove(), 300);
}
}

// ============================================
// NAVIGATION
// ============================================
function wireNav() {
console.log('🧭 Wiring navigation...');
const navItems = $$('.nav-item');
if(!navItems.length) {
console.error('❌ No nav items found');
return;
}
  
navItems.forEach(item => {
item.addEventListener('click', () => {
const section = item.dataset.section;
console.log('📍 Navigating to:', section);
      
$$('.nav-item').forEach(i => i.classList.remove('active'));
item.classList.add('active');
      
$$('.section-content').forEach(sec => sec.classList.remove('active'));
      
const targetSection = $('.section-content[data-section="' + section + '"]');
if(targetSection) {
targetSection.classList.add('active');
showToast('Navigated to ' + section.charAt(0).toUpperCase() + section.slice(1));
}
});
});
  
console.log('✅ Navigation wired');
}

// ============================================
// TRANSACTION MANAGEMENT
// ============================================
function showTransactionForm(transaction = null) {
const isEdit = !!transaction;
const title = isEdit ? 'Edit Transaction' : 'New Transaction';

const paymentSources = [
{ value: 'mercury', label: 'Mercury' },
{ value: 'capital-one-personal', label: 'Capital One - Personal' },
{ value: 'capital-one-business', label: 'Capital One - Business' },
{ value: 'paypal', label: 'Paypal' },
{ value: 'bank-of-america', label: 'Bank of America' }
];

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Add or update transaction details</p>' +
'<form id="txForm">' +
'<div class="form-group">' +
'<label>Date</label>' +
'<input type="date" id="txDate" value="' + (transaction ? transaction.when : new Date().toISOString().slice(0,10)) + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Type</label>' +
'<select id="txType" required>' +
'<option value="revenue" ' + (transaction && transaction.type === 'revenue' ? 'selected' : '') + '>Revenue</option>' +
'<option value="expense" ' + (transaction && transaction.type === 'expense' ? 'selected' : '') + '>Expense</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Description</label>' +
'<input type="text" id="txDesc" value="' + (transaction ? transaction.description : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Payee/Customer</label>' +
'<input type="text" id="txCustomer" value="' + (transaction ? transaction.customer || '' : '') + '">' +
'</div>' +
'<div class="form-group">' +
'<label>Amount ($)</label>' +
'<input type="number" id="txAmount" value="' + (transaction ? transaction.amount : '') + '" required min="0" step="0.01">' +
'</div>' +
'<div class="form-group">' +
'<label>Payment Source</label>' +
'<select id="txDivision" required>' +
paymentSources.map(ps => '<option value="' + ps.value + '" ' + (transaction && transaction.division === ps.value ? 'selected' : '') + '>' + ps.label + '</option>').join('') +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Division</label>' +
'<select id="txProduct" required>' +
'<option value="referrals" ' + (transaction && transaction.product === 'referrals' ? 'selected' : '') + '>Referrals</option>' +
'<option value="appointments" ' + (transaction && transaction.product === 'appointments' ? 'selected' : '') + '>Appointments</option>' +
'<option value="reservations" ' + (transaction && transaction.product === 'reservations' ? 'selected' : '') + '>Reservations</option>' +
'</select>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelTx" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#txForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const amount = parseFloat($('#txAmount').value);
const type = $('#txType').value;
const division = $('#txDivision').value;
const oldDivision = transaction ? transaction.division : null;
const oldAmount = transaction ? transaction.amount : 0;
const oldType = transaction ? transaction.type : null;

// Update division stats
if(isEdit && oldDivision) {
// Remove old transaction from division stats
if(oldType === 'revenue') {
state.divisions[oldDivision].revenue -= oldAmount;
} else {
state.divisions[oldDivision].expenses -= oldAmount;
}
}

// Add new transaction to division stats
if(type === 'revenue') {
state.divisions[division].revenue = (state.divisions[division].revenue || 0) + amount;
} else {
state.divisions[division].expenses = (state.divisions[division].expenses || 0) + amount;
}

const data = {
id: transaction ? transaction.id : uid(),
type: type,
amount: amount,
description: $('#txDesc').value,
product: $('#txProduct').value,
division: division,
when: $('#txDate').value,
customer: $('#txCustomer').value
};

if(isEdit) {
const index = state.transactions.findIndex(t => t.id === transaction.id);
if(index >= 0) state.transactions[index] = data;
showToast('Transaction updated successfully');
} else {
state.transactions.unshift(data);
showToast('Transaction created successfully');
}

save();
renderAll();
closeModal();
});
}

const cancelBtn = $('#cancelTx');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteTransaction(id) {
if(!confirm('Delete this transaction?')) return;
const tx = state.transactions.find(t => t.id === id);
if(tx) {
// Update division stats
if(tx.type === 'revenue') {
state.divisions[tx.division].revenue -= tx.amount;
} else {
state.divisions[tx.division].expenses -= tx.amount;
}
}
state.transactions = state.transactions.filter(t => t.id !== id);
save();
renderTxnTable();
renderDivisions();
showToast('Transaction deleted');
}

// ============================================
// CONTACT MANAGEMENT
// ============================================
function showContactForm(contact = null) {
const isEdit = !!contact;
const title = isEdit ? 'Edit Contact' : 'New Contact';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage contact information</p>' +
'<form id="contactForm">' +
'<div class="form-group">' +
'<label>Name</label>' +
'<input type="text" id="contactName" value="' + (contact ? contact.name : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Company</label>' +
'<input type="text" id="contactCompany" value="' + (contact ? contact.company : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Email</label>' +
'<input type="email" id="contactEmail" value="' + (contact ? contact.email : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Phone</label>' +
'<input type="tel" id="contactPhone" value="' + (contact ? contact.phone || '' : '') + '">' +
'</div>' +
'<div class="form-group">' +
'<label>Product</label>' +
'<select id="contactProduct" required>' +
state.products.map(p => '<option value="' + p.id + '" ' + (contact && contact.product === p.id ? 'selected' : '') + '>' + p.name + '</option>').join('') +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Division/Subscription</label>' +
'<select id="contactDivision" required>' +
'<option value="referrals" ' + (contact && contact.division === 'referrals' ? 'selected' : (!contact ? 'selected' : '')) + '>🔗 Referrals</option>' +
'<option value="appointments" ' + (contact && contact.division === 'appointments' ? 'selected' : '') + '>📅 Appointments</option>' +
'<option value="reservations" ' + (contact && contact.division === 'reservations' ? 'selected' : '') + '>📝 Reservations</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Notes</label>' +
'<textarea id="contactNotes">' + (contact ? contact.notes || '' : '') + '</textarea>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelContact" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#contactForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: contact ? contact.id : uid(),
name: $('#contactName').value,
company: $('#contactCompany').value,
email: $('#contactEmail').value,
phone: $('#contactPhone').value,
product: $('#contactProduct').value,
division: $('#contactDivision').value,
notes: $('#contactNotes').value,
lastActivity: new Date().toISOString().slice(0,10)
};

if(isEdit) {
const index = state.contacts.findIndex(c => c.id === contact.id);
if(index >= 0) state.contacts[index] = data;
showToast('Contact updated successfully');
} else {
state.contacts.push(data);
showToast('Contact created successfully');
}

save();
renderContacts();
closeModal();
});
}

const cancelBtn = $('#cancelContact');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteContact(id) {
if(!confirm('Delete this contact?')) return;
state.contacts = state.contacts.filter(c => c.id !== id);
save();
renderContacts();
showToast('Contact deleted');
}

// ============================================
// PRODUCT MANAGEMENT
// ============================================
function showProductForm(product = null) {
const isEdit = !!product;
const title = isEdit ? 'Edit Product' : 'New Product';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage product details</p>' +
'<form id="productForm">' +
'<div class="form-group">' +
'<label>Product Name</label>' +
'<input type="text" id="productName" value="' + (product ? product.name : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Price (Monthly)</label>' +
'<input type="number" id="productPrice" value="' + (product ? product.price : '') + '" required min="0" step="0.01">' +
'</div>' +
'<div class="form-group">' +
'<label>Color</label>' +
'<input type="color" id="productColor" value="' + (product ? product.color : '#6ee7b7') + '" required>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelProduct" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#productForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: product ? product.id : 'p' + Date.now(),
name: $('#productName').value,
price: parseFloat($('#productPrice').value),
color: $('#productColor').value
};

if(isEdit) {
const index = state.products.findIndex(p => p.id === product.id);
if(index >= 0) state.products[index] = data;
showToast('Product updated successfully');
} else {
state.products.push(data);
showToast('Product created successfully');
}

save();
renderAll();
closeModal();
});
}

const cancelBtn = $('#cancelProduct');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteProduct(id) {
if(!confirm('Delete this product? All related data will remain but reference this product ID.')) return;
state.products = state.products.filter(p => p.id !== id);
save();
renderAll();
showToast('Product deleted');
}

function showProductDetails(productId) {
const product = state.products.find(p => p.id === productId);
if (!product) return;

// Calculate product-specific metrics
const productTransactions = state.transactions.filter(t => t.product === productId);
const revenueTransactions = productTransactions.filter(t => t.type === 'revenue');
const expenseTransactions = productTransactions.filter(t => t.type === 'expense');

const totalRevenue = revenueTransactions.reduce((sum, t) => sum + t.amount, 0);
const totalExpenses = expenseTransactions.reduce((sum, t) => sum + t.amount, 0);
const netProfit = totalRevenue - totalExpenses;
const profitMargin = totalRevenue > 0 ? ((netProfit / totalRevenue) * 100).toFixed(1) : 0;

// Monthly breakdown for trends
const now = new Date();
const monthlyData = [];
for (let i = 11; i >= 0; i--) {
const monthDate = new Date(now.getFullYear(), now.getMonth() - i, 1);
const nextMonth = new Date(now.getFullYear(), now.getMonth() - i + 1, 1);
const monthRevenue = revenueTransactions
.filter(t => new Date(t.when) >= monthDate && new Date(t.when) < nextMonth)
.reduce((sum, t) => sum + t.amount, 0);
monthlyData.push({
month: monthDate.toLocaleDateString('en-US', { month: 'short' }),
revenue: monthRevenue
});
}

// Calculate trend
const recentMonths = monthlyData.slice(-3).map(m => m.revenue);
const avgRecent = recentMonths.reduce((a, b) => a + b, 0) / recentMonths.length;
const olderMonths = monthlyData.slice(-6, -3).map(m => m.revenue);
const avgOlder = olderMonths.reduce((a, b) => a + b, 0) / olderMonths.length;
const trendPercentage = avgOlder > 0 ? (((avgRecent - avgOlder) / avgOlder) * 100).toFixed(1) : 0;
const isGrowing = parseFloat(trendPercentage) > 0;

// 3-month projection
const projection1 = avgRecent * 1.05;
const projection2 = avgRecent * 1.08;
const projection3 = avgRecent * 1.12;

// Customer metrics
const uniqueCustomers = [...new Set(revenueTransactions.map(t => t.customer))].filter(c => c).length;
const avgRevenuePerCustomer = uniqueCustomers > 0 ? totalRevenue / uniqueCustomers : 0;

const html = '<div>' +
'<h3 style="display: flex; align-items: center; gap: 12px; margin-bottom: 8px;">' +
'<span style="width: 12px; height: 12px; background: ' + product.color + '; border-radius: 3px;"></span>' +
product.name +
'</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Comprehensive product performance analysis</p>' +

// Key Metrics Grid
'<div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; margin-bottom: 24px;">' +
'<div style="background: rgba(110,231,183,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid var(--accent-primary);">' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-bottom: 6px;">Total Revenue</div>' +
'<div style="font-size: 22px; font-weight: 800; color: var(--accent-primary);">' + money(totalRevenue) + '</div>' +
'</div>' +
'<div style="background: rgba(255,107,107,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid var(--danger);">' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-bottom: 6px;">Total Expenses</div>' +
'<div style="font-size: 22px; font-weight: 800; color: var(--danger);">' + money(totalExpenses) + '</div>' +
'</div>' +
'<div style="background: rgba(96,165,250,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid var(--accent-tertiary);">' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-bottom: 6px;">Net Profit</div>' +
'<div style="font-size: 22px; font-weight: 800; color: var(--accent-tertiary);">' + money(netProfit) + '</div>' +
'</div>' +
'<div style="background: rgba(124,92,255,0.1); padding: 16px; border-radius: 10px; border-left: 3px solid var(--accent-secondary);">' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-bottom: 6px;">Profit Margin</div>' +
'<div style="font-size: 22px; font-weight: 800; color: var(--accent-secondary);">' + profitMargin + '%</div>' +
'</div>' +
'</div>' +

// Trend Analysis
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid var(--glass-border);">' +
'<h4 style="font-size: 14px; font-weight: 700; margin-bottom: 16px; color: var(--text-primary);">📈 Trend Analysis</h4>' +
'<div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">' +
'<div style="font-size: 32px;">' + (isGrowing ? '📈' : '📉') + '</div>' +
'<div>' +
'<div style="font-size: 13px; color: var(--text-secondary);">3-Month Trend</div>' +
'<div style="font-size: 20px; font-weight: 700; color: ' + (isGrowing ? 'var(--success)' : 'var(--danger)') + ';">' +
(isGrowing ? '+' : '') + trendPercentage + '%' +
'</div>' +
'</div>' +
'</div>' +
'<div style="font-size: 12px; color: var(--text-secondary); line-height: 1.6;">' +
(isGrowing ? 
'Revenue is trending upward. Recent 3-month average shows growth compared to previous 3 months.' :
'Revenue is trending downward. Consider reviewing pricing, marketing, or product-market fit.') +
'</div>' +
'</div>' +

// 12-Month Revenue Chart
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid var(--glass-border);">' +
'<h4 style="font-size: 14px; font-weight: 700; margin-bottom: 16px; color: var(--text-primary);">📊 12-Month Revenue History</h4>' +
'<div style="display: flex; align-items: end; justify-content: space-between; gap: 4px; height: 120px;">' +
monthlyData.map(m => {
const maxRevenue = Math.max(...monthlyData.map(d => d.revenue), 1);
const heightPercent = (m.revenue / maxRevenue) * 100;
return '<div style="flex: 1; display: flex; flex-direction: column; align-items: center; gap: 6px;">' +
'<div style="width: 100%; background: linear-gradient(to top, ' + product.color + ', ' + product.color + '80); border-radius: 4px 4px 0 0; height: ' + heightPercent + '%; min-height: 2px; transition: all 0.3s ease;" title="' + m.month + ': ' + money(m.revenue) + '"></div>' +
'<div style="font-size: 9px; color: var(--text-muted); transform: rotate(-45deg); margin-top: 8px;">' + m.month + '</div>' +
'</div>';
}).join('') +
'</div>' +
'</div>' +

// 3-Month Projection
'<div style="background: linear-gradient(135deg, rgba(110,231,183,0.1), rgba(124,92,255,0.1)); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid rgba(110,231,183,0.3);">' +
'<h4 style="font-size: 14px; font-weight: 700; margin-bottom: 16px; color: var(--accent-primary);">🔮 3-Month Revenue Projection</h4>' +
'<div style="display: grid; gap: 12px;">' +
'<div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">' +
'<span style="font-size: 12px; color: var(--text-secondary);">Next Month</span>' +
'<span style="font-size: 14px; font-weight: 700; color: var(--text-primary);">' + money(projection1) + '</span>' +
'</div>' +
'<div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">' +
'<span style="font-size: 12px; color: var(--text-secondary);">2 Months</span>' +
'<span style="font-size: 14px; font-weight: 700; color: var(--text-primary);">' + money(projection2) + '</span>' +
'</div>' +
'<div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">' +
'<span style="font-size: 12px; color: var(--text-secondary);">3 Months</span>' +
'<span style="font-size: 14px; font-weight: 700; color: var(--text-primary);">' + money(projection3) + '</span>' +
'</div>' +
'</div>' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-top: 12px; line-height: 1.6;">' +
'Projections based on recent growth trends. Actual results may vary based on market conditions.' +
'</div>' +
'</div>' +

// Customer Insights
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid var(--glass-border);">' +
'<h4 style="font-size: 14px; font-weight: 700; margin-bottom: 16px; color: var(--text-primary);">👥 Customer Insights</h4>' +
'<div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 16px;">' +
'<div>' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-bottom: 6px;">Total Customers</div>' +
'<div style="font-size: 18px; font-weight: 700; color: var(--text-primary);">' + uniqueCustomers + '</div>' +
'</div>' +
'<div>' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-bottom: 6px;">Avg Revenue/Customer</div>' +
'<div style="font-size: 18px; font-weight: 700; color: var(--text-primary);">' + money(avgRevenuePerCustomer) + '</div>' +
'</div>' +
'<div>' +
'<div style="font-size: 11px; color: var(--text-secondary); margin-bottom: 6px;">Transactions</div>' +
'<div style="font-size: 18px; font-weight: 700; color: var(--text-primary);">' + productTransactions.length + '</div>' +
'</div>' +
'</div>' +
'</div>' +

// Product Details
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid var(--glass-border);">' +
'<h4 style="font-size: 14px; font-weight: 700; margin-bottom: 16px; color: var(--text-primary);">ℹ️ Product Details</h4>' +
'<div style="display: grid; gap: 12px; font-size: 13px;">' +
'<div style="display: flex; justify-content: space-between;">' +
'<span style="color: var(--text-secondary);">Monthly Price:</span>' +
'<span style="font-weight: 600; color: var(--text-primary);">' + money(product.price) + '</span>' +
'</div>' +
'<div style="display: flex; justify-content: space-between;">' +
'<span style="color: var(--text-secondary);">Product ID:</span>' +
'<span style="font-weight: 600; color: var(--text-primary);">' + product.id + '</span>' +
'</div>' +
'<div style="display: flex; justify-content: space-between;">' +
'<span style="color: var(--text-secondary);">Revenue Transactions:</span>' +
'<span style="font-weight: 600; color: var(--text-primary);">' + revenueTransactions.length + '</span>' +
'</div>' +
'<div style="display: flex; justify-content: space-between;">' +
'<span style="color: var(--text-secondary);">Expense Transactions:</span>' +
'<span style="font-weight: 600; color: var(--text-primary);">' + expenseTransactions.length + '</span>' +
'</div>' +
'</div>' +
'</div>' +

'<div style="display: flex; gap: 12px;">' +
'<button class="ghost" id="closeProductDetails">Close</button>' +
'<button class="btn" onclick="window.closeModal(); setTimeout(() => window.editProduct(\'' + productId + '\'), 100);" style="flex: 1;">✏️ Edit Product</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
const closeBtn = $('#closeProductDetails');
if (closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

window.showProductDetails = showProductDetails;
window.editProduct = function(id) {
const product = state.products.find(p => p.id === id);
if (product) showProductForm(product);
};

// ============================================
// TASK MANAGEMENT
// ============================================
function showTaskForm(task = null) {
const isEdit = !!task;
const title = isEdit ? 'Edit Task' : 'New Task';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage task details</p>' +
'<form id="taskForm">' +
'<div class="form-group">' +
'<label>Task Title</label>' +
'<input type="text" id="taskTitle" value="' + (task ? task.title : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Priority</label>' +
'<select id="taskPriority" required>' +
'<option value="high" ' + (task && task.priority === 'high' ? 'selected' : '') + '>High</option>' +
'<option value="medium" ' + (task && task.priority === 'medium' ? 'selected' : '') + '>Medium</option>' +
'<option value="low" ' + (task && task.priority === 'low' ? 'selected' : '') + '>Low</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Assignee</label>' +
'<input type="text" id="taskAssignee" value="' + (task ? task.assignee : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Due Date</label>' +
'<input type="date" id="taskDueDate" value="' + (task ? task.dueDate : new Date().toISOString().slice(0,10)) + '" required>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelTask" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#taskForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: task ? task.id : uid(),
title: $('#taskTitle').value,
priority: $('#taskPriority').value,
assignee: $('#taskAssignee').value,
dueDate: $('#taskDueDate').value,
completed: task ? task.completed : false
};

if(isEdit) {
const index = state.tasks.findIndex(t => t.id === task.id);
if(index >= 0) state.tasks[index] = data;
showToast('Task updated successfully');
} else {
state.tasks.push(data);
showToast('Task created successfully');
}

save();
renderTasks();
closeModal();
});
}

const cancelBtn = $('#cancelTask');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function toggleTask(id) {
const task = state.tasks.find(t => t.id === id);
if(task) {
task.completed = !task.completed;
save();
renderTasks();
showToast(task.completed ? 'Task completed' : 'Task reopened');
}
}

function deleteTask(id) {
if(!confirm('Delete this task?')) return;
state.tasks = state.tasks.filter(t => t.id !== id);
save();
renderTasks();
showToast('Task deleted');
}

// ============================================
// ROADMAP MANAGEMENT
// ============================================
function showRoadmapForm(item = null) {
const isEdit = !!item;
const title = isEdit ? 'Edit Roadmap Item' : 'New Roadmap Item';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Manage roadmap details</p>' +
'<form id="roadmapForm">' +
'<div class="form-group">' +
'<label>Title</label>' +
'<input type="text" id="roadmapTitle" value="' + (item ? item.title : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Description</label>' +
'<textarea id="roadmapDesc">' + (item ? item.description : '') + '</textarea>' +
'</div>' +
'<div class="form-group">' +
'<label>Status</label>' +
'<select id="roadmapStatus" required>' +
'<option value="planning" ' + (item && item.status === 'planning' ? 'selected' : '') + '>Planning</option>' +
'<option value="in-progress" ' + (item && item.status === 'in-progress' ? 'selected' : '') + '>In Progress</option>' +
'<option value="completed" ' + (item && item.status === 'completed' ? 'selected' : '') + '>Completed</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Quarter</label>' +
'<input type="text" id="roadmapQuarter" value="' + (item ? item.quarter : '') + '" placeholder="Q1 2025" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Owner</label>' +
'<input type="text" id="roadmapOwner" value="' + (item ? item.owner : '') + '" required>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelRoadmap" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#roadmapForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: item ? item.id : uid(),
title: $('#roadmapTitle').value,
description: $('#roadmapDesc').value,
status: $('#roadmapStatus').value,
quarter: $('#roadmapQuarter').value,
owner: $('#roadmapOwner').value
};

if(isEdit) {
const index = state.roadmapItems.findIndex(r => r.id === item.id);
if(index >= 0) state.roadmapItems[index] = data;
showToast('Roadmap item updated successfully');
} else {
state.roadmapItems.push(data);
showToast('Roadmap item created successfully');
}

save();
renderRoadmap();
closeModal();
});
}

const cancelBtn = $('#cancelRoadmap');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteRoadmapItem(id) {
if(!confirm('Delete this roadmap item?')) return;
state.roadmapItems = state.roadmapItems.filter(r => r.id !== id);
save();
renderRoadmap();
showToast('Roadmap item deleted');
}

// ============================================
// NOTES MANAGEMENT
// ============================================
function showNoteForm(note = null) {
const isEdit = !!note;
const title = isEdit ? 'Edit Note' : 'New Note';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Create or update a note</p>' +
'<form id="noteForm">' +
'<div class="form-group">' +
'<label>Title</label>' +
'<input type="text" id="noteTitle" value="' + (note ? note.title : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Content</label>' +
'<textarea id="noteContent" style="min-height: 150px;">' + (note ? note.content : '') + '</textarea>' +
'</div>' +
'<div class="form-group">' +
'<label>Category</label>' +
'<select id="noteCategory" required>' +
'<option value="general" ' + (note && note.category === 'general' ? 'selected' : '') + '>General</option>' +
'<option value="important" ' + (note && note.category === 'important' ? 'selected' : '') + '>Important</option>' +
'<option value="idea" ' + (note && note.category === 'idea' ? 'selected' : '') + '>Idea</option>' +
'<option value="todo" ' + (note && note.category === 'todo' ? 'selected' : '') + '>To-Do</option>' +
'</select>' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelNote" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#noteForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: note ? note.id : uid(),
title: $('#noteTitle').value,
content: $('#noteContent').value,
category: $('#noteCategory').value,
created: note ? note.created : new Date().toISOString(),
updated: new Date().toISOString()
};

if(isEdit) {
const index = state.notes.findIndex(n => n.id === note.id);
if(index >= 0) state.notes[index] = data;
showToast('Note updated successfully');
} else {
state.notes.unshift(data);
showToast('Note created successfully');
}

save();
renderNotes();
closeModal();
});
}

const cancelBtn = $('#cancelNote');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

function deleteNote(id) {
if(!confirm('Delete this note?')) return;
state.notes = state.notes.filter(n => n.id !== id);
save();
renderNotes();
showToast('Note deleted');
}

function viewNote(id) {
const note = state.notes.find(n => n.id === id);
if(!note) return;

const categoryIcons = {
general: '📝',
important: '⚠️',
idea: '💡',
todo: '✅'
};

const html = '<div>' +
'<h3>' + categoryIcons[note.category] + ' ' + note.title + '</h3>' +
'<div class="note-meta" style="margin-bottom: 20px;">' +
'<span class="note-tag ' + note.category + '">' + note.category + '</span>' +
'<span class="tiny muted">Created: ' + new Date(note.created).toLocaleDateString() + '</span>' +
'<span class="tiny muted">Updated: ' + new Date(note.updated).toLocaleDateString() + '</span>' +
'</div>' +
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 20px; white-space: pre-wrap; line-height: 1.8; color: var(--text-secondary);">' +
note.content +
'</div>' +
'<div style="display: flex; gap: 12px;">' +
'<button class="btn" onclick="window.closeModal(); setTimeout(() => window.editNote(\'' + note.id + '\'), 100);">✏️ Edit</button>' +
'<button class="ghost" id="closeNoteView">Close</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
const closeBtn = $('#closeNoteView');
if(closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// TEAM DIRECTORY
// ============================================
function showTeamMemberForm(member = null) {
const isEdit = !!member;
const title = isEdit ? 'Edit Team Member' : 'New Team Member';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Add or update team member details</p>' +
'<form id="teamForm">' +
'<div class="form-group">' +
'<label>Name</label>' +
'<input type="text" id="teamName" value="' + (member ? member.name : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Role/Title</label>' +
'<input type="text" id="teamRole" value="' + (member ? member.role : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Email</label>' +
'<input type="email" id="teamEmail" value="' + (member ? member.email : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Phone</label>' +
'<input type="text" id="teamPhone" value="' + (member ? member.phone || '' : '') + '">' +
'</div>' +
'<div class="form-group">' +
'<label>Department</label>' +
'<input type="text" id="teamDepartment" value="' + (member ? member.department || '' : '') + '">' +
'</div>' +
'<div class="form-group">' +
'<label>Avatar Emoji</label>' +
'<input type="text" id="teamAvatar" value="' + (member ? member.avatar || '👤' : '👤') + '" placeholder="👤">' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelTeamForm" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#teamForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: member ? member.id : uid(),
name: $('#teamName').value,
role: $('#teamRole').value,
email: $('#teamEmail').value,
phone: $('#teamPhone').value || '',
department: $('#teamDepartment').value || '',
avatar: $('#teamAvatar').value || '👤',
created: member ? member.created : new Date().toISOString(),
updated: new Date().toISOString()
};

if(isEdit) {
const index = state.team.findIndex(t => t.id === member.id);
if(index >= 0) state.team[index] = data;
showToast('Team member updated successfully');
} else {
state.team.push(data);
showToast('Team member added successfully');
}

save();
renderTeam();
closeModal();
});
}

const cancelBtn = $('#cancelTeamForm');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// VENDOR DIRECTORY
// ============================================
function showVendorForm(vendor = null) {
const isEdit = !!vendor;
const title = isEdit ? 'Edit Vendor' : 'New Vendor';

const html = '<div>' +
'<h3>' + title + '</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Add or update vendor details</p>' +
'<form id="vendorForm">' +
'<div class="form-group">' +
'<label>Vendor Name</label>' +
'<input type="text" id="vendorName" value="' + (vendor ? vendor.name : '') + '" required>' +
'</div>' +
'<div class="form-group">' +
'<label>Category</label>' +
'<select id="vendorCategory" required>' +
'<option value="Software" ' + (vendor && vendor.category === 'Software' ? 'selected' : '') + '>Software</option>' +
'<option value="Infrastructure" ' + (vendor && vendor.category === 'Infrastructure' ? 'selected' : '') + '>Infrastructure</option>' +
'<option value="Security" ' + (vendor && vendor.category === 'Security' ? 'selected' : '') + '>Security</option>' +
'<option value="Analytics" ' + (vendor && vendor.category === 'Analytics' ? 'selected' : '') + '>Analytics</option>' +
'<option value="Development" ' + (vendor && vendor.category === 'Development' ? 'selected' : '') + '>Development</option>' +
'<option value="Marketing" ' + (vendor && vendor.category === 'Marketing' ? 'selected' : '') + '>Marketing</option>' +
'<option value="Communication" ' + (vendor && vendor.category === 'Communication' ? 'selected' : '') + '>Communication</option>' +
'<option value="Other" ' + (vendor && vendor.category === 'Other' ? 'selected' : '') + '>Other</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Service/Description</label>' +
'<textarea id="vendorService" style="min-height: 80px;">' + (vendor ? vendor.service || '' : '') + '</textarea>' +
'</div>' +
'<div class="form-group">' +
'<label>Monthly Cost</label>' +
'<input type="number" id="vendorCost" value="' + (vendor ? vendor.monthlyCost || '' : '') + '" step="0.01" min="0">' +
'</div>' +
'<div class="form-group">' +
'<label>Status</label>' +
'<select id="vendorStatus">' +
'<option value="active" ' + (vendor && vendor.status === 'active' ? 'selected' : !vendor ? 'selected' : '') + '>Active</option>' +
'<option value="trial" ' + (vendor && vendor.status === 'trial' ? 'selected' : '') + '>Trial</option>' +
'<option value="inactive" ' + (vendor && vendor.status === 'inactive' ? 'selected' : '') + '>Inactive</option>' +
'</select>' +
'</div>' +
'<div class="form-group">' +
'<label>Website</label>' +
'<input type="url" id="vendorWebsite" value="' + (vendor ? vendor.website || '' : '') + '" placeholder="https://">' +
'</div>' +
'<div class="form-group">' +
'<label>Contact Email</label>' +
'<input type="email" id="vendorContact" value="' + (vendor ? vendor.contact || '' : '') + '">' +
'</div>' +
'<div class="form-group">' +
'<label>Renewal Date</label>' +
'<input type="date" id="vendorRenewal" value="' + (vendor ? vendor.renewalDate || '' : '') + '">' +
'</div>' +
'<div style="display: flex; gap: 12px; margin-top: 24px;">' +
'<button type="submit" class="btn" style="flex: 1;">💾 ' + (isEdit ? 'Update' : 'Save') + '</button>' +
'<button type="button" id="cancelVendorForm" class="ghost" style="flex: 1;">Cancel</button>' +
'</div>' +
'</form></div>';

openModal(html);

setTimeout(() => {
const form = $('#vendorForm');
if(form) {
form.addEventListener('submit', (e) => {
e.preventDefault();
const data = {
id: vendor ? vendor.id : uid(),
name: $('#vendorName').value,
category: $('#vendorCategory').value,
service: $('#vendorService').value || '',
monthlyCost: parseFloat($('#vendorCost').value) || 0,
status: $('#vendorStatus').value,
website: $('#vendorWebsite').value || '',
contact: $('#vendorContact').value || '',
renewalDate: $('#vendorRenewal').value || '',
created: vendor ? vendor.created : new Date().toISOString(),
updated: new Date().toISOString()
};

if(isEdit) {
const index = state.vendors.findIndex(v => v.id === vendor.id);
if(index >= 0) state.vendors[index] = data;
showToast('Vendor updated successfully');
} else {
state.vendors.push(data);
showToast('Vendor added successfully');
}

save();
renderVendors();
closeModal();
});
}

const cancelBtn = $('#cancelVendorForm');
if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// ADVERTISING & MARKETING MODULE  
// ============================================
function initAdvertising() {
	console.log('📢 Initializing Advertising & Marketing Module...');
	
	// Initialize default channels if empty
	if (!state.marketingChannels || state.marketingChannels.length === 0) {
		state.marketingChannels = [
			{ id: uid(), name: 'Google Ads', type: 'PPC', status: 'active', monthlyBudget: 3000, spent: 0, clicks: 0, conversions: 0, impressions: 0 },
			{ id: uid(), name: 'Facebook Ads', type: 'Social', status: 'active', monthlyBudget: 2500, spent: 0, clicks: 0, conversions: 0, impressions: 0 },
			{ id: uid(), name: 'LinkedIn Ads', type: 'Social', status: 'active', monthlyBudget: 2000, spent: 0, clicks: 0, conversions: 0, impressions: 0 },
			{ id: uid(), name: 'Email Marketing', type: 'Email', status: 'active', monthlyBudget: 500, spent: 0, clicks: 0, conversions: 0, impressions: 0 },
			{ id: uid(), name: 'Content Marketing', type: 'Content', status: 'active', monthlyBudget: 1500, spent: 0, clicks: 0, conversions: 0, impressions: 0 },
			{ id: uid(), name: 'SEO', type: 'Organic', status: 'active', monthlyBudget: 1000, spent: 0, clicks: 0, conversions: 0, impressions: 0 }
		];
	}
	
	if (!state.campaigns) state.campaigns = [];
	if (!state.leads) state.leads = [];
	if (!state.marketingBudget) state.marketingBudget = { monthly: 10000, allocated: 0 };
	
	save();
	setupMarketingTabs();
	wireAdvertisingButtons();
	renderAdvertising();
	console.log('✅ Advertising module initialized');
}

function setupMarketingTabs() {
	const tabs = $$('.marketing-tab');
	tabs.forEach(tab => {
		tab.addEventListener('click', () => {
			const tabName = tab.dataset.tab;
			
			$$('.marketing-tab').forEach(t => {
				t.classList.remove('active');
				t.style.color = 'var(--text-secondary)';
				t.style.borderBottomColor = 'transparent';
			});
			tab.classList.add('active');
			tab.style.color = 'var(--accent-primary)';
			tab.style.borderBottomColor = 'var(--accent-primary)';
			
			$$('.marketing-tab-content').forEach(content => {
				content.style.display = 'none';
			});
			const targetContent = $(`.marketing-tab-content[data-tab-content="${tabName}"]`);
			if (targetContent) targetContent.style.display = 'block';
			
			switch(tabName) {
				case 'campaigns': renderCampaigns(); break;
				case 'channels': renderChannels(); break;
				case 'budget': renderBudget(); break;
				case 'analytics': renderMarketingAnalytics(); break;
				case 'leads': renderLeads(); break;
			}
		});
	});
}

function wireAdvertisingButtons() {
	const newCampaignBtn = $('#newCampaignBtn');
	if (newCampaignBtn) newCampaignBtn.addEventListener('click', () => showCampaignForm());
	
	const newLeadBtn = $('#newLeadBtn');
	if (newLeadBtn) newLeadBtn.addEventListener('click', () => showLeadForm());
	
	const exportMarketingBtn = $('#exportMarketingReport');
	if (exportMarketingBtn) exportMarketingBtn.addEventListener('click', exportMarketingReport);
	
	const exportLeadsBtn = $('#exportLeadsBtn');
	if (exportLeadsBtn) exportLeadsBtn.addEventListener('click', exportLeads);
	
	const refreshBtn = $('#refreshAdvertising');
	if (refreshBtn) refreshBtn.addEventListener('click', renderAdvertising);
}

function renderAdvertising() {
	renderMarketingKPIs();
	renderCampaigns();
	renderChannels();
	renderBudget();
	renderMarketingAnalytics();
	renderLeads();
}

function renderMarketingKPIs() {
	const kpiContainer = $('#marketingKPIs');
	if (!kpiContainer) return;
	
	const totalSpent = state.marketingChannels.reduce((sum, ch) => sum + (ch.spent || 0), 0);
	const totalClicks = state.marketingChannels.reduce((sum, ch) => sum + (ch.clicks || 0), 0);
	const totalConversions = state.marketingChannels.reduce((sum, ch) => sum + (ch.conversions || 0), 0);
	const totalImpressions = state.marketingChannels.reduce((sum, ch) => sum + (ch.impressions || 0), 0);
	const avgCTR = totalImpressions > 0 ? ((totalClicks / totalImpressions) * 100).toFixed(2) : 0;
	const avgCPC = totalClicks > 0 ? (totalSpent / totalClicks).toFixed(2) : 0;
	const totalRevenue = state.campaigns.reduce((sum, c) => sum + (c.revenue || 0), 0);
	const roi = totalSpent > 0 ? (((totalRevenue - totalSpent) / totalSpent) * 100).toFixed(1) : 0;
	const activeCampaigns = state.campaigns.filter(c => c.status === 'active').length;
	
	kpiContainer.innerHTML = [
		{ label: 'Total Spent', value: money(totalSpent), icon: '💰', color: 'var(--danger)' },
		{ label: 'Total Clicks', value: totalClicks.toLocaleString(), icon: '👆', color: 'var(--accent-tertiary)' },
		{ label: 'Conversions', value: totalConversions.toLocaleString(), icon: '🎯', color: 'var(--success)' },
		{ label: 'Avg CTR', value: avgCTR + '%', icon: '📊', color: 'var(--accent-primary)' },
		{ label: 'Avg CPC', value: '$' + avgCPC, icon: '💵', color: 'var(--warning)' },
		{ label: 'ROI', value: roi + '%', icon: '📈', color: parseFloat(roi) >= 0 ? 'var(--success)' : 'var(--danger)' },
		{ label: 'Active Campaigns', value: activeCampaigns, icon: '📢', color: 'var(--accent-secondary)' },
		{ label: 'Total Leads', value: state.leads.length, icon: '👥', color: 'var(--accent-primary)' }
	].map(kpi => `
		<div class="kpi-card">
			<div style="font-size: 28px; margin-bottom: 8px;">${kpi.icon}</div>
			<div class="kpi-value" style="color: ${kpi.color};">${kpi.value}</div>
			<div class="kpi-label">${kpi.label}</div>
		</div>
	`).join('');
}

function showCampaignForm(campaign = null) {
	const isEdit = !!campaign;
	const title = isEdit ? 'Edit Campaign' : 'New Campaign';
	
	const html = `<div>
		<h3>${title}</h3>
		<p class="tiny muted" style="margin-bottom: 24px;">Create and manage marketing campaigns</p>
		<form id="campaignForm">
			<div class="form-group">
				<label>Campaign Name</label>
				<input type="text" id="campaignName" value="${campaign ? campaign.name : ''}" required>
			</div>
			<div class="form-group">
				<label>Channel</label>
				<select id="campaignChannel" required>
					<option value="">Select Channel</option>
					${state.marketingChannels.map(ch => 
						`<option value="${ch.id}" ${campaign && campaign.channelId === ch.id ? 'selected' : ''}>${ch.name}</option>`
					).join('')}
				</select>
			</div>
			<div class="form-group">
				<label>Campaign Type</label>
				<select id="campaignType" required>
					<option value="awareness" ${campaign && campaign.type === 'awareness' ? 'selected' : ''}>Brand Awareness</option>
					<option value="lead-gen" ${campaign && campaign.type === 'lead-gen' ? 'selected' : ''}>Lead Generation</option>
					<option value="conversion" ${campaign && campaign.type === 'conversion' ? 'selected' : ''}>Conversion</option>
					<option value="retargeting" ${campaign && campaign.type === 'retargeting' ? 'selected' : ''}>Retargeting</option>
					<option value="engagement" ${campaign && campaign.type === 'engagement' ? 'selected' : ''}>Engagement</option>
				</select>
			</div>
			<div class="form-group">
				<label>Budget</label>
				<input type="number" id="campaignBudget" value="${campaign ? campaign.budget || '' : ''}" step="0.01" min="0" required>
			</div>
			<div class="form-group">
				<label>Start Date</label>
				<input type="date" id="campaignStartDate" value="${campaign ? campaign.startDate || '' : ''}" required>
			</div>
			<div class="form-group">
				<label>End Date</label>
				<input type="date" id="campaignEndDate" value="${campaign ? campaign.endDate || '' : ''}">
			</div>
			<div class="form-group">
				<label>Status</label>
				<select id="campaignStatus">
					<option value="draft" ${campaign && campaign.status === 'draft' ? 'selected' : !campaign ? 'selected' : ''}>Draft</option>
					<option value="active" ${campaign && campaign.status === 'active' ? 'selected' : ''}>Active</option>
					<option value="paused" ${campaign && campaign.status === 'paused' ? 'selected' : ''}>Paused</option>
					<option value="completed" ${campaign && campaign.status === 'completed' ? 'selected' : ''}>Completed</option>
				</select>
			</div>
			<div class="form-group">
				<label>Target Audience</label>
				<textarea id="campaignAudience" style="min-height: 60px;">${campaign ? campaign.targetAudience || '' : ''}</textarea>
			</div>
			<div class="form-group">
				<label>Goals/Objectives</label>
				<textarea id="campaignGoals" style="min-height: 60px;">${campaign ? campaign.goals || '' : ''}</textarea>
			</div>
			<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px;">
				<div class="form-group">
					<label>Impressions</label>
					<input type="number" id="campaignImpressions" value="${campaign ? campaign.impressions || 0 : 0}" min="0">
				</div>
				<div class="form-group">
					<label>Clicks</label>
					<input type="number" id="campaignClicks" value="${campaign ? campaign.clicks || 0 : 0}" min="0">
				</div>
			</div>
			<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px;">
				<div class="form-group">
					<label>Conversions</label>
					<input type="number" id="campaignConversions" value="${campaign ? campaign.conversions || 0 : 0}" min="0">
				</div>
				<div class="form-group">
					<label>Revenue Generated</label>
					<input type="number" id="campaignRevenue" value="${campaign ? campaign.revenue || 0 : 0}" step="0.01" min="0">
				</div>
			</div>
			<div style="display: flex; gap: 12px; margin-top: 24px;">
				<button type="submit" class="btn" style="flex: 1;">💾 ${isEdit ? 'Update' : 'Create'} Campaign</button>
				<button type="button" id="cancelCampaignForm" class="ghost" style="flex: 1;">Cancel</button>
			</div>
		</form>
	</div>`;
	
	openModal(html);
	
	setTimeout(() => {
		const form = $('#campaignForm');
		if (form) {
			form.addEventListener('submit', (e) => {
				e.preventDefault();
				const data = {
					id: campaign ? campaign.id : uid(),
					name: $('#campaignName').value,
					channelId: $('#campaignChannel').value,
					type: $('#campaignType').value,
					budget: parseFloat($('#campaignBudget').value) || 0,
					startDate: $('#campaignStartDate').value,
					endDate: $('#campaignEndDate').value || null,
					status: $('#campaignStatus').value,
					targetAudience: $('#campaignAudience').value || '',
					goals: $('#campaignGoals').value || '',
					impressions: parseInt($('#campaignImpressions').value) || 0,
					clicks: parseInt($('#campaignClicks').value) || 0,
					conversions: parseInt($('#campaignConversions').value) || 0,
					revenue: parseFloat($('#campaignRevenue').value) || 0,
					created: campaign ? campaign.created : new Date().toISOString(),
					updated: new Date().toISOString()
				};
				
				if (isEdit) {
					const index = state.campaigns.findIndex(c => c.id === campaign.id);
					if (index >= 0) state.campaigns[index] = data;
					showToast('Campaign updated successfully');
				} else {
					state.campaigns.push(data);
					showToast('Campaign created successfully');
				}
				
				save();
				renderAdvertising();
				closeModal();
			});
		}
		
		const cancelBtn = $('#cancelCampaignForm');
		if (cancelBtn) cancelBtn.addEventListener('click', closeModal);
	}, 100);
}

function renderCampaigns() {
	const grid = $('#campaignsGrid');
	if (!grid) return;
	
	if (state.campaigns.length === 0) {
		grid.innerHTML = `
			<div style="text-align: center; padding: 60px 20px;">
				<div style="font-size: 64px; margin-bottom: 16px;">📢</div>
				<h3 style="color: var(--text-secondary); margin-bottom: 8px;">No campaigns yet</h3>
				<p style="color: var(--text-muted);">Create your first marketing campaign to get started</p>
			</div>
		`;
		return;
	}
	
	const statusColors = {
		draft: 'var(--text-muted)',
		active: 'var(--success)',
		paused: 'var(--warning)',
		completed: 'var(--accent-tertiary)'
	};
	
	grid.innerHTML = `
		<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(380px, 1fr)); gap: 20px;">
			${state.campaigns.map(campaign => {
				const channel = state.marketingChannels.find(ch => ch.id === campaign.channelId);
				const ctr = campaign.impressions > 0 ? ((campaign.clicks / campaign.impressions) * 100).toFixed(2) : 0;
				const conversionRate = campaign.clicks > 0 ? ((campaign.conversions / campaign.clicks) * 100).toFixed(2) : 0;
				const roi = campaign.budget > 0 ? (((campaign.revenue - campaign.budget) / campaign.budget) * 100).toFixed(1) : 0;
				
				return `
					<div class="contact-card" style="cursor: pointer;" onclick="showCampaignForm(state.campaigns.find(c => c.id === '${campaign.id}'))">
						<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">
							<div>
								<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 4px;">${campaign.name}</h3>
								<p style="font-size: 12px; color: var(--text-muted);">${channel ? channel.name : 'Unknown Channel'} • ${campaign.type}</p>
							</div>
							<span style="padding: 4px 12px; background: ${statusColors[campaign.status]}; color: var(--bg-primary); border-radius: 12px; font-size: 11px; font-weight: 700; text-transform: uppercase;">
								${campaign.status}
							</span>
						</div>
						<div style="margin-bottom: 16px; padding: 12px; background: rgba(255,255,255,0.03); border-radius: 8px;">
							<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
								<span style="font-size: 12px; color: var(--text-muted);">Budget</span>
								<span style="font-size: 13px; font-weight: 600;">${money(campaign.budget)}</span>
							</div>
							<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
								<span style="font-size: 12px; color: var(--text-muted);">Revenue</span>
								<span style="font-size: 13px; font-weight: 600; color: var(--success);">${money(campaign.revenue)}</span>
							</div>
							<div style="display: flex; justify-content: space-between;">
								<span style="font-size: 12px; color: var(--text-muted);">ROI</span>
								<span style="font-size: 13px; font-weight: 600; color: ${parseFloat(roi) >= 0 ? 'var(--success)' : 'var(--danger)'};">${roi}%</span>
							</div>
						</div>
						<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 8px; margin-bottom: 12px;">
							<div style="text-align: center; padding: 8px; background: rgba(255,255,255,0.03); border-radius: 6px;">
								<div style="font-size: 16px; font-weight: 700; color: var(--accent-primary);">${campaign.impressions.toLocaleString()}</div>
								<div style="font-size: 10px; color: var(--text-muted);">Impressions</div>
							</div>
							<div style="text-align: center; padding: 8px; background: rgba(255,255,255,0.03); border-radius: 6px;">
								<div style="font-size: 16px; font-weight: 700; color: var(--accent-tertiary);">${campaign.clicks.toLocaleString()}</div>
								<div style="font-size: 10px; color: var(--text-muted);">Clicks</div>
							</div>
							<div style="text-align: center; padding: 8px; background: rgba(255,255,255,0.03); border-radius: 6px;">
								<div style="font-size: 16px; font-weight: 700; color: var(--success);">${campaign.conversions.toLocaleString()}</div>
								<div style="font-size: 10px; color: var(--text-muted);">Conversions</div>
							</div>
						</div>
						<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; padding-top: 12px; border-top: 1px solid var(--glass-border);">
							<div style="font-size: 11px;">
								<span style="color: var(--text-muted);">CTR:</span>
								<span style="color: var(--text-primary); font-weight: 600; margin-left: 4px;">${ctr}%</span>
							</div>
							<div style="font-size: 11px;">
								<span style="color: var(--text-muted);">Conv Rate:</span>
								<span style="color: var(--text-primary); font-weight: 600; margin-left: 4px;">${conversionRate}%</span>
							</div>
						</div>
						<div style="margin-top: 8px; font-size: 11px; color: var(--text-muted);">
							📅 ${campaign.startDate}${campaign.endDate ? ' - ' + campaign.endDate : ''}
						</div>
						<button onclick="event.stopPropagation(); deleteCampaign('${campaign.id}')" class="ghost danger" style="width: 100%; margin-top: 12px; padding: 8px; font-size: 12px;">🗑️ Delete</button>
					</div>
				`;
			}).join('')}
		</div>
	`;
}

function deleteCampaign(id) {
	if (!confirm('Delete this campaign? This action cannot be undone.')) return;
	state.campaigns = state.campaigns.filter(c => c.id !== id);
	save();
	renderAdvertising();
	showToast('Campaign deleted');
}

function renderChannels() {
	const metricsContainer = $('#channelMetrics');
	const listContainer = $('#channelsList');
	if (!metricsContainer || !listContainer) return;
	
	const activeChannels = state.marketingChannels.filter(ch => ch.status === 'active').length;
	const totalBudget = state.marketingChannels.reduce((sum, ch) => sum + ch.monthlyBudget, 0);
	const totalSpent = state.marketingChannels.reduce((sum, ch) => sum + (ch.spent || 0), 0);
	const budgetUtilization = totalBudget > 0 ? ((totalSpent / totalBudget) * 100).toFixed(1) : 0;
	
	metricsContainer.innerHTML = [
		{ label: 'Active Channels', value: activeChannels, icon: '📡' },
		{ label: 'Total Budget', value: money(totalBudget), icon: '💰' },
		{ label: 'Total Spent', value: money(totalSpent), icon: '💸' },
		{ label: 'Budget Used', value: budgetUtilization + '%', icon: '📊' }
	].map(kpi => `
		<div class="kpi-card">
			<div style="font-size: 28px; margin-bottom: 8px;">${kpi.icon}</div>
			<div class="kpi-value">${kpi.value}</div>
			<div class="kpi-label">${kpi.label}</div>
		</div>
	`).join('');
	
	listContainer.innerHTML = `
		<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 20px;">
			${state.marketingChannels.map(channel => {
				const utilization = channel.monthlyBudget > 0 ? ((channel.spent / channel.monthlyBudget) * 100).toFixed(1) : 0;
				const ctr = channel.clicks > 0 && channel.impressions ? ((channel.clicks / channel.impressions) * 100).toFixed(2) : 0;
				const cpc = channel.clicks > 0 ? (channel.spent / channel.clicks).toFixed(2) : 0;
				
				return `
					<div class="contact-card">
						<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">
							<div>
								<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 4px;">${channel.name}</h3>
								<p style="font-size: 12px; color: var(--text-muted);">${channel.type}</p>
							</div>
							<span style="padding: 4px 12px; background: ${channel.status === 'active' ? 'var(--success)' : 'var(--text-muted)'}; color: var(--bg-primary); border-radius: 12px; font-size: 11px; font-weight: 700; text-transform: uppercase;">
								${channel.status}
							</span>
						</div>
						<div style="margin-bottom: 16px;">
							<div style="display: flex; justify-content: space-between; margin-bottom: 4px;">
								<span style="font-size: 12px; color: var(--text-muted);">Budget Utilization</span>
								<span style="font-size: 12px; font-weight: 600;">${utilization}%</span>
							</div>
							<div style="width: 100%; height: 8px; background: rgba(255,255,255,0.1); border-radius: 4px; overflow: hidden;">
								<div style="width: ${Math.min(utilization, 100)}%; height: 100%; background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary)); transition: width 0.3s;"></div>
							</div>
							<div style="display: flex; justify-content: space-between; margin-top: 4px;">
								<span style="font-size: 11px; color: var(--text-muted);">${money(channel.spent)} spent</span>
								<span style="font-size: 11px; color: var(--text-muted);">${money(channel.monthlyBudget)} budget</span>
							</div>
						</div>
						<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 12px;">
							<div style="padding: 12px; background: rgba(255,255,255,0.03); border-radius: 8px;">
								<div style="font-size: 18px; font-weight: 700; color: var(--accent-tertiary);">${channel.clicks.toLocaleString()}</div>
								<div style="font-size: 11px; color: var(--text-muted);">Total Clicks</div>
							</div>
							<div style="padding: 12px; background: rgba(255,255,255,0.03); border-radius: 8px;">
								<div style="font-size: 18px; font-weight: 700; color: var(--success);">${channel.conversions.toLocaleString()}</div>
								<div style="font-size: 11px; color: var(--text-muted);">Conversions</div>
							</div>
						</div>
						<div style="display: flex; justify-content: space-between; padding-top: 12px; border-top: 1px solid var(--glass-border); font-size: 12px;">
							<div><span style="color: var(--text-muted);">CTR:</span> <span style="font-weight: 600;">${ctr}%</span></div>
							<div><span style="color: var(--text-muted);">CPC:</span> <span style="font-weight: 600;">$${cpc}</span></div>
						</div>
					</div>
				`;
			}).join('')}
		</div>
	`;
}

function renderBudget() {
	const overviewContainer = $('#budgetOverview');
	const roiContainer = $('#roiSummary');
	const allocationContainer = $('#budgetAllocation');
	
	if (!overviewContainer || !roiContainer || !allocationContainer) return;
	
	const totalBudget = state.marketingBudget.monthly;
	const allocated = state.marketingChannels.reduce((sum, ch) => sum + ch.monthlyBudget, 0);
	const spent = state.marketingChannels.reduce((sum, ch) => sum + (ch.spent || 0), 0);
	const remaining = totalBudget - spent;
	const spentPercentage = totalBudget > 0 ? ((spent / totalBudget) * 100).toFixed(1) : 0;
	
	overviewContainer.innerHTML = `
		<div style="margin-bottom: 20px;">
			<div style="font-size: 32px; font-weight: 800; margin-bottom: 8px;">${money(totalBudget)}</div>
			<div style="font-size: 13px; color: var(--text-muted);">Monthly Marketing Budget</div>
		</div>
		<div style="margin-bottom: 16px;">
			<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
				<span style="font-size: 13px; color: var(--text-secondary);">Spent</span>
				<span style="font-size: 14px; font-weight: 600; color: var(--danger);">${money(spent)} (${spentPercentage}%)</span>
			</div>
			<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
				<span style="font-size: 13px; color: var(--text-secondary);">Allocated</span>
				<span style="font-size: 14px; font-weight: 600;">${money(allocated)}</span>
			</div>
			<div style="display: flex; justify-content: space-between;">
				<span style="font-size: 13px; color: var(--text-secondary);">Remaining</span>
				<span style="font-size: 14px; font-weight: 600; color: var(--success);">${money(remaining)}</span>
			</div>
		</div>
		<div style="width: 100%; height: 12px; background: rgba(255,255,255,0.1); border-radius: 6px; overflow: hidden;">
			<div style="width: ${spentPercentage}%; height: 100%; background: linear-gradient(90deg, var(--danger), var(--warning)); transition: width 0.3s;"></div>
		</div>
	`;
	
	const totalRevenue = state.campaigns.reduce((sum, c) => sum + (c.revenue || 0), 0);
	const totalCost = state.campaigns.reduce((sum, c) => sum + (c.budget || 0), 0);
	const overallROI = totalCost > 0 ? (((totalRevenue - totalCost) / totalCost) * 100).toFixed(1) : 0;
	const avgROI = state.campaigns.length > 0 ? (state.campaigns.reduce((sum, c) => {
		const roi = c.budget > 0 ? ((c.revenue - c.budget) / c.budget) * 100 : 0;
		return sum + roi;
	}, 0) / state.campaigns.length).toFixed(1) : 0;
	
	roiContainer.innerHTML = `
		<div style="margin-bottom: 20px;">
			<div style="font-size: 32px; font-weight: 800; margin-bottom: 8px; color: ${parseFloat(overallROI) >= 0 ? 'var(--success)' : 'var(--danger)'};">${overallROI}%</div>
			<div style="font-size: 13px; color: var(--text-muted);">Overall ROI</div>
		</div>
		<div style="margin-bottom: 16px;">
			<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
				<span style="font-size: 13px; color: var(--text-secondary);">Total Revenue</span>
				<span style="font-size: 14px; font-weight: 600; color: var(--success);">${money(totalRevenue)}</span>
			</div>
			<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
				<span style="font-size: 13px; color: var(--text-secondary);">Total Cost</span>
				<span style="font-size: 14px; font-weight: 600; color: var(--danger);">${money(totalCost)}</span>
			</div>
			<div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
				<span style="font-size: 13px; color: var(--text-secondary);">Net Profit</span>
				<span style="font-size: 14px; font-weight: 600; color: ${(totalRevenue - totalCost) >= 0 ? 'var(--success)' : 'var(--danger)'};">${money(totalRevenue - totalCost)}</span>
			</div>
			<div style="display: flex; justify-content: space-between;">
				<span style="font-size: 13px; color: var(--text-secondary);">Avg Campaign ROI</span>
				<span style="font-size: 14px; font-weight: 600;">${avgROI}%</span>
			</div>
		</div>
	`;
	
	allocationContainer.innerHTML = `
		<h3 style="font-size: 16px; margin-bottom: 16px;">Budget Allocation by Channel</h3>
		<div style="display: grid; gap: 12px;">
			${state.marketingChannels.map(channel => {
				const percentage = totalBudget > 0 ? ((channel.monthlyBudget / totalBudget) * 100).toFixed(1) : 0;
				return `
					<div style="padding: 16px; background: rgba(255,255,255,0.03); border-radius: 12px; border: 1px solid var(--glass-border);">
						<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
							<span style="font-weight: 600;">${channel.name}</span>
							<span style="font-size: 14px; color: var(--accent-primary);">${money(channel.monthlyBudget)} (${percentage}%)</span>
						</div>
						<div style="width: 100%; height: 6px; background: rgba(255,255,255,0.1); border-radius: 3px; overflow: hidden;">
							<div style="width: ${percentage}%; height: 100%; background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary)); transition: width 0.3s;"></div>
						</div>
					</div>
				`;
			}).join('')}
		</div>
	`;
}

function renderMarketingAnalytics() {
	if (typeof Chart === 'undefined') {
		console.log('Chart.js not loaded yet');
		return;
	}
	
	renderPerformanceChart();
	renderFunnelChart();
	renderChannelComparisonChart();
}

function renderPerformanceChart() {
	const ctx = $('#performanceChart');
	if (!ctx) return;
	
	if (window.performanceChartInstance) {
		window.performanceChartInstance.destroy();
	}
	
	const months = [];
	const impressions = [];
	const clicks = [];
	const conversions = [];
	
	for (let i = 5; i >= 0; i--) {
		const date = new Date();
		date.setMonth(date.getMonth() - i);
		months.push(date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' }));
		impressions.push(Math.floor(Math.random() * 50000) + 10000);
		clicks.push(Math.floor(Math.random() * 2000) + 500);
		conversions.push(Math.floor(Math.random() * 200) + 50);
	}
	
	window.performanceChartInstance = new Chart(ctx, {
		type: 'line',
		data: {
			labels: months,
			datasets: [{
				label: 'Impressions',
				data: impressions,
				borderColor: 'rgba(110, 231, 183, 1)',
				backgroundColor: 'rgba(110, 231, 183, 0.1)',
				tension: 0.4
			}, {
				label: 'Clicks',
				data: clicks,
				borderColor: 'rgba(96, 165, 250, 1)',
				backgroundColor: 'rgba(96, 165, 250, 0.1)',
				tension: 0.4
			}, {
				label: 'Conversions',
				data: conversions,
				borderColor: 'rgba(124, 92, 255, 1)',
				backgroundColor: 'rgba(124, 92, 255, 0.1)',
				tension: 0.4
			}]
		},
		options: {
			responsive: true,
			maintainAspectRatio: true,
			plugins: {
				legend: {
					display: true,
					position: 'top',
					labels: { color: '#94a3b8', font: { size: 11 } }
				}
			},
			scales: {
				y: {
					beginAtZero: true,
					grid: { color: 'rgba(255,255,255,0.05)' },
					ticks: { color: '#64748b' }
				},
				x: {
					grid: { color: 'rgba(255,255,255,0.05)' },
					ticks: { color: '#64748b' }
				}
			}
		}
	});
}

function renderFunnelChart() {
	const ctx = $('#funnelChart');
	if (!ctx) return;
	
	if (window.funnelChartInstance) {
		window.funnelChartInstance.destroy();
	}
	
	const totalImpressions = state.campaigns.reduce((sum, c) => sum + (c.impressions || 0), 0) || 50000;
	const totalClicks = state.campaigns.reduce((sum, c) => sum + (c.clicks || 0), 0) || 2000;
	const totalConversions = state.campaigns.reduce((sum, c) => sum + (c.conversions || 0), 0) || 150;
	const totalRevenue = state.campaigns.filter(c => c.revenue > 0).length || 50;
	
	window.funnelChartInstance = new Chart(ctx, {
		type: 'bar',
		data: {
			labels: ['Impressions', 'Clicks', 'Conversions', 'Revenue'],
			datasets: [{
				label: 'Conversion Funnel',
				data: [totalImpressions, totalClicks, totalConversions, totalRevenue],
				backgroundColor: [
					'rgba(110, 231, 183, 0.8)',
					'rgba(96, 165, 250, 0.8)',
					'rgba(124, 92, 255, 0.8)',
					'rgba(255, 180, 107, 0.8)'
				],
				borderColor: [
					'rgba(110, 231, 183, 1)',
					'rgba(96, 165, 250, 1)',
					'rgba(124, 92, 255, 1)',
					'rgba(255, 180, 107, 1)'
				],
				borderWidth: 2
			}]
		},
		options: {
			indexAxis: 'y',
			responsive: true,
			maintainAspectRatio: true,
			plugins: {
				legend: { display: false }
			},
			scales: {
				x: {
					beginAtZero: true,
					grid: { color: 'rgba(255,255,255,0.05)' },
					ticks: { color: '#64748b' }
				},
				y: {
					grid: { color: 'rgba(255,255,255,0.05)' },
					ticks: { color: '#64748b' }
				}
			}
		}
	});
}

function renderChannelComparisonChart() {
	const ctx = $('#channelComparisonChart');
	if (!ctx) return;
	
	if (window.channelComparisonChartInstance) {
		window.channelComparisonChartInstance.destroy();
	}
	
	const labels = state.marketingChannels.map(ch => ch.name);
	const budgets = state.marketingChannels.map(ch => ch.monthlyBudget);
	const spent = state.marketingChannels.map(ch => ch.spent || 0);
	
	window.channelComparisonChartInstance = new Chart(ctx, {
		type: 'bar',
		data: {
			labels: labels,
			datasets: [{
				label: 'Budget',
				data: budgets,
				backgroundColor: 'rgba(110, 231, 183, 0.6)',
				borderColor: 'rgba(110, 231, 183, 1)',
				borderWidth: 2
			}, {
				label: 'Spent',
				data: spent,
				backgroundColor: 'rgba(255, 107, 107, 0.6)',
				borderColor: 'rgba(255, 107, 107, 1)',
				borderWidth: 2
			}]
		},
		options: {
			responsive: true,
			maintainAspectRatio: true,
			plugins: {
				legend: {
					display: true,
					position: 'top',
					labels: { color: '#94a3b8', font: { size: 11 } }
				}
			},
			scales: {
				y: {
					beginAtZero: true,
					grid: { color: 'rgba(255,255,255,0.05)' },
					ticks: { 
						color: '#64748b',
						callback: function(value) {
							return '$' + value.toLocaleString();
						}
					}
				},
				x: {
					grid: { color: 'rgba(255,255,255,0.05)' },
					ticks: { color: '#64748b' }
				}
			}
		}
	});
}

function showLeadForm(lead = null) {
	const isEdit = !!lead;
	const title = isEdit ? 'Edit Lead' : 'New Lead';
	
	const html = `<div>
		<h3>${title}</h3>
		<p class="tiny muted" style="margin-bottom: 24px;">Capture and manage leads</p>
		<form id="leadForm">
			<div class="form-group">
				<label>Name</label>
				<input type="text" id="leadName" value="${lead ? lead.name : ''}" required>
			</div>
			<div class="form-group">
				<label>Email</label>
				<input type="email" id="leadEmail" value="${lead ? lead.email : ''}" required>
			</div>
			<div class="form-group">
				<label>Phone</label>
				<input type="tel" id="leadPhone" value="${lead ? lead.phone || '' : ''}">
			</div>
			<div class="form-group">
				<label>Company</label>
				<input type="text" id="leadCompany" value="${lead ? lead.company || '' : ''}">
			</div>
			<div class="form-group">
				<label>Source</label>
				<select id="leadSource">
					<option value="google-ads" ${lead && lead.source === 'google-ads' ? 'selected' : ''}>Google Ads</option>
					<option value="facebook-ads" ${lead && lead.source === 'facebook-ads' ? 'selected' : ''}>Facebook Ads</option>
					<option value="linkedin-ads" ${lead && lead.source === 'linkedin-ads' ? 'selected' : ''}>LinkedIn Ads</option>
					<option value="website" ${lead && lead.source === 'website' ? 'selected' : ''}>Website</option>
					<option value="referral" ${lead && lead.source === 'referral' ? 'selected' : ''}>Referral</option>
					<option value="email-campaign" ${lead && lead.source === 'email-campaign' ? 'selected' : ''}>Email Campaign</option>
					<option value="event" ${lead && lead.source === 'event' ? 'selected' : ''}>Event</option>
					<option value="other" ${lead && lead.source === 'other' ? 'selected' : ''}>Other</option>
				</select>
			</div>
			<div class="form-group">
				<label>Status</label>
				<select id="leadStatus">
					<option value="new" ${lead && lead.status === 'new' ? 'selected' : !lead ? 'selected' : ''}>New</option>
					<option value="contacted" ${lead && lead.status === 'contacted' ? 'selected' : ''}>Contacted</option>
					<option value="qualified" ${lead && lead.status === 'qualified' ? 'selected' : ''}>Qualified</option>
					<option value="converted" ${lead && lead.status === 'converted' ? 'selected' : ''}>Converted</option>
					<option value="lost" ${lead && lead.status === 'lost' ? 'selected' : ''}>Lost</option>
				</select>
			</div>
			<div class="form-group">
				<label>Score (0-100)</label>
				<input type="number" id="leadScore" value="${lead ? lead.score || 50 : 50}" min="0" max="100">
			</div>
			<div class="form-group">
				<label>Notes</label>
				<textarea id="leadNotes" style="min-height: 80px;">${lead ? lead.notes || '' : ''}</textarea>
			</div>
			<div style="display: flex; gap: 12px; margin-top: 24px;">
				<button type="submit" class="btn" style="flex: 1;">💾 ${isEdit ? 'Update' : 'Add'} Lead</button>
				<button type="button" id="cancelLeadForm" class="ghost" style="flex: 1;">Cancel</button>
			</div>
		</form>
	</div>`;
	
	openModal(html);
	
	setTimeout(() => {
		const form = $('#leadForm');
		if (form) {
			form.addEventListener('submit', (e) => {
				e.preventDefault();
				const data = {
					id: lead ? lead.id : uid(),
					name: $('#leadName').value,
					email: $('#leadEmail').value,
					phone: $('#leadPhone').value || '',
					company: $('#leadCompany').value || '',
					source: $('#leadSource').value,
					status: $('#leadStatus').value,
					score: parseInt($('#leadScore').value) || 50,
					notes: $('#leadNotes').value || '',
					created: lead ? lead.created : new Date().toISOString(),
					updated: new Date().toISOString()
				};
				
				if (isEdit) {
					const index = state.leads.findIndex(l => l.id === lead.id);
					if (index >= 0) state.leads[index] = data;
					showToast('Lead updated successfully');
				} else {
					state.leads.push(data);
					showToast('Lead added successfully');
				}
				
				save();
				renderLeads();
				closeModal();
			});
		}
		
		const cancelBtn = $('#cancelLeadForm');
		if (cancelBtn) cancelBtn.addEventListener('click', closeModal);
	}, 100);
}

function renderLeads() {
	const grid = $('#leadsGrid');
	if (!grid) return;
	
	if (state.leads.length === 0) {
		grid.innerHTML = `
			<div style="text-align: center; padding: 60px 20px;">
				<div style="font-size: 64px; margin-bottom: 16px;">👥</div>
				<h3 style="color: var(--text-secondary); margin-bottom: 8px;">No leads yet</h3>
				<p style="color: var(--text-muted);">Add your first lead to start tracking</p>
			</div>
		`;
		return;
	}
	
	const statusColors = {
		new: 'var(--accent-primary)',
		contacted: 'var(--accent-tertiary)',
		qualified: 'var(--warning)',
		converted: 'var(--success)',
		lost: 'var(--danger)'
	};
	
	grid.innerHTML = `
		<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 20px;">
			${state.leads.map(lead => {
				const scoreColor = lead.score >= 70 ? 'var(--success)' : lead.score >= 40 ? 'var(--warning)' : 'var(--danger)';
				return `
					<div class="contact-card" style="cursor: pointer;" onclick="showLeadForm(state.leads.find(l => l.id === '${lead.id}'))">
						<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">
							<div>
								<h3 style="font-size: 16px; font-weight: 700; margin-bottom: 4px;">${lead.name}</h3>
								<p style="font-size: 12px; color: var(--text-muted);">${lead.company || 'No company'}</p>
							</div>
							<div style="display: flex; gap: 8px; align-items: center;">
								<div style="padding: 6px 12px; background: ${scoreColor}; color: var(--bg-primary); border-radius: 20px; font-size: 11px; font-weight: 700;">
									Score: ${lead.score}
								</div>
							</div>
						</div>
						<div style="margin-bottom: 12px; padding: 12px; background: rgba(255,255,255,0.03); border-radius: 8px;">
							<div style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">
								<span style="font-size: 14px;">📧</span>
								<span style="font-size: 13px; color: var(--text-secondary);">${lead.email}</span>
							</div>
							${lead.phone ? `
								<div style="display: flex; align-items: center; gap: 8px;">
									<span style="font-size: 14px;">📱</span>
									<span style="font-size: 13px; color: var(--text-secondary);">${lead.phone}</span>
								</div>
							` : ''}
						</div>
						<div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; background: rgba(255,255,255,0.03); border-radius: 8px; margin-bottom: 12px;">
							<div>
								<div style="font-size: 11px; color: var(--text-muted); margin-bottom: 4px;">Source</div>
								<div style="font-size: 13px; font-weight: 600; text-transform: capitalize;">${lead.source.replace('-', ' ')}</div>
							</div>
							<div>
								<span style="padding: 4px 12px; background: ${statusColors[lead.status]}; color: var(--bg-primary); border-radius: 12px; font-size: 11px; font-weight: 700; text-transform: uppercase;">
									${lead.status}
								</span>
							</div>
						</div>
						${lead.notes ? `
							<div style="font-size: 12px; color: var(--text-muted); margin-bottom: 12px; line-height: 1.5;">
								${lead.notes.substring(0, 100)}${lead.notes.length > 100 ? '...' : ''}
							</div>
						` : ''}
						<div style="font-size: 11px; color: var(--text-muted); padding-top: 12px; border-top: 1px solid var(--glass-border);">
							Added: ${new Date(lead.created).toLocaleDateString()}
						</div>
						<button onclick="event.stopPropagation(); deleteLead('${lead.id}')" class="ghost danger" style="width: 100%; margin-top: 12px; padding: 8px; font-size: 12px;">🗑️ Delete</button>
					</div>
				`;
			}).join('')}
		</div>
	`;
}

function deleteLead(id) {
	if (!confirm('Delete this lead? This action cannot be undone.')) return;
	state.leads = state.leads.filter(l => l.id !== id);
	save();
	renderLeads();
	showToast('Lead deleted');
}

function exportMarketingReport() {
	const report = {
		generated: new Date().toISOString(),
		summary: {
			totalCampaigns: state.campaigns.length,
			activeCampaigns: state.campaigns.filter(c => c.status === 'active').length,
			totalBudget: state.marketingBudget.monthly,
			totalSpent: state.marketingChannels.reduce((sum, ch) => sum + (ch.spent || 0), 0),
			totalRevenue: state.campaigns.reduce((sum, c) => sum + (c.revenue || 0), 0),
			totalLeads: state.leads.length
		},
		campaigns: state.campaigns,
		channels: state.marketingChannels,
		leads: state.leads
	};
	
	const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
	const url = URL.createObjectURL(blob);
	const link = document.createElement('a');
	link.href = url;
	link.download = 'marketing-report-' + new Date().toISOString().split('T')[0] + '.json';
	document.body.appendChild(link);
	link.click();
	document.body.removeChild(link);
	URL.revokeObjectURL(url);
	showToast('Marketing report exported');
}

function exportLeads() {
	if (state.leads.length === 0) {
		showToast('No leads to export');
		return;
	}
	
	const csv = [
		['Name', 'Email', 'Phone', 'Company', 'Source', 'Status', 'Score', 'Created', 'Notes'].join(','),
		...state.leads.map(lead => [
			lead.name,
			lead.email,
			lead.phone || '',
			lead.company || '',
			lead.source,
			lead.status,
			lead.score,
			new Date(lead.created).toLocaleDateString(),
			(lead.notes || '').replace(/,/g, ';')
		].join(','))
	].join('\n');
	
	const blob = new Blob([csv], { type: 'text/csv' });
	const url = URL.createObjectURL(blob);
	const link = document.createElement('a');
	link.href = url;
	link.download = 'leads-export-' + new Date().toISOString().split('T')[0] + '.csv';
	document.body.appendChild(link);
	link.click();
	document.body.removeChild(link);
	URL.revokeObjectURL(url);
	showToast('Leads exported to CSV');
}

// ============================================
// RECURRING INVOICE DETECTION & REMINDERS
// ============================================
function detectRecurringInvoices() {
	// Analyze transactions to find recurring patterns
	const expenses = state.transactions.filter(t => t.type === 'expense').sort((a, b) => new Date(a.when) - new Date(b.when));
	const recurringPatterns = {};
	
	// Group transactions by similar amounts and descriptions
	expenses.forEach(txn => {
		// Use a more flexible grouping key - allow 5% variance in amount
		const amountKey = Math.round(txn.amount / 50) * 50; // Group to nearest $50
		const descKey = txn.description.toLowerCase().trim();
		const key = `${descKey}_${amountKey}`;
		
		if (!recurringPatterns[key]) {
			recurringPatterns[key] = [];
		}
		recurringPatterns[key].push(txn);
	});
	
	// Identify patterns with 2+ occurrences
	const recurring = [];
	Object.keys(recurringPatterns).forEach(key => {
		const transactions = recurringPatterns[key];
		if (transactions.length >= 2) {
			// Calculate average interval between transactions
			const intervals = [];
			for (let i = 1; i < transactions.length; i++) {
				const diff = new Date(transactions[i].when) - new Date(transactions[i - 1].when);
				const days = diff / (1000 * 60 * 60 * 24);
				intervals.push(days);
			}
			
			const avgInterval = intervals.reduce((sum, val) => sum + val, 0) / intervals.length;
			
			// Detect monthly (25-35 days), bi-weekly (12-16 days), or weekly (6-9 days) patterns
			let isRecurring = false;
			let frequency = Math.round(avgInterval);
			let patternType = 'custom';
			
			if (avgInterval >= 25 && avgInterval <= 35) {
				isRecurring = true;
				frequency = 30;
				patternType = 'monthly';
			} else if (avgInterval >= 12 && avgInterval <= 16) {
				isRecurring = true;
				frequency = 14;
				patternType = 'bi-weekly';
			} else if (avgInterval >= 6 && avgInterval <= 9) {
				isRecurring = true;
				frequency = 7;
				patternType = 'weekly';
			} else if (avgInterval >= 85 && avgInterval <= 95) {
				isRecurring = true;
				frequency = 90;
				patternType = 'quarterly';
			}
			
			if (isRecurring) {
				const lastTransaction = transactions[transactions.length - 1];
				const lastDate = new Date(lastTransaction.when);
				const nextDueDate = new Date(lastDate);
				nextDueDate.setDate(nextDueDate.getDate() + frequency);
				
				// Calculate average amount for this recurring expense
				const avgAmount = transactions.reduce((sum, t) => sum + t.amount, 0) / transactions.length;
				
				recurring.push({
					id: 'inv_' + lastTransaction.id,
					description: lastTransaction.description,
					amount: Math.round(avgAmount),
					lastDate: lastTransaction.when,
					nextDueDate: nextDueDate.toISOString(),
					frequency: frequency,
					occurrences: transactions.length,
					product: lastTransaction.product,
					patternType: patternType,
					confidence: Math.min(transactions.length * 20, 100) // Confidence score
				});
			}
		}
	});
	
	// Sort by next due date
	recurring.sort((a, b) => new Date(a.nextDueDate) - new Date(b.nextDueDate));
	
	state.recurringInvoices = recurring;
	save();
	return recurring;
}

function checkInvoiceReminders() {
	const now = new Date();
	const sevenDaysFromNow = new Date(now);
	sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);
	
	// Detect recurring invoices if not already done or if stale
	if (!state.recurringInvoices || state.recurringInvoices.length === 0) {
		detectRecurringInvoices();
	}
	
	// Get overdue and upcoming invoices (within 7 days)
	const relevantInvoices = state.recurringInvoices.filter(inv => {
		const dueDate = new Date(inv.nextDueDate);
		// Show if overdue (past due) or due within next 7 days
		return dueDate <= sevenDaysFromNow;
	});
	
	// Sort by urgency: overdue first, then by due date
	relevantInvoices.sort((a, b) => {
		const dateA = new Date(a.nextDueDate);
		const dateB = new Date(b.nextDueDate);
		return dateA - dateB; // Earlier dates first (overdue will be earliest)
	});
	
	return relevantInvoices;
}

function renderInvoiceReminders() {
	const reminders = checkInvoiceReminders();
	const panel = $('#invoiceRemindersPanel');
	const list = $('#invoiceRemindersList');
	const countBadge = $('#invoiceCount');
	
	if (!list) return;
	
	// Update count badge
	if (countBadge) {
		countBadge.textContent = reminders.length;
		if (reminders.length === 0) {
			countBadge.style.background = 'var(--text-muted)';
		} else {
			const hasOverdue = reminders.some(inv => {
				const dueDate = new Date(inv.nextDueDate);
				return dueDate < new Date();
			});
			countBadge.style.background = hasOverdue ? 'var(--danger)' : 'var(--accent-primary)';
		}
	}
	
	// Always show panel
	if (panel) panel.style.display = 'block';
	
	// Empty state
	if (reminders.length === 0) {
		list.innerHTML = '<div style="text-align: center; padding: 30px 20px; color: var(--text-muted);">' +
		'<div style="font-size: 36px; margin-bottom: 12px; opacity: 0.7;">✅</div>' +
		'<div style="font-size: 13px; line-height: 1.6; margin-bottom: 8px;">No invoices due soon</div>' +
		'<div style="font-size: 11px; color: var(--text-muted);">Smart detection scans transactions for recurring patterns</div>' +
		'</div>';
		return;
	}
	
	const now = new Date();
	const html = reminders.map(inv => {
		const dueDate = new Date(inv.nextDueDate);
		const daysUntil = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
		
		// Determine urgency level
		let urgency, urgencyColor, urgencyBg, urgencyLabel;
		if (daysUntil < 0) {
			urgency = 'overdue';
			urgencyColor = 'var(--danger)';
			urgencyBg = 'rgba(255,107,107,0.1)';
			urgencyLabel = Math.abs(daysUntil) + ' day' + (Math.abs(daysUntil) !== 1 ? 's' : '') + ' OVERDUE';
		} else if (daysUntil === 0) {
			urgency = 'today';
			urgencyColor = 'var(--danger)';
			urgencyBg = 'rgba(255,107,107,0.1)';
			urgencyLabel = 'DUE TODAY';
		} else if (daysUntil === 1) {
			urgency = 'tomorrow';
			urgencyColor = 'var(--warning)';
			urgencyBg = 'rgba(255,184,107,0.1)';
			urgencyLabel = 'DUE TOMORROW';
		} else if (daysUntil <= 3) {
			urgency = 'critical';
			urgencyColor = 'var(--warning)';
			urgencyBg = 'rgba(255,184,107,0.08)';
			urgencyLabel = daysUntil + ' days';
		} else {
			urgency = 'upcoming';
			urgencyColor = 'var(--accent-tertiary)';
			urgencyBg = 'rgba(96,165,250,0.06)';
			urgencyLabel = daysUntil + ' days';
		}
		
		// Pattern type badge
		const patternIcons = {
			'weekly': '📅',
			'bi-weekly': '📆',
			'monthly': '🗓️',
			'quarterly': '📊',
			'custom': '🔄'
		};
		const patternIcon = patternIcons[inv.patternType] || '🔄';
		
		return '<div style="padding: 14px; margin-bottom: 10px; background: ' + urgencyBg + '; border-left: 3px solid ' + urgencyColor + '; border-radius: 8px; transition: all 0.3s ease; cursor: pointer;" onclick="window.manageRecurringInvoice(\'' + inv.id + '\')" onmouseover="this.style.background=\'' + urgencyBg.replace(/0\.\d+/, function(m) { return (parseFloat(m) + 0.05).toFixed(2); }) + '\'; this.style.transform=\'translateX(2px)\';" onmouseout="this.style.background=\'' + urgencyBg + '\'; this.style.transform=\'translateX(0)\';">' +
		'<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 8px;">' +
		'<div style="flex: 1; min-width: 0;">' +
		'<div style="font-size: 12px; font-weight: 700; color: var(--text-primary); margin-bottom: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">' + inv.description + '</div>' +
		'<div style="font-size: 15px; font-weight: 800; color: ' + urgencyColor + ';">' + money(inv.amount) + '</div>' +
		'</div>' +
		'<div style="text-align: right; margin-left: 8px;">' +
		'<span style="display: block; font-size: 10px; padding: 3px 8px; background: ' + urgencyColor + '30; color: ' + urgencyColor + '; border-radius: 6px; font-weight: 700; text-transform: uppercase; margin-bottom: 4px; white-space: nowrap;">' + urgencyLabel + '</span>' +
		'<div style="font-size: 10px; color: var(--text-muted);">' + dueDate.toLocaleDateString('en-US', {month: 'short', day: 'numeric'}) + '</div>' +
		'</div>' +
		'</div>' +
		'<div style="display: flex; justify-content: space-between; align-items: center; font-size: 10px; color: var(--text-secondary);">' +
		'<span>' + patternIcon + ' ' + inv.patternType.replace('-', ' ') + '</span>' +
		'<span style="opacity: 0.7;">' + inv.occurrences + ' occurrences</span>' +
		'</div>' +
		'</div>';
	}).join('');
	
	list.innerHTML = html;
}

function showRecurringInvoicesModal() {
	// Detect recurring invoices first
	detectRecurringInvoices();
	
	const invoices = state.recurringInvoices || [];
	
	let html = '<div>' +
	'<h3>📋 Recurring Invoices</h3>' +
	'<p class="tiny muted" style="margin-bottom: 24px;">Automatically detected recurring transactions with smart pattern recognition</p>';
	
	if (invoices.length === 0) {
		html += '<div style="text-align: center; padding: 40px; background: rgba(255,255,255,0.03); border-radius: 12px;">' +
		'<div style="font-size: 48px; margin-bottom: 16px;">📋</div>' +
		'<h3 style="margin-bottom: 12px; color: var(--text-primary);">No Recurring Invoices Detected</h3>' +
		'<p style="color: var(--text-secondary); margin-bottom: 16px;">Add more transactions to detect recurring patterns.</p>' +
		'<p style="font-size: 12px; color: var(--text-muted);">The system looks for expenses that occur regularly (weekly, bi-weekly, monthly, or quarterly) with similar amounts.</p>' +
		'</div>';
	} else {
		html += '<div style="background: rgba(110,231,183,0.05); padding: 16px; border-radius: 12px; margin-bottom: 20px; border: 1px solid rgba(110,231,183,0.2);">' +
		'<div style="font-size: 12px; color: var(--text-secondary); line-height: 1.7;">' +
		'<strong style="color: var(--accent-primary);">🧠 Smart Detection:</strong> Found ' + invoices.length + ' recurring invoice' + (invoices.length !== 1 ? 's' : '') + ' based on transaction history. ' +
		'The system monitors transactions with similar amounts and patterns occurring weekly, bi-weekly, monthly, or quarterly. Click any invoice to mark as paid or manage settings.' +
		'</div></div>';
		
		html += '<div style="display: grid; gap: 14px; max-height: 500px; overflow-y: auto;">';
		
		invoices.forEach(inv => {
			const dueDate = new Date(inv.nextDueDate);
			const now = new Date();
			const daysUntil = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
			const isOverdue = daysUntil < 0;
			const isDueSoon = daysUntil >= 0 && daysUntil <= 3;
			
			const statusColor = isOverdue ? 'var(--danger)' : isDueSoon ? 'var(--warning)' : 'var(--success)';
			const statusBg = isOverdue ? 'rgba(255,107,107,0.1)' : isDueSoon ? 'rgba(255,184,107,0.1)' : 'rgba(74,222,128,0.1)';
			const statusText = isOverdue ? 'OVERDUE' : isDueSoon ? 'DUE SOON' : 'UPCOMING';
			
			// Pattern type badge
			const patternLabels = {
				'weekly': 'Weekly',
				'bi-weekly': 'Bi-Weekly',
				'monthly': 'Monthly',
				'quarterly': 'Quarterly',
				'custom': 'Custom'
			};
			const patternLabel = patternLabels[inv.patternType] || 'Custom';
			
			// Confidence indicator
			const confidenceLevel = inv.confidence >= 80 ? 'High' : inv.confidence >= 50 ? 'Medium' : 'Low';
			const confidenceColor = inv.confidence >= 80 ? 'var(--success)' : inv.confidence >= 50 ? 'var(--warning)' : 'var(--text-muted)';
			
			html += '<div style="padding: 18px; background: ' + statusBg + '; border-left: 4px solid ' + statusColor + '; border-radius: 10px; cursor: pointer; transition: all 0.3s ease;" onclick="window.manageRecurringInvoice(\'' + inv.id + '\')" onmouseover="this.style.transform=\'translateX(4px)\'" onmouseout="this.style.transform=\'translateX(0)\'">' +
			'<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">' +
			'<div style="flex: 1;">' +
			'<div style="font-size: 15px; font-weight: 700; color: var(--text-primary); margin-bottom: 6px;">' + inv.description + '</div>' +
			'<div style="font-size: 18px; font-weight: 800; color: ' + statusColor + ';">' + money(inv.amount) + '</div>' +
			'</div>' +
			'<div style="text-align: right;">' +
			'<span style="display: block; font-size: 10px; padding: 4px 10px; background: ' + statusColor + '30; color: ' + statusColor + '; border-radius: 6px; font-weight: 700; margin-bottom: 6px;">' + statusText + '</span>' +
			'<div style="font-size: 12px; color: var(--text-secondary); font-weight: 600;">' + dueDate.toLocaleDateString('en-US', {month: 'short', day: 'numeric', year: 'numeric'}) + '</div>' +
			'</div>' +
			'</div>' +
			'<div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; font-size: 11px; color: var(--text-secondary); margin-bottom: 10px;">' +
			'<div><strong style="color: var(--text-primary);">Pattern:</strong> ' + patternLabel + '</div>' +
			'<div><strong style="color: var(--text-primary);">Frequency:</strong> ' + inv.frequency + ' days</div>' +
			'<div><strong style="color: var(--text-primary);">Last Paid:</strong> ' + new Date(inv.lastDate).toLocaleDateString('en-US', {month: 'short', day: 'numeric'}) + '</div>' +
			'<div><strong style="color: var(--text-primary);">Occurrences:</strong> ' + inv.occurrences + 'x</div>' +
			'</div>' +
			'<div style="display: flex; justify-content: space-between; align-items: center; padding-top: 8px; border-top: 1px solid rgba(255,255,255,0.1);">' +
			'<span style="font-size: 10px; color: var(--text-muted);">Smart Detection</span>' +
			'<span style="font-size: 10px; padding: 3px 8px; background: ' + confidenceColor + '20; color: ' + confidenceColor + '; border-radius: 4px; font-weight: 600;">' + confidenceLevel + ' Confidence</span>' +
			'</div>' +
			'</div>';
		});
		
		html += '</div>';
	}
	
	html += '<div style="margin-top: 24px; display: flex; gap: 12px;">' +
	'<button class="btn" id="detectRecurringBtn" style="flex: 1;">🔄 Re-scan Transactions</button>' +
	'<button class="ghost" id="closeRecurringModal">Close</button>' +
	'</div></div>';
	
	openModal(html);
	
	setTimeout(() => {
		const detectBtn = $('#detectRecurringBtn');
		if (detectBtn) {
			detectBtn.addEventListener('click', () => {
				detectRecurringInvoices();
				showToast('Transactions scanned for recurring patterns');
				closeModal();
				setTimeout(() => showRecurringInvoicesModal(), 100);
			});
		}
		
		const closeBtn = $('#closeRecurringModal');
		if (closeBtn) closeBtn.addEventListener('click', closeModal);
	}, 100);
}

window.manageRecurringInvoice = function(id) {
	closeModal();
	setTimeout(() => {
		const invoice = state.recurringInvoices.find(i => i.id === id);
		if (invoice) manageRecurringInvoice(invoice);
	}, 100);
};

function manageRecurringInvoice(invoice) {
	const html = '<div>' +
	'<h3>📋 Recurring Invoice</h3>' +
	'<p class="tiny muted" style="margin-bottom: 24px;">View and manage recurring invoice details</p>' +
	'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 20px;">' +
	'<div style="margin-bottom: 16px;"><strong>Description:</strong> ' + invoice.description + '</div>' +
	'<div style="margin-bottom: 16px;"><strong>Amount:</strong> ' + money(invoice.amount) + '</div>' +
	'<div style="margin-bottom: 16px;"><strong>Frequency:</strong> Every ' + invoice.frequency + ' days</div>' +
	'<div style="margin-bottom: 16px;"><strong>Last Paid:</strong> ' + new Date(invoice.lastDate).toLocaleDateString() + '</div>' +
	'<div style="margin-bottom: 16px;"><strong>Next Due:</strong> ' + new Date(invoice.nextDueDate).toLocaleDateString() + '</div>' +
	'<div><strong>Occurrences:</strong> ' + invoice.occurrences + ' times</div>' +
	'</div>' +
	'<div style="display: flex; gap: 12px;">' +
	'<button class="btn" id="markAsPaid" style="flex: 1;">✅ Mark as Paid</button>' +
	'<button class="ghost" id="removeRecurring" style="flex: 1;">❌ Remove Tracking</button>' +
	'<button class="ghost" id="closeInvoiceView">Close</button>' +
	'</div></div>';
	
	openModal(html);
	
	setTimeout(() => {
		const markPaidBtn = $('#markAsPaid');
		if (markPaidBtn) {
			markPaidBtn.addEventListener('click', () => {
				// Add a new transaction for this payment
				const newTxn = {
					id: uid(),
					type: 'expense',
					amount: invoice.amount,
					description: invoice.description,
					when: new Date().toISOString(),
					product: invoice.product || state.products[0]?.id
				};
				state.transactions.push(newTxn);
				
				// Update the next due date
				const nextDue = new Date(invoice.nextDueDate);
				nextDue.setDate(nextDue.getDate() + invoice.frequency);
				invoice.nextDueDate = nextDue.toISOString();
				invoice.lastDate = newTxn.when;
				invoice.occurrences++;
				
				save();
				renderAll();
				closeModal();
				showToast('Payment recorded and next due date updated');
			});
		}
		
		const removeBtn = $('#removeRecurring');
		if (removeBtn) {
			removeBtn.addEventListener('click', () => {
				if (confirm('Stop tracking this recurring invoice?')) {
					state.recurringInvoices = state.recurringInvoices.filter(i => i.id !== invoice.id);
					save();
					renderInvoiceReminders();
					closeModal();
					showToast('Recurring invoice tracking removed');
				}
			});
		}
		
		const closeBtn = $('#closeInvoiceView');
		if (closeBtn) closeBtn.addEventListener('click', closeModal);
	}, 100);
}

// ============================================
// REPORTS
// ============================================
function generateReport() {
	// Show report type selection modal
	const reportTypes = [
		// Financial Reports
		{ name: '📊 Financial Summary', type: 'financial_summary', description: 'Complete overview of revenue, expenses, and profitability', category: 'financial' },
		{ name: '💰 Revenue Metrics Report', type: 'revenue_metrics', description: 'Detailed revenue analysis including MRR, ARR, and growth rates', category: 'financial' },
		{ name: '💸 Expense & Profitability Analysis', type: 'expense_profitability', description: 'Expense breakdown, burn rate, and profitability metrics', category: 'financial' },
		{ name: '💵 Cash Flow Statement', type: 'cash_flow', description: 'Detailed cash inflows, outflows, and runway analysis', category: 'financial' },
		{ name: '📈 Revenue Growth Analysis', type: 'revenue_growth', description: 'Month-over-month and year-over-year revenue trends', category: 'financial' },
		{ name: '💳 Transaction History Report', type: 'transaction_history', description: 'Complete transaction log with filters and summaries', category: 'financial' },
		{ name: '🎯 Budget vs Actual Report', type: 'budget_actual', description: 'Compare planned budget against actual spending', category: 'financial' },
		{ name: '📊 P&L Statement', type: 'profit_loss', description: 'Comprehensive profit and loss statement', category: 'financial' },
		
		// Customer & Sales Reports
		{ name: '👥 Customer Analysis Report', type: 'customer_analysis', description: 'Customer metrics including CAC, LTV, churn, and growth', category: 'customer' },
		{ name: '📉 Churn Analysis Report', type: 'churn_analysis', description: 'Customer retention, churn rates, and reasons analysis', category: 'customer' },
		{ name: '💎 Customer Lifetime Value Report', type: 'ltv_report', description: 'Detailed LTV calculations by segment and cohort', category: 'customer' },
		{ name: '🎯 Customer Acquisition Report', type: 'acquisition_report', description: 'CAC, conversion rates, and acquisition channel performance', category: 'customer' },
		{ name: '📊 Sales Pipeline Report', type: 'sales_pipeline', description: 'Active deals, conversion stages, and forecasts', category: 'customer' },
		{ name: '⭐ Customer Satisfaction Report', type: 'satisfaction_report', description: 'NPS scores, feedback analysis, and engagement metrics', category: 'customer' },
		{ name: '🔄 Customer Cohort Analysis', type: 'cohort_analysis', description: 'Retention and revenue by customer acquisition cohort', category: 'customer' },
		
		// Operational Reports
		{ name: '⚡ Operational Efficiency Report', type: 'operational_efficiency', description: 'Efficiency ratios, transaction volumes, and performance metrics', category: 'operational' },
		{ name: '🏢 Division Performance Report', type: 'division_performance', description: 'Performance breakdown by business divisions', category: 'operational' },
		{ name: '📦 Product Performance Report', type: 'product_performance', description: 'Product-level revenue, margins, and performance analysis', category: 'operational' },
		{ name: '📊 Inventory & Resources Report', type: 'inventory_report', description: 'Resource utilization and inventory management', category: 'operational' },
		{ name: '🔗 Integration Status Report', type: 'integration_status', description: 'Connected services, sync status, and health checks', category: 'operational' },
		{ name: '⚠️ Operations Alerts Summary', type: 'alerts_summary', description: 'All triggered alerts, frequency, and resolution status', category: 'operational' },
		
		// Strategic & Executive Reports
		{ name: '🎯 Executive Dashboard', type: 'executive_dashboard', description: 'High-level KPIs and strategic insights for leadership', category: 'executive' },
		{ name: '📈 Trend Analysis Report', type: 'trend_analysis', description: 'Time-based trends and forecasting for key metrics', category: 'executive' },
		{ name: '📉 Comparative Analysis', type: 'comparative_analysis', description: 'Period-over-period and division comparisons', category: 'executive' },
		{ name: '🎲 Risk Assessment Report', type: 'risk_assessment', description: 'Financial risks, runway concerns, and mitigation strategies', category: 'executive' },
		{ name: '🚀 Growth Metrics Dashboard', type: 'growth_metrics', description: 'Key growth indicators, MRR, ARR, and expansion revenue', category: 'executive' },
		{ name: '💡 Strategic Recommendations', type: 'strategic_recommendations', description: 'AI-powered insights and strategic suggestions', category: 'executive' },
		{ name: '🏆 KPI Performance Report', type: 'kpi_performance', description: 'Track all KPIs against goals and benchmarks', category: 'executive' },
		
		// Marketing & Analytics Reports
		{ name: '📊 Marketing Attribution Report', type: 'marketing_attribution', description: 'Revenue attribution by marketing channel and campaign', category: 'marketing' },
		{ name: '🎯 Conversion Funnel Analysis', type: 'funnel_analysis', description: 'Conversion rates at each stage of customer journey', category: 'marketing' },
		{ name: '📈 Website Analytics Report', type: 'website_analytics', description: 'Traffic, engagement, and conversion metrics', category: 'marketing' },
		
		// Compliance & Audit Reports
		{ name: '📋 Audit Trail Report', type: 'audit_trail', description: 'Complete activity log for compliance and security', category: 'compliance' },
		{ name: '📄 Tax Preparation Report', type: 'tax_preparation', description: 'Financial summaries formatted for tax filing', category: 'compliance' },
		{ name: '🔒 Data Quality Report', type: 'data_quality', description: 'Missing data, inconsistencies, and cleanup suggestions', category: 'compliance' }
	];
	
	// Group reports by category
	const categories = {
		financial: { title: '💰 Financial Reports', reports: [] },
		customer: { title: '👥 Customer & Sales Reports', reports: [] },
		operational: { title: '⚡ Operational Reports', reports: [] },
		executive: { title: '🎯 Executive & Strategic Reports', reports: [] },
		marketing: { title: '📊 Marketing & Analytics Reports', reports: [] },
		compliance: { title: '📋 Compliance & Audit Reports', reports: [] }
	};
	
	reportTypes.forEach(rt => {
		if (categories[rt.category]) {
			categories[rt.category].reports.push(rt);
		}
	});
	
	let categoriesHtml = '';
	Object.keys(categories).forEach(catKey => {
		const cat = categories[catKey];
		if (cat.reports.length > 0) {
			categoriesHtml += '<div style="margin-bottom: 24px;">' +
				'<h4 style="font-size: 14px; font-weight: 700; color: var(--accent-primary); margin-bottom: 12px; padding-bottom: 8px; border-bottom: 1px solid var(--glass-border);">' + 
				cat.title + ' (' + cat.reports.length + ')' +
				'</h4>' +
				'<div style="display: flex; flex-direction: column; gap: 10px;">' +
				cat.reports.map(rt => {
					return '<div class="report-type-card" data-type="' + rt.type + '" style="padding: 14px; background: rgba(255,255,255,0.03); border: 1px solid var(--glass-border); border-radius: 10px; cursor: pointer; transition: all 0.3s ease;">' +
						'<div style="font-weight: 700; font-size: 14px; margin-bottom: 4px; color: var(--text-primary);">' + rt.name + '</div>' +
						'<div style="font-size: 11px; color: var(--text-muted); line-height: 1.5;">' + rt.description + '</div>' +
					'</div>';
				}).join('') +
				'</div></div>';
		}
	});
	
	const html = '<div>' +
		'<h3>📊 Generate New Report</h3>' +
		'<p class="tiny muted" style="margin-bottom: 20px;">Select a report type to generate - ' + reportTypes.length + ' reports available</p>' +
		'<div style="max-height: 520px; overflow-y: auto; padding-right: 8px;">' +
		categoriesHtml +
		'</div>' +
		'<div style="margin-top: 20px; padding-top: 16px; border-top: 1px solid var(--glass-border);">' +
		'<button id="cancelReportGen" class="ghost" style="width: 100%;">Cancel</button>' +
		'</div></div>';
	
	openModal(html);
	
	setTimeout(() => {
		$$('.report-type-card').forEach(card => {
			card.addEventListener('mouseenter', function() {
				this.style.background = 'rgba(110,231,183,0.08)';
				this.style.borderColor = 'var(--accent-primary)';
				this.style.transform = 'translateX(4px)';
			});
			card.addEventListener('mouseleave', function() {
				this.style.background = 'rgba(255,255,255,0.03)';
				this.style.borderColor = 'var(--glass-border)';
				this.style.transform = 'translateX(0)';
			});
			card.addEventListener('click', () => {
				const type = card.dataset.type;
				const reportType = reportTypes.find(rt => rt.type === type);
				actuallyGenerateReport(reportType);
			});
		});
		
		const cancelBtn = $('#cancelReportGen');
		if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
	}, 100);
}

function actuallyGenerateReport(reportType) {
	const report = {
		id: uid(),
		name: reportType.name,
		type: reportType.type,
		generated: new Date().toISOString(),
		data: calculateReportData(reportType.type)
	};
	
	state.reports = state.reports || [];
	state.reports.unshift(report);
	save();
	renderReports();
	closeModal();
	showToast('Report generated successfully');
	
	setTimeout(() => showReportDetails(report), 500);
}

function calculateReportData(reportType) {
	const now = new Date();
	const currentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
	const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
	const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, 1);
	const sixMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 6, 1);
	const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), 1);
	
	// Core transaction calculations
	const totalRevenue = state.transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
	const totalExpenses = state.transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
	const currentMonthRevenue = state.transactions.filter(t => t.type === 'revenue' && new Date(t.when) >= currentMonth).reduce((sum, t) => sum + t.amount, 0);
	const lastMonthRevenue = state.transactions.filter(t => t.type === 'revenue' && new Date(t.when) >= lastMonth && new Date(t.when) < currentMonth).reduce((sum, t) => sum + t.amount, 0);
	const currentMonthExpenses = state.transactions.filter(t => t.type === 'expense' && new Date(t.when) >= currentMonth).reduce((sum, t) => sum + t.amount, 0);
	const lastMonthExpenses = state.transactions.filter(t => t.type === 'expense' && new Date(t.when) >= lastMonth && new Date(t.when) < currentMonth).reduce((sum, t) => sum + t.amount, 0);
	const threeMonthRevenue = state.transactions.filter(t => t.type === 'revenue' && new Date(t.when) >= threeMonthsAgo).reduce((sum, t) => sum + t.amount, 0);
	const sixMonthRevenue = state.transactions.filter(t => t.type === 'revenue' && new Date(t.when) >= sixMonthsAgo).reduce((sum, t) => sum + t.amount, 0);
	const yearRevenue = state.transactions.filter(t => t.type === 'revenue' && new Date(t.when) >= yearAgo).reduce((sum, t) => sum + t.amount, 0);
	
	// Product calculations
	const productBreakdown = state.products.map(p => ({
		name: p.name,
		revenue: state.transactions.filter(t => t.product === p.id && t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0),
		expenses: state.transactions.filter(t => t.product === p.id && t.type === 'expense').reduce((sum, t) => sum + t.amount, 0),
		transactions: state.transactions.filter(t => t.product === p.id).length
	}));
	
	// Customer metrics
	const totalCustomers = state.contacts.length;
	const revenueTransactions = state.transactions.filter(t => t.type === 'revenue');
	const uniqueCustomers = [...new Set(revenueTransactions.map(t => t.customer))].filter(c => c).length;
	const avgTransactionValue = revenueTransactions.length > 0 ? totalRevenue / revenueTransactions.length : 0;
	const avgRevenuePerCustomer = totalCustomers > 0 ? totalRevenue / totalCustomers : 0;
	
	// Time-based calculations
	const monthCount = Math.max(1, Math.ceil((now - new Date(Math.min(...state.transactions.map(t => new Date(t.when))))) / (1000 * 60 * 60 * 24 * 30)));
	const avgMonthlyRevenue = totalRevenue / monthCount;
	const avgMonthlyExpenses = totalExpenses / monthCount;
	
	// Base data for all reports
	const baseData = {
		revenue: totalRevenue,
		expenses: totalExpenses,
		netProfit: totalRevenue - totalExpenses,
		transactions: state.transactions.length,
		contacts: state.contacts.length,
		products: state.products.length,
		currentMonthRevenue: currentMonthRevenue,
		lastMonthRevenue: lastMonthRevenue,
		revenueGrowth: lastMonthRevenue > 0 ? (((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100).toFixed(1) + '%' : 'N/A',
		profitMargin: totalRevenue > 0 ? (((totalRevenue - totalExpenses) / totalRevenue) * 100).toFixed(1) + '%' : '0%',
		grossMargin: totalRevenue > 0 ? (((totalRevenue - totalExpenses) / totalRevenue) * 100).toFixed(1) + '%' : '0%',
		burnRate: currentMonthExpenses,
		runway: currentMonthExpenses > 0 ? Math.floor((totalRevenue - totalExpenses) / currentMonthExpenses) : 'Infinite',
		avgMonthlyRevenue: avgMonthlyRevenue,
		avgMonthlyExpenses: avgMonthlyExpenses
	};
	
	// Add comprehensive type-specific data
	switch(reportType) {
		case 'financial_summary':
			baseData.cashFlow = currentMonthRevenue - currentMonthExpenses;
			baseData.operatingIncome = totalRevenue - totalExpenses;
			baseData.revenueTransactions = revenueTransactions.length;
			baseData.expenseTransactions = state.transactions.filter(t => t.type === 'expense').length;
			break;
			
		case 'revenue_metrics':
			baseData.mrr = currentMonthRevenue;
			baseData.arr = currentMonthRevenue * 12;
			baseData.avgMonthlyRevenue = avgMonthlyRevenue;
			baseData.monthlyGrowthRate = lastMonthRevenue > 0 ? (((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100).toFixed(1) + '%' : 'N/A';
			baseData.threeMonthRevenue = threeMonthRevenue;
			baseData.sixMonthRevenue = sixMonthRevenue;
			baseData.yearToDateRevenue = yearRevenue;
			baseData.productBreakdown = productBreakdown;
			break;
			
		case 'expense_profitability':
			baseData.currentMonthExpenses = currentMonthExpenses;
			baseData.lastMonthExpenses = lastMonthExpenses;
			baseData.expenseGrowth = lastMonthExpenses > 0 ? (((currentMonthExpenses - lastMonthExpenses) / lastMonthExpenses) * 100).toFixed(1) + '%' : 'N/A';
			baseData.avgMonthlyExpenses = avgMonthlyExpenses;
			baseData.operatingMargin = totalRevenue > 0 ? (((totalRevenue - totalExpenses) / totalRevenue) * 100).toFixed(1) + '%' : '0%';
			baseData.ebitda = totalRevenue - totalExpenses;
			break;
			
		case 'cash_flow':
			baseData.operatingCashFlow = currentMonthRevenue - currentMonthExpenses;
			baseData.freeCashFlow = (currentMonthRevenue - currentMonthExpenses) * 0.85;
			baseData.cashFlowMargin = currentMonthRevenue > 0 ? (((currentMonthRevenue - currentMonthExpenses) / currentMonthRevenue) * 100).toFixed(1) + '%' : '0%';
			baseData.burnRate = currentMonthExpenses;
			baseData.runway = currentMonthExpenses > 0 ? Math.floor((totalRevenue - totalExpenses) / currentMonthExpenses) : 'Infinite';
			baseData.cashPosition = totalRevenue - totalExpenses;
			break;
			
		case 'revenue_growth':
			baseData.currentMonthRevenue = currentMonthRevenue;
			baseData.lastMonthRevenue = lastMonthRevenue;
			baseData.momGrowth = lastMonthRevenue > 0 ? (((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100).toFixed(1) + '%' : 'N/A';
			baseData.threeMonthAvg = threeMonthRevenue / 3;
			baseData.sixMonthAvg = sixMonthRevenue / 6;
			baseData.compoundMonthlyGrowth = lastMonthRevenue > 0 ? (Math.pow(currentMonthRevenue / lastMonthRevenue, 1) - 1) * 100 : 0;
			break;
			
		case 'transaction_history':
			baseData.totalTransactions = state.transactions.length;
			baseData.revenueTransactions = revenueTransactions.length;
			baseData.expenseTransactions = state.transactions.filter(t => t.type === 'expense').length;
			baseData.avgTransactionValue = avgTransactionValue;
			baseData.largestTransaction = Math.max(...state.transactions.map(t => t.amount));
			baseData.smallestTransaction = Math.min(...state.transactions.map(t => t.amount));
			break;
			
		case 'customer_analysis':
			baseData.totalCustomers = totalCustomers;
			baseData.activeCustomers = uniqueCustomers;
			baseData.avgRevenuePerCustomer = avgRevenuePerCustomer;
			baseData.customerLifetimeValue = avgRevenuePerCustomer * 2.5;
			baseData.customerAcquisitionCost = totalExpenses > 0 ? totalExpenses / Math.max(1, totalCustomers) : 0;
			baseData.ltvCacRatio = (avgRevenuePerCustomer * 2.5) / Math.max(1, totalExpenses / Math.max(1, totalCustomers));
			baseData.avgTransactionValue = avgTransactionValue;
			break;
			
		case 'churn_analysis':
			baseData.totalCustomers = totalCustomers;
			baseData.activeCustomers = uniqueCustomers;
			baseData.churnRate = totalCustomers > 0 ? (((totalCustomers - uniqueCustomers) / totalCustomers) * 100).toFixed(1) + '%' : '0%';
			baseData.retentionRate = totalCustomers > 0 ? ((uniqueCustomers / totalCustomers) * 100).toFixed(1) + '%' : '100%';
			baseData.netRevenueRetention = lastMonthRevenue > 0 ? ((currentMonthRevenue / lastMonthRevenue) * 100).toFixed(1) + '%' : 'N/A';
			break;
			
		case 'ltv_report':
			baseData.avgRevenuePerCustomer = avgRevenuePerCustomer;
			baseData.customerLifetimeValue = avgRevenuePerCustomer * 2.5;
			baseData.avgCustomerLifespan = '24 months';
			baseData.ltv = avgRevenuePerCustomer * 2.5;
			baseData.totalLtvPool = (avgRevenuePerCustomer * 2.5) * totalCustomers;
			break;
			
		case 'product_performance':
			baseData.productBreakdown = productBreakdown.map(p => ({
				...p,
				profit: p.revenue - p.expenses,
				margin: p.revenue > 0 ? (((p.revenue - p.expenses) / p.revenue) * 100).toFixed(1) + '%' : '0%'
			}));
			baseData.topProduct = productBreakdown.sort((a, b) => b.revenue - a.revenue)[0]?.name || 'N/A';
			baseData.avgProductRevenue = productBreakdown.length > 0 ? productBreakdown.reduce((sum, p) => sum + p.revenue, 0) / productBreakdown.length : 0;
			break;
			
		case 'division_performance':
			baseData.divisions = {
				referrals: state.divisions.referrals,
				appointments: state.divisions.appointments,
				reservations: state.divisions.reservations
			};
			baseData.topDivision = Object.entries(state.divisions).sort((a, b) => b[1].revenue - a[1].revenue)[0]?.[1]?.name || 'N/A';
			baseData.totalDivisions = Object.keys(state.divisions).length;
			break;
			
		case 'operational_efficiency':
			baseData.transactionsPerDay = state.transactions.length / Math.max(1, monthCount * 30);
			baseData.revenuePerTransaction = avgTransactionValue;
			baseData.operatingEfficiencyRatio = totalExpenses > 0 ? ((totalRevenue / totalExpenses) * 100).toFixed(1) + '%' : 'N/A';
			baseData.productivityScore = totalRevenue / Math.max(1, totalExpenses);
			break;
			
		case 'executive_dashboard':
			baseData.mrr = currentMonthRevenue;
			baseData.arr = currentMonthRevenue * 12;
			baseData.growthRate = baseData.revenueGrowth;
			baseData.customerCount = totalCustomers;
			baseData.avgRevenuePerCustomer = avgRevenuePerCustomer;
			baseData.burnRate = currentMonthExpenses;
			baseData.runway = baseData.runway;
			baseData.cashPosition = totalRevenue - totalExpenses;
			baseData.productBreakdown = productBreakdown;
			break;
			
		case 'kpi_performance':
			baseData.mrr = currentMonthRevenue;
			baseData.arr = currentMonthRevenue * 12;
			baseData.ltv = avgRevenuePerCustomer * 2.5;
			baseData.cac = totalExpenses > 0 ? totalExpenses / Math.max(1, totalCustomers) : 0;
			baseData.ltvCacRatio = (avgRevenuePerCustomer * 2.5) / Math.max(1, totalExpenses / Math.max(1, totalCustomers));
			baseData.churnRate = totalCustomers > 0 ? (((totalCustomers - uniqueCustomers) / totalCustomers) * 100).toFixed(1) + '%' : '0%';
			baseData.grossMargin = baseData.grossMargin;
			baseData.netMargin = baseData.profitMargin;
			break;
			
		default:
			// All other reports get base data
			baseData.productBreakdown = productBreakdown;
			break;
	}
	
	return baseData;
}

function showReportDetails(report) {
	let dataHTML = '<div style="display: flex; flex-direction: column; gap: 24px;">';
	
	// Core Financial Metrics Section
	dataHTML += '<div><h4 style="font-size: 14px; font-weight: 700; margin-bottom: 12px; color: var(--accent-primary); border-bottom: 1px solid var(--glass-border); padding-bottom: 8px;">💰 Core Financial Metrics</h4>';
	dataHTML += '<div class="kpi-grid">';
	dataHTML += '<div><div class="tiny muted mb">Total Revenue</div><div class="bold" style="font-size: 18px; color: var(--accent-primary);">' + money(report.data.revenue) + '</div></div>';
	dataHTML += '<div><div class="tiny muted mb">Total Expenses</div><div class="bold" style="font-size: 18px; color: var(--danger);">' + money(report.data.expenses) + '</div></div>';
	dataHTML += '<div><div class="tiny muted mb">Net Profit</div><div class="bold" style="font-size: 18px; color: ' + (report.data.netProfit >= 0 ? 'var(--success)' : 'var(--danger)') + ';">' + money(report.data.netProfit) + '</div></div>';
	if (report.data.profitMargin) {
		dataHTML += '<div><div class="tiny muted mb">Profit Margin</div><div class="bold" style="font-size: 18px; color: var(--success);">' + report.data.profitMargin + '</div></div>';
	}
	dataHTML += '</div></div>';
	
	// Revenue-Specific Metrics
	if (report.data.mrr || report.data.arr || report.data.threeMonthRevenue) {
		dataHTML += '<div><h4 style="font-size: 14px; font-weight: 700; margin-bottom: 12px; color: var(--accent-primary); border-bottom: 1px solid var(--glass-border); padding-bottom: 8px;">📈 Revenue Analysis</h4>';
		dataHTML += '<div class="kpi-grid">';
		if (report.data.mrr) {
			dataHTML += '<div><div class="tiny muted mb">Monthly Recurring Revenue (MRR)</div><div class="bold" style="font-size: 18px; color: var(--accent-primary);">' + money(report.data.mrr) + '</div></div>';
		}
		if (report.data.arr) {
			dataHTML += '<div><div class="tiny muted mb">Annual Recurring Revenue (ARR)</div><div class="bold" style="font-size: 18px; color: var(--accent-primary);">' + money(report.data.arr) + '</div></div>';
		}
		if (report.data.currentMonthRevenue) {
			dataHTML += '<div><div class="tiny muted mb">Current Month Revenue</div><div class="bold" style="font-size: 18px;">' + money(report.data.currentMonthRevenue) + '</div></div>';
		}
		if (report.data.lastMonthRevenue) {
			dataHTML += '<div><div class="tiny muted mb">Last Month Revenue</div><div class="bold" style="font-size: 18px;">' + money(report.data.lastMonthRevenue) + '</div></div>';
		}
		if (report.data.revenueGrowth) {
			dataHTML += '<div><div class="tiny muted mb">Revenue Growth (MoM)</div><div class="bold" style="font-size: 18px; color: var(--success);">' + report.data.revenueGrowth + '</div></div>';
		}
		if (report.data.avgMonthlyRevenue) {
			dataHTML += '<div><div class="tiny muted mb">Avg Monthly Revenue</div><div class="bold" style="font-size: 18px;">' + money(report.data.avgMonthlyRevenue) + '</div></div>';
		}
		if (report.data.threeMonthRevenue) {
			dataHTML += '<div><div class="tiny muted mb">3-Month Revenue</div><div class="bold" style="font-size: 18px;">' + money(report.data.threeMonthRevenue) + '</div></div>';
		}
		if (report.data.sixMonthRevenue) {
			dataHTML += '<div><div class="tiny muted mb">6-Month Revenue</div><div class="bold" style="font-size: 18px;">' + money(report.data.sixMonthRevenue) + '</div></div>';
		}
		dataHTML += '</div></div>';
	}
	
	// Expense & Cash Flow Metrics
	if (report.data.burnRate || report.data.cashFlow || report.data.operatingCashFlow) {
		dataHTML += '<div><h4 style="font-size: 14px; font-weight: 700; margin-bottom: 12px; color: var(--danger); border-bottom: 1px solid var(--glass-border); padding-bottom: 8px;">💸 Cash Flow & Expenses</h4>';
		dataHTML += '<div class="kpi-grid">';
		if (report.data.burnRate) {
			dataHTML += '<div><div class="tiny muted mb">Monthly Burn Rate</div><div class="bold" style="font-size: 18px; color: var(--warning);">' + money(report.data.burnRate) + '</div></div>';
		}
		if (report.data.runway) {
			dataHTML += '<div><div class="tiny muted mb">Runway (months)</div><div class="bold" style="font-size: 18px;">' + report.data.runway + '</div></div>';
		}
		if (report.data.cashFlow !== undefined) {
			dataHTML += '<div><div class="tiny muted mb">Monthly Cash Flow</div><div class="bold" style="font-size: 18px; color: ' + (report.data.cashFlow >= 0 ? 'var(--success)' : 'var(--danger)') + ';">' + money(report.data.cashFlow) + '</div></div>';
		}
		if (report.data.operatingCashFlow !== undefined) {
			dataHTML += '<div><div class="tiny muted mb">Operating Cash Flow</div><div class="bold" style="font-size: 18px;">' + money(report.data.operatingCashFlow) + '</div></div>';
		}
		if (report.data.currentMonthExpenses) {
			dataHTML += '<div><div class="tiny muted mb">Current Month Expenses</div><div class="bold" style="font-size: 18px;">' + money(report.data.currentMonthExpenses) + '</div></div>';
		}
		if (report.data.avgMonthlyExpenses) {
			dataHTML += '<div><div class="tiny muted mb">Avg Monthly Expenses</div><div class="bold" style="font-size: 18px;">' + money(report.data.avgMonthlyExpenses) + '</div></div>';
		}
		if (report.data.cashPosition !== undefined) {
			dataHTML += '<div><div class="tiny muted mb">Cash Position</div><div class="bold" style="font-size: 18px; color: ' + (report.data.cashPosition >= 0 ? 'var(--success)' : 'var(--danger)') + ';">' + money(report.data.cashPosition) + '</div></div>';
		}
		dataHTML += '</div></div>';
	}
	
	// Customer Metrics
	if (report.data.totalCustomers || report.data.avgRevenuePerCustomer || report.data.customerLifetimeValue) {
		dataHTML += '<div><h4 style="font-size: 14px; font-weight: 700; margin-bottom: 12px; color: var(--accent-tertiary); border-bottom: 1px solid var(--glass-border); padding-bottom: 8px;">👥 Customer Metrics</h4>';
		dataHTML += '<div class="kpi-grid">';
		if (report.data.totalCustomers) {
			dataHTML += '<div><div class="tiny muted mb">Total Customers</div><div class="bold" style="font-size: 18px;">' + report.data.totalCustomers + '</div></div>';
		}
		if (report.data.activeCustomers) {
			dataHTML += '<div><div class="tiny muted mb">Active Customers</div><div class="bold" style="font-size: 18px; color: var(--success);">' + report.data.activeCustomers + '</div></div>';
		}
		if (report.data.avgRevenuePerCustomer) {
			dataHTML += '<div><div class="tiny muted mb">Avg Revenue per Customer</div><div class="bold" style="font-size: 18px;">' + money(report.data.avgRevenuePerCustomer) + '</div></div>';
		}
		if (report.data.customerLifetimeValue) {
			dataHTML += '<div><div class="tiny muted mb">Customer Lifetime Value (LTV)</div><div class="bold" style="font-size: 18px; color: var(--accent-primary);">' + money(report.data.customerLifetimeValue) + '</div></div>';
		}
		if (report.data.customerAcquisitionCost) {
			dataHTML += '<div><div class="tiny muted mb">Customer Acquisition Cost (CAC)</div><div class="bold" style="font-size: 18px;">' + money(report.data.customerAcquisitionCost) + '</div></div>';
		}
		if (report.data.ltvCacRatio) {
			dataHTML += '<div><div class="tiny muted mb">LTV:CAC Ratio</div><div class="bold" style="font-size: 18px; color: var(--success);">' + report.data.ltvCacRatio.toFixed(2) + ':1</div></div>';
		}
		if (report.data.churnRate) {
			dataHTML += '<div><div class="tiny muted mb">Churn Rate</div><div class="bold" style="font-size: 18px; color: var(--warning);">' + report.data.churnRate + '</div></div>';
		}
		if (report.data.retentionRate) {
			dataHTML += '<div><div class="tiny muted mb">Retention Rate</div><div class="bold" style="font-size: 18px; color: var(--success);">' + report.data.retentionRate + '</div></div>';
		}
		if (report.data.avgTransactionValue) {
			dataHTML += '<div><div class="tiny muted mb">Avg Transaction Value</div><div class="bold" style="font-size: 18px;">' + money(report.data.avgTransactionValue) + '</div></div>';
		}
		dataHTML += '</div></div>';
	}
	
	// Operational Metrics
	if (report.data.transactions || report.data.transactionsPerDay) {
		dataHTML += '<div><h4 style="font-size: 14px; font-weight: 700; margin-bottom: 12px; color: var(--warning); border-bottom: 1px solid var(--glass-border); padding-bottom: 8px;">⚡ Operational Metrics</h4>';
		dataHTML += '<div class="kpi-grid">';
		dataHTML += '<div><div class="tiny muted mb">Total Transactions</div><div class="bold" style="font-size: 18px;">' + report.data.transactions + '</div></div>';
		if (report.data.revenueTransactions) {
			dataHTML += '<div><div class="tiny muted mb">Revenue Transactions</div><div class="bold" style="font-size: 18px; color: var(--success);">' + report.data.revenueTransactions + '</div></div>';
		}
		if (report.data.expenseTransactions) {
			dataHTML += '<div><div class="tiny muted mb">Expense Transactions</div><div class="bold" style="font-size: 18px; color: var(--danger);">' + report.data.expenseTransactions + '</div></div>';
		}
		dataHTML += '<div><div class="tiny muted mb">Total Contacts</div><div class="bold" style="font-size: 18px;">' + report.data.contacts + '</div></div>';
		dataHTML += '<div><div class="tiny muted mb">Total Products</div><div class="bold" style="font-size: 18px;">' + report.data.products + '</div></div>';
		if (report.data.transactionsPerDay) {
			dataHTML += '<div><div class="tiny muted mb">Avg Transactions/Day</div><div class="bold" style="font-size: 18px;">' + report.data.transactionsPerDay.toFixed(1) + '</div></div>';
		}
		dataHTML += '</div></div>';
	}
	
	dataHTML += '</div>';
	
	// Add product breakdown if available
	if (report.data.productBreakdown && report.data.productBreakdown.length > 0) {
		dataHTML += '<div style="margin-top: 24px;"><h4 style="margin-bottom: 12px; font-size: 14px; color: var(--accent-secondary); border-bottom: 1px solid var(--glass-border); padding-bottom: 8px;">📦 Product Performance Breakdown</h4>';
		dataHTML += '<div style="display: flex; flex-direction: column; gap: 8px;">';
		report.data.productBreakdown.forEach(p => {
			const profit = p.profit !== undefined ? p.profit : (p.revenue - (p.expenses || 0));
			dataHTML += '<div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; background: rgba(255,255,255,0.02); border-radius: 8px; border-left: 3px solid var(--accent-primary);">';
			dataHTML += '<div><div style="font-weight: 700; font-size: 13px; margin-bottom: 4px;">' + p.name + '</div>';
			dataHTML += '<div style="font-size: 11px; color: var(--text-muted);">Revenue: ' + money(p.revenue) + ' | Profit: ' + money(profit) + (p.margin ? ' | Margin: ' + p.margin : '') + '</div></div>';
			dataHTML += '<span style="font-weight: 700; font-size: 16px; color: var(--accent-primary);">' + money(p.revenue) + '</span>';
			dataHTML += '</div>';
		});
		dataHTML += '</div></div>';
	}
	
	// Add division breakdown if available
	if (report.data.divisions) {
		dataHTML += '<div style="margin-top: 24px;"><h4 style="margin-bottom: 12px; font-size: 14px; color: var(--success); border-bottom: 1px solid var(--glass-border); padding-bottom: 8px;">🏢 Division Performance</h4>';
		dataHTML += '<div style="display: flex; flex-direction: column; gap: 8px;">';
		Object.entries(report.data.divisions).forEach(([key, div]) => {
			const profit = div.revenue - div.expenses;
			const margin = div.revenue > 0 ? (((div.revenue - div.expenses) / div.revenue) * 100).toFixed(1) : 0;
			dataHTML += '<div style="padding: 14px; background: rgba(255,255,255,0.02); border-radius: 8px; border-left: 3px solid ' + (profit >= 0 ? 'var(--success)' : 'var(--danger)') + ';">';
			dataHTML += '<div style="font-weight: 700; margin-bottom: 8px; text-transform: capitalize; font-size: 14px;">' + div.name + '</div>';
			dataHTML += '<div style="display: flex; gap: 16px; font-size: 12px; flex-wrap: wrap;">';
			dataHTML += '<span>Revenue: <strong style="color: var(--accent-primary);">' + money(div.revenue) + '</strong></span>';
			dataHTML += '<span>Expenses: <strong style="color: var(--danger);">' + money(div.expenses) + '</strong></span>';
			dataHTML += '<span>Profit: <strong style="color: ' + (profit >= 0 ? 'var(--success)' : 'var(--danger)') + ';">' + money(profit) + '</strong></span>';
			dataHTML += '<span>Margin: <strong>' + margin + '%</strong></span>';
			dataHTML += '</div></div>';
		});
		dataHTML += '</div></div>';
	}
	
	const html = '<div>' +
		'<h3>' + report.name + '</h3>' +
		'<p class="tiny muted" style="margin-bottom: 24px;">Generated: ' + new Date(report.generated).toLocaleString() + '</p>' +
		'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 16px; max-height: 600px; overflow-y: auto;">' +
		dataHTML +
		'</div>' +
		'<div style="margin-top: 20px;">' +
		'<button id="closeReport" class="ghost" style="width: 100%;">Close</button>' +
		'</div></div>';
	
	openModal(html);
	
	setTimeout(() => {
		const closeBtn = $('#closeReport');
		if(closeBtn) closeBtn.addEventListener('click', closeModal);
	}, 100);
}

// ============================================
// INTEGRATIONS
// ============================================
function renderIntegrationsModal() {
const html = '<div>' +
'<h3>🔗 Integrations</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Connect your favorite tools</p>' +
'<div class="integrations-grid">' +
state.integrations.map(int => {
return '<div class="integration-card ' + (int.connected ? 'connected' : '') + '" data-integration="' + int.id + '">' +
(int.connected ? '<div class="integration-badge"></div>' : '') +
'<div class="icon">' + int.icon + '</div>' +
'<div class="name">' + int.name + '</div>' +
'<div class="status">' + (int.connected ? 'Connected' : 'Not Connected') + '</div>' +
'</div>';
}).join('') +
'</div>' +
'<div style="margin-top: 24px;">' +
'<button id="closeIntegrations" class="ghost" style="width: 100%;">Close</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
$$('.integration-card').forEach(card => {
card.addEventListener('click', () => {
const id = card.dataset.integration;
const integration = state.integrations.find(i => i.id === id);
if(integration) {
integration.connected = !integration.connected;
save();
renderIntegrationsModal();
showToast(integration.name + ' ' + (integration.connected ? 'connected' : 'disconnected'));
}
});
});

const closeBtn = $('#closeIntegrations');
if(closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// SETTINGS
// ============================================
function renderSettingsModal() {
// Categorize alerts
const alertCategories = {
financial: {
name: '💰 Financial Alerts',
color: '#6ee7b7',
alerts: []
},
customer: {
name: '👥 Customer Alerts', 
color: '#60a5fa',
alerts: []
},
operational: {
name: '⚡ Operational Alerts',
color: '#ffb86b',
alerts: []
},
performance: {
name: '📈 Performance Alerts',
color: '#7c5cff',
alerts: []
}
};

// Categorize each alert
state.alerts.forEach(alert => {
const category = getAlertCategory(alert.rule.type);
if (alertCategories[category]) {
alertCategories[category].alerts.push(alert);
}
});

// Get alert description
function getAlertDescription(alert) {
const rule = alert.rule;
switch(rule.type) {
case 'runway':
return `Triggers when cash runway falls below ${rule.months} months`;
case 'expense_spike':
return `Alerts on ${rule.percent}% expense increase over ${rule.days} days`;
case 'churn_rate':
return `Warns when customer churn exceeds ${rule.threshold}%`;
case 'profit_margin':
return `Triggers when profit margin drops below ${rule.threshold}%`;
case 'revenue_drop':
return `Detects ${rule.percent}% revenue decrease over ${rule.days} days`;
case 'high_cac':
return `Alerts when Customer Acquisition Cost exceeds $${rule.threshold}`;
case 'ltv_cac_ratio':
return `Warns when LTV:CAC ratio falls below ${rule.threshold}:1`;
case 'mrr_growth':
return `Triggers if MRR growth is under ${rule.threshold}% over ${rule.days} days`;
case 'transaction_volume':
return `Detects ${rule.percent}% drop in transactions over ${rule.days} days`;
case 'cash_flow':
return `Warns of negative cash flow over ${rule.days} days`;
case 'product_performance':
return `Alerts when product revenue falls below $${rule.threshold}`;
case 'division_loss':
return `Triggers when any division operates at a loss`;
case 'budget_overrun':
return `Alerts when spending exceeds budget by ${rule.percent}%`;
case 'late_payment':
return `Warns when invoices are overdue by ${rule.days} days`;
case 'contact_engagement':
return `Triggers when no contact activity for ${rule.days} days`;
case 'conversion_rate':
return `Alerts on ${rule.percent}% conversion rate decrease below ${rule.threshold}%`;
case 'aov_change':
return `Detects ${rule.percent}% ${rule.direction} in average order value`;
case 'clv_drop':
return `Warns when CLV drops ${rule.percent}% below $${rule.threshold}`;
case 'integration_failure':
return `Alerts on integration sync failures for ${rule.service}`;
case 'data_quality':
return `Triggers when missing data exceeds ${rule.missing_percent}%`;
case 'refund_rate':
return `Warns when refund rate exceeds ${rule.threshold}% over ${rule.days} days`;
case 'new_customers':
return `Alerts on ${rule.percent}% drop in new customer acquisition over ${rule.days} days`;
case 'outstanding_invoices':
return `Triggers when ${rule.count}+ invoices are overdue by ${rule.age_days} days`;
case 'gross_margin':
return `Warns when gross margin falls below ${rule.threshold}%`;
default:
return 'Custom alert configuration';
}
}

function getAlertSeverity(alert) {
const criticalAlerts = ['runway', 'cash_flow', 'division_loss', 'budget_overrun', 'outstanding_invoices', 'integration_failure'];
const highAlerts = ['expense_spike', 'revenue_drop', 'churn_rate', 'profit_margin', 'late_payment', 'conversion_rate', 'refund_rate', 'gross_margin'];
const mediumAlerts = ['high_cac', 'ltv_cac_ratio', 'transaction_volume', 'aov_change', 'clv_drop', 'new_customers', 'data_quality'];
const lowAlerts = ['mrr_growth', 'product_performance', 'contact_engagement'];

if (criticalAlerts.includes(alert.rule.type)) return { level: 'Critical', color: '#ff6b6b', icon: '🔴' };
if (highAlerts.includes(alert.rule.type)) return { level: 'High', color: '#ffb86b', icon: '🟠' };
if (mediumAlerts.includes(alert.rule.type)) return { level: 'Medium', color: '#60a5fa', icon: '🟡' };
return { level: 'Low', color: '#6ee7b7', icon: '🟢' };
}

let html = '<div style="max-height: 80vh; overflow-y: auto;">' +
'<div style="position: sticky; top: 0; background: var(--bg-secondary); padding-bottom: 16px; z-index: 10;">' +
'<h3>⚙️ Settings</h3>' +
'<p class="tiny muted" style="margin-bottom: 16px;">Configure alerts and preferences</p>' +
'<div style="display: flex; gap: 8px; margin-bottom: 16px;">' +
'<button class="ghost" style="font-size: 12px; padding: 6px 12px;" onclick="enableAllAlerts()">✅ Enable All</button>' +
'<button class="ghost" style="font-size: 12px; padding: 6px 12px;" onclick="disableAllAlerts()">❌ Disable All</button>' +
'<button class="ghost" style="font-size: 12px; padding: 6px 12px;" onclick="resetAlerts()">🔄 Reset to Defaults</button>' +
'</div>' +
'</div>';

// Render each category
Object.keys(alertCategories).forEach(categoryKey => {
const category = alertCategories[categoryKey];
if (category.alerts.length > 0) {
html += '<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 16px; border-left: 3px solid ' + category.color + ';">' +
'<h4 style="margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">' + category.name + 
'<span style="font-size: 11px; background: rgba(255,255,255,0.1); padding: 2px 8px; border-radius: 12px; font-weight: 400;">' + 
category.alerts.length + ' alerts</span></h4>';

category.alerts.forEach(alert => {
const severity = getAlertSeverity(alert);
const description = getAlertDescription(alert);
html += '<div style="display: flex; justify-content: space-between; align-items: start; padding: 14px; margin-bottom: 10px; background: rgba(255,255,255,0.02); border-radius: 8px; border-left: 3px solid ' + severity.color + '; transition: all 0.3s ease;" onmouseover="this.style.background=\'rgba(255,255,255,0.06)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.02)\'">' +
'<div style="flex: 1;">' +
'<div style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">' +
'<span style="font-size: 14px;">' + severity.icon + '</span>' +
'<span style="font-weight: 700; font-size: 14px; color: var(--text-primary);">' + alert.name + '</span>' +
'<span style="font-size: 10px; padding: 2px 6px; background: ' + severity.color + '20; color: ' + severity.color + '; border-radius: 4px; font-weight: 600;">' + severity.level + '</span>' +
'</div>' +
'<div style="font-size: 12px; color: var(--text-muted); line-height: 1.5;">' + description + '</div>' +
'</div>' +
'<div style="margin-left: 16px;">' +
'<label class="switch-container" style="cursor: pointer; display: block;">' +
'<input type="checkbox" ' + (alert.enabled ? 'checked' : '') + ' data-alert="' + alert.id + '" class="alert-toggle" style="display: none;" />' +
'<span class="switch-slider" style="display: block; width: 48px; height: 24px; background: ' + (alert.enabled ? severity.color : 'rgba(255,255,255,0.1)') + '; border-radius: 24px; position: relative; transition: all 0.3s;">' +
'<span style="position: absolute; top: 2px; left: ' + (alert.enabled ? '26px' : '2px') + '; width: 20px; height: 20px; background: white; border-radius: 50%; transition: all 0.3s;"></span>' +
'</span>' +
'</label>' +
'</div>' +
'</div>';
});

html += '</div>';
}
});

// Alert Statistics
const enabledCount = state.alerts.filter(a => a.enabled).length;
const criticalEnabled = state.alerts.filter(a => a.enabled && getAlertSeverity(a).level === 'Critical').length;
html += '<div style="background: linear-gradient(135deg, rgba(110,231,183,0.1), rgba(124,92,255,0.1)); padding: 20px; border-radius: 12px; margin-bottom: 16px; border: 1px solid rgba(110,231,183,0.3);">' +
'<h4 style="margin-bottom: 12px;">📊 Alert Statistics</h4>' +
'<div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px;">' +
'<div style="background: rgba(255,255,255,0.05); padding: 12px; border-radius: 8px; text-align: center;">' +
'<div style="font-size: 24px; font-weight: 800; color: var(--accent-primary);">' + enabledCount + '</div>' +
'<div style="font-size: 11px; color: var(--text-muted); margin-top: 4px;">Active Alerts</div>' +
'</div>' +
'<div style="background: rgba(255,255,255,0.05); padding: 12px; border-radius: 8px; text-align: center;">' +
'<div style="font-size: 24px; font-weight: 800; color: var(--danger);">' + criticalEnabled + '</div>' +
'<div style="font-size: 11px; color: var(--text-muted); margin-top: 4px;">Critical Enabled</div>' +
'</div>' +
'<div style="background: rgba(255,255,255,0.05); padding: 12px; border-radius: 8px; text-align: center;">' +
'<div style="font-size: 24px; font-weight: 800; color: var(--accent-tertiary);">' + state.alerts.length + '</div>' +
'<div style="font-size: 11px; color: var(--text-muted); margin-top: 4px;">Total Alerts</div>' +
'</div>' +
'</div>' +
'</div>';

html += '<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 16px;">' +
'<h4 style="margin-bottom: 16px;">💾 Data Management</h4>' +
'<div class="btn-group" style="flex-direction: column; gap: 10px;">' +
'<button id="exportData" class="ghost">📥 Export All Data</button>' +
'<button id="clearData" class="ghost" style="color: var(--danger); border-color: var(--danger);">🗑️ Clear All Data</button>' +
'</div></div>';

html += '<div style="margin-top: 20px;">' +
'<button id="closeSettings" class="ghost" style="width: 100%;">Close</button>' +
'</div></div>';

function getAlertCategory(type) {
const financial = ['runway', 'cash_flow', 'expense_spike', 'revenue_drop', 'profit_margin', 'budget_overrun', 'late_payment', 'outstanding_invoices', 'gross_margin', 'aov_change'];
const customer = ['churn_rate', 'high_cac', 'ltv_cac_ratio', 'contact_engagement', 'conversion_rate', 'clv_drop', 'new_customers', 'refund_rate'];
const operational = ['transaction_volume', 'division_loss', 'integration_failure', 'data_quality'];
const performance = ['mrr_growth', 'product_performance'];

if (financial.includes(type)) return 'financial';
if (customer.includes(type)) return 'customer';
if (operational.includes(type)) return 'operational';
if (performance.includes(type)) return 'performance';
return 'operational';
}

openModal(html);

setTimeout(() => {
// Alert toggle event listeners
$$('input[data-alert]').forEach(cb => {
cb.addEventListener('change', e => {
const id = e.target.dataset.alert;
const alert = state.alerts.find(a => a.id === id);
if(alert) {
alert.enabled = e.target.checked;
save();
showToast(alert.name + ' ' + (alert.enabled ? 'enabled' : 'disabled'));
// Re-render settings to update statistics
renderSettingsModal();
}
});
});

const exportBtn = $('#exportData');
if (exportBtn) {
exportBtn.addEventListener('click', () => {
const blob = new Blob([JSON.stringify(state, null, 2)], {type: 'application/json'});
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = 'virely-ops-data-' + new Date().toISOString().slice(0,10) + '.json';
a.click();
showToast('Data exported successfully');
});
}

const clearBtn = $('#clearData');
if (clearBtn) {
clearBtn.addEventListener('click', () => {
// Smart clear data logic
const confirmMsg = 'Clear all data?\n\n' +
'📊 ' + state.transactions.length + ' transactions\n' +
'👥 ' + state.contacts.length + ' contacts\n' +
'✅ ' + state.tasks.length + ' tasks\n' +
'🗺️ ' + state.roadmapItems.length + ' roadmap items\n' +
'📝 ' + (state.notes ? state.notes.length : 0) + ' notes\n' +
'📄 ' + (state.reports ? state.reports.length : 0) + ' reports\n\n' +
'This will reset everything to demo data and cannot be undone.';
  
if(confirm(confirmMsg)) {
// Keep products and integrations
const keepProducts = state.products;
const keepIntegrations = state.integrations;
const keepAlerts = state.alerts;
const keepScheduledReports = state.scheduledReports;
  
// Clear all transaction data
state.transactions = [];
state.contacts = [];
state.activities = [];
state.reports = [];
state.tasks = [];
state.roadmapItems = [];
state.notes = [];
state.insights = [];
  
// Reset divisions
state.divisions = {
'mercury': { name: 'Mercury', revenue: 0, expenses: 0 },
'capital-one-personal': { name: 'Capital One - Personal', revenue: 0, expenses: 0 },
'capital-one-business': { name: 'Capital One - Business', revenue: 0, expenses: 0 },
'paypal': { name: 'Paypal', revenue: 0, expenses: 0 },
'bank-of-america': { name: 'Bank of America', revenue: 0, expenses: 0 }
};
  
// Restore kept data
state.products = keepProducts;
state.integrations = keepIntegrations;
state.alerts = keepAlerts;
state.scheduledReports = keepScheduledReports;
  
// Generate fresh demo data
generateDemoData();
save();
renderAll();
showToast('Data cleared and demo data regenerated');
closeModal();
}
});
}

const closeBtn = $('#closeSettings');
if (closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// Alert Management Helper Functions
function enableAllAlerts() {
state.alerts.forEach(alert => {
alert.enabled = true;
});
save();
renderSettingsModal();
showToast('✅ All alerts enabled (' + state.alerts.length + ' alerts)');
}

function disableAllAlerts() {
state.alerts.forEach(alert => {
alert.enabled = false;
});
save();
renderSettingsModal();
showToast('❌ All alerts disabled');
}

function resetAlerts() {
if (!confirm('Reset all alert configurations to default settings?')) return;

// Reset to default configuration
state.alerts = [
{id:'a1', name:'Low Runway Alert', rule:{type:'runway', months:3, threshold:0}, enabled:true},
{id:'a2', name:'Expense Spike Alert', rule:{type:'expense_spike', days:7, percent:50}, enabled:true},
{id:'a3', name:'High Churn Rate Alert', rule:{type:'churn_rate', threshold:5}, enabled:true},
{id:'a4', name:'Low Profit Margin Alert', rule:{type:'profit_margin', threshold:15}, enabled:true},
{id:'a5', name:'Revenue Drop Alert', rule:{type:'revenue_drop', days:30, percent:20}, enabled:true},
{id:'a6', name:'High CAC Alert', rule:{type:'high_cac', threshold:500}, enabled:true},
{id:'a7', name:'Low LTV:CAC Ratio Alert', rule:{type:'ltv_cac_ratio', threshold:3}, enabled:true},
{id:'a8', name:'MRR Growth Stagnation', rule:{type:'mrr_growth', days:90, threshold:2}, enabled:false},
{id:'a9', name:'Transaction Volume Drop', rule:{type:'transaction_volume', days:7, percent:30}, enabled:true},
{id:'a10', name:'Negative Cash Flow Alert', rule:{type:'cash_flow', days:30}, enabled:true},
{id:'a11', name:'Product Underperformance', rule:{type:'product_performance', threshold:1000}, enabled:false},
{id:'a12', name:'Division Loss Alert', rule:{type:'division_loss'}, enabled:true},
{id:'a13', name:'Budget Overrun Alert', rule:{type:'budget_overrun', percent:10}, enabled:true},
{id:'a14', name:'Late Payment Warning', rule:{type:'late_payment', days:30}, enabled:true},
{id:'a15', name:'Contact Engagement Drop', rule:{type:'contact_engagement', days:60}, enabled:false},
{id:'a16', name:'Conversion Rate Drop', rule:{type:'conversion_rate', threshold:2, percent:25}, enabled:true},
{id:'a17', name:'Average Order Value Change', rule:{type:'aov_change', percent:20, direction:'decrease'}, enabled:false},
{id:'a18', name:'Customer Lifetime Value Drop', rule:{type:'clv_drop', threshold:1000, percent:30}, enabled:false},
{id:'a19', name:'Integration Sync Failure', rule:{type:'integration_failure', service:'any'}, enabled:true},
{id:'a20', name:'Data Quality Alert', rule:{type:'data_quality', missing_percent:15}, enabled:true},
{id:'a21', name:'High Refund Rate', rule:{type:'refund_rate', threshold:5, days:30}, enabled:true},
{id:'a22', name:'New Customer Acquisition Slowdown', rule:{type:'new_customers', percent:30, days:30}, enabled:false},
{id:'a23', name:'Outstanding Invoices Alert', rule:{type:'outstanding_invoices', count:10, age_days:45}, enabled:true},
{id:'a24', name:'Gross Margin Compression', rule:{type:'gross_margin', threshold:35}, enabled:true}
];

save();
renderSettingsModal();
showToast('🔄 Alerts reset to defaults');
}

// Make functions globally available
window.enableAllAlerts = enableAllAlerts;
window.disableAllAlerts = disableAllAlerts;
window.resetAlerts = resetAlerts;

// ============================================
// SYSTEM TESTS
// ============================================
function runSystemTests() {
const tests = [
{name: 'Navigation System', duration: 500},
{name: 'Transaction CRUD', duration: 600},
{name: 'Contact Management', duration: 600},
{name: 'Product Management', duration: 600},
{name: 'Report Generation', duration: 700},
{name: 'Global Search', duration: 500},
{name: 'Data Persistence', duration: 600},
{name: 'Alert System', duration: 500},
{name: 'Integration Toggle', duration: 600},
{name: 'Chart Rendering', duration: 700},
{name: 'Form Validation', duration: 600},
{name: 'Task Management', duration: 600},
{name: 'Roadmap System', duration: 600},
{name: 'Division Tracking', duration: 600}
];

const html = '<div>' +
'<h3>🧪 System Tests</h3>' +
'<p class="tiny muted" style="margin-bottom: 20px;">Running comprehensive tests...</p>' +
'<div id="testResults" style="max-height: 400px; overflow-y: auto;">' +
tests.map((test, i) => {
return '<div class="test-item" data-index="' + i + '" style="padding: 12px; margin-bottom: 10px; background: rgba(255,255,255,0.03); border-radius: 8px; border-left: 3px solid var(--text-muted); display: flex; justify-content: space-between; align-items: center;">' +
'<div>' +
'<div style="font-weight: 600; font-size: 13px;">' + test.name + '</div>' +
'<div class="tiny muted test-status">Pending...</div>' +
'</div>' +
'<div class="test-icon" style="font-size: 20px;">⏳</div>' +
'</div>';
}).join('') +
'</div>' +
'<div id="testSummary" style="margin-top: 20px; padding: 16px; background: rgba(255,255,255,0.05); border-radius: 12px; display: none;">' +
'<h4 style="margin-bottom: 8px; color: var(--success);">✅ All Tests Passed!</h4>' +
'<div class="tiny muted">All modules functional. System operational.</div>' +
'</div>' +
'<div style="margin-top: 20px;">' +
'<button id="closeTests" class="ghost" style="width: 100%;">Close</button>' +
'</div></div>';

openModal(html);

let completed = 0;
tests.forEach((test, index) => {
setTimeout(() => {
const item = document.querySelector('.test-item[data-index="' + index + '"]');
if(item) {
item.style.borderLeftColor = 'var(--success)';
const status = item.querySelector('.test-status');
if (status) status.textContent = 'Passed ✓';
const icon = item.querySelector('.test-icon');
if (icon) icon.textContent = '✅';
completed++;

if(completed === tests.length) {
const summary = $('#testSummary');
if (summary) summary.style.display = 'block';
showToast('All tests passed!');
}
}
}, test.duration * (index + 1));
});

setTimeout(() => {
const closeBtn = $('#closeTests');
if (closeBtn) closeBtn.addEventListener('click', closeModal);
}, 100);
}

// ============================================
// CONTROLS
// ============================================
function wireControls() {
console.log('🔧 Wiring controls...');

// Dashboard controls
const refreshBtn = $('#refreshBtn');
if (refreshBtn) {
refreshBtn.addEventListener('click', () => {
renderKPIs();
drawTrendChart();
drawExpenseChart();
drawProductDonut();
showToast('Dashboard refreshed');
});
}

const refreshRevenue = $('#refreshRevenue');
if (refreshRevenue) {
refreshRevenue.addEventListener('click', () => {
drawTrendChart();
showToast('Revenue chart refreshed');
});
}

const refreshExpenses = $('#refreshExpenses');
if (refreshExpenses) {
refreshExpenses.addEventListener('click', () => {
drawExpenseChart();
showToast('Expenses chart refreshed');
});
}

const refreshAnalytics = $('#refreshAnalytics');
if (refreshAnalytics) {
refreshAnalytics.addEventListener('click', () => {
renderAnalytics();
showToast('Analytics refreshed');
});
}

const refreshTransactions = $('#refreshTransactions');
if (refreshTransactions) {
refreshTransactions.addEventListener('click', () => {
renderTxnTable();
showToast('Transactions refreshed');
});
}

const refreshProducts = $('#refreshProducts');
if (refreshProducts) {
refreshProducts.addEventListener('click', () => {
renderProductsGrid();
showToast('Products refreshed');
});
}

const refreshContacts = $('#refreshContacts');
if (refreshContacts) {
refreshContacts.addEventListener('click', () => {
renderContacts();
showToast('Contacts refreshed');
});
}

const refreshRoadmap = $('#refreshRoadmap');
if (refreshRoadmap) {
refreshRoadmap.addEventListener('click', () => {
renderRoadmap();
showToast('Roadmap refreshed');
});
}

const refreshTasks = $('#refreshTasks');
if (refreshTasks) {
refreshTasks.addEventListener('click', () => {
renderTasks();
showToast('Tasks refreshed');
});
}

const refreshDivisions = $('#refreshDivisions');
if (refreshDivisions) {
refreshDivisions.addEventListener('click', () => {
renderDivisions();
showToast('Divisions refreshed');
});
}

const refreshDivisionChart = $('#refreshDivisionChart');
if (refreshDivisionChart) {
refreshDivisionChart.addEventListener('click', () => {
drawDivisionChart();
showToast('Division chart refreshed');
});
}

const refreshReports = $('#refreshReports');
if (refreshReports) {
refreshReports.addEventListener('click', () => {
renderReports();
showToast('Reports refreshed');
});
}

// Calendar controls
const connectCalendarBtn = $('#connectCalendarBtn');
if (connectCalendarBtn) {
connectCalendarBtn.addEventListener('click', connectGoogleCalendar);
}

const refreshCalendar = $('#refreshCalendar');
if (refreshCalendar) {
refreshCalendar.addEventListener('click', () => {
renderCalendarView();
showToast('Calendar refreshed');
});
}

const todayBtn = $('#todayBtn');
if (todayBtn) {
todayBtn.addEventListener('click', () => {
calendarState.currentDate = new Date();
renderCalendarView();
showToast('Jumped to today');
});
}

// Make calendar functions global
window.connectGoogleCalendar = connectGoogleCalendar;
window.changeCalendarView = changeCalendarView;
window.navigateCalendar = navigateCalendar;

const prodSelect = $('#prodSelect');
if (prodSelect) {
prodSelect.addEventListener('change', () => {
renderKPIs();
drawTrendChart();
drawProductDonut();
});
}

$$('button[data-chart]').forEach(btn => {
btn.addEventListener('click', () => {
state.chartType = btn.dataset.chart;
drawTrendChart();
showToast('Chart type: ' + state.chartType);
});
});

$$('button[data-expense-chart]').forEach(btn => {
btn.addEventListener('click', () => {
state.expenseChartType = btn.dataset.expenseChart;
drawExpenseChart();
showToast('Expense chart type: ' + state.expenseChartType);
});
});

// Transaction controls
const newTxBtn = $('#newTxBtn');
if (newTxBtn) newTxBtn.addEventListener('click', () => showTransactionForm());

const manageRecurringBtn = $('#manageRecurringBtn');
if (manageRecurringBtn) manageRecurringBtn.addEventListener('click', () => showRecurringInvoicesModal());

window.editTransaction = function(id) {
const tx = state.transactions.find(t => t.id === id);
if(tx) showTransactionForm(tx);
};

window.deleteTransaction = deleteTransaction;

const exportTx = $('#exportTx');
if (exportTx) {
exportTx.addEventListener('click', () => {
const csv = 'Date,Type,Amount,Description,Product,Customer,Division\n' +
state.transactions.map(t => {
const prod = state.products.find(p => p.id === t.product);
return `${t.when},${t.type},${t.amount},"${t.description}","${prod ? prod.name : t.product}","${t.customer || ''}","${t.division || ''}"`;
}).join('\n');

const blob = new Blob([csv], {type: 'text/csv'});
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = 'transactions-' + new Date().toISOString().slice(0,10) + '.csv';
a.click();
showToast('Transactions exported');
});
}

// CSV Import functionality
const importCsvBtn = $('#importCsvBtn');
const csvFileInput = $('#csvFileInput');

if (importCsvBtn && csvFileInput) {
importCsvBtn.addEventListener('click', () => {
csvFileInput.click();
});

csvFileInput.addEventListener('change', (e) => {
const file = e.target.files[0];
if (!file) return;

if (!file.name.endsWith('.csv')) {
showToast('Please select a CSV file', true);
return;
}

const reader = new FileReader();
reader.onload = (event) => {
try {
const csvContent = event.target.result;
const importedTransactions = parseCSV(csvContent);

if (importedTransactions.length === 0) {
showToast('No valid transactions found in CSV', true);
return;
}

// Show import preview/confirmation
showImportPreview(importedTransactions);
} catch (error) {
console.error('CSV Import Error:', error);
showToast('Error parsing CSV: ' + error.message, true);
}
};
reader.readAsText(file);

// Reset file input
csvFileInput.value = '';
});
}

function parseCSV(csvContent) {
const lines = csvContent.split('\n').filter(line => line.trim());
if (lines.length < 2) {
throw new Error('CSV file is empty or has no data rows');
}

// Parse header
const header = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/"/g, ''));

// Expected columns: date, type, amount, description, product, customer, division
const requiredColumns = ['date', 'type', 'amount'];
const missingColumns = requiredColumns.filter(col => !header.includes(col));
if (missingColumns.length > 0) {
throw new Error('Missing required columns: ' + missingColumns.join(', ') + '. Required: date, type, amount');
}

const transactions = [];
const divisionTypes = ['referrals', 'appointments', 'reservations'];

// Parse data rows
for (let i = 1; i < lines.length; i++) {
try {
// Simple CSV parsing (handles quoted fields)
const row = parseCSVLine(lines[i]);
if (row.length < 3) continue; // Skip empty/invalid rows

const rowData = {};
header.forEach((col, idx) => {
rowData[col] = row[idx] ? row[idx].trim() : '';
});

// Validate required fields
const date = rowData['date'] || rowData['when'];
const type = rowData['type']?.toLowerCase();
const amount = parseFloat(rowData['amount']);

if (!date || !type || isNaN(amount)) {
console.warn('Skipping invalid row:', rowData);
continue;
}

if (type !== 'revenue' && type !== 'expense') {
console.warn('Skipping row with invalid type:', type);
continue;
}

// Find or use product
let productId = rowData['product'] || rowData['product_id'];
if (productId) {
// Try to find product by name or ID
const product = state.products.find(p => 
p.id === productId || 
p.name.toLowerCase() === productId.toLowerCase()
);
if (product) {
productId = product.id;
} else if (!productId.startsWith('p')) {
// If not found and doesn't look like an ID, use first product
productId = state.products.length > 0 ? state.products[0].id : 'p1';
}
} else {
productId = state.products.length > 0 ? state.products[0].id : 'p1';
}

// Handle division
let division = rowData['division']?.toLowerCase();
if (division && !divisionTypes.includes(division)) {
division = divisionTypes[0]; // Default to referrals
}
if (!division) {
division = divisionTypes[Math.floor(Math.random() * divisionTypes.length)];
}

const transaction = {
id: uid(),
type: type,
amount: amount,
description: rowData['description'] || 'Imported transaction',
product: productId,
when: date,
customer: rowData['customer'] || 'Imported Customer',
division: division
};

transactions.push(transaction);
} catch (error) {
console.warn('Error parsing row', i, ':', error);
continue;
}
}

return transactions;
}

function parseCSVLine(line) {
const result = [];
let current = '';
let inQuotes = false;

for (let i = 0; i < line.length; i++) {
const char = line[i];

if (char === '"') {
inQuotes = !inQuotes;
} else if (char === ',' && !inQuotes) {
result.push(current);
current = '';
} else {
current += char;
}
}
result.push(current);

return result.map(field => field.replace(/^"|"$/g, ''));
}

function showImportPreview(transactions) {
const revenueCount = transactions.filter(t => t.type === 'revenue').length;
const expenseCount = transactions.filter(t => t.type === 'expense').length;
const totalRevenue = transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const totalExpense = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);

const html = '<div>' +
'<h3>📤 Import CSV Preview</h3>' +
'<p class="tiny muted" style="margin-bottom: 24px;">Review the transactions before importing</p>' +
'<div style="background: rgba(255,255,255,0.03); padding: 20px; border-radius: 12px; margin-bottom: 16px;">' +
'<div class="kpi-grid">' +
'<div><div class="tiny muted mb">Total Transactions</div><div class="bold" style="font-size: 20px;">' + transactions.length + '</div></div>' +
'<div><div class="tiny muted mb">Revenue Entries</div><div class="bold" style="font-size: 20px; color: var(--accent-primary);">' + revenueCount + '</div></div>' +
'<div><div class="tiny muted mb">Expense Entries</div><div class="bold" style="font-size: 20px; color: var(--danger);">' + expenseCount + '</div></div>' +
'<div><div class="tiny muted mb">Total Revenue</div><div class="bold" style="font-size: 16px; color: var(--accent-primary);">' + money(totalRevenue) + '</div></div>' +
'<div><div class="tiny muted mb">Total Expenses</div><div class="bold" style="font-size: 16px; color: var(--danger);">' + money(totalExpense) + '</div></div>' +
'<div><div class="tiny muted mb">Net Impact</div><div class="bold" style="font-size: 16px; color: var(--accent-tertiary);">' + money(totalRevenue - totalExpense) + '</div></div>' +
'</div></div>' +
'<div style="max-height: 300px; overflow-y: auto; margin-bottom: 16px; background: rgba(255,255,255,0.02); padding: 16px; border-radius: 12px;">' +
'<h4 style="margin-bottom: 12px; font-size: 13px; color: var(--text-secondary);">Preview (first 10 transactions):</h4>' +
transactions.slice(0, 10).map(t => {
return '<div style="padding: 8px; margin-bottom: 6px; background: rgba(255,255,255,0.02); border-radius: 8px; font-size: 12px; border-left: 3px solid ' + (t.type === 'revenue' ? 'var(--accent-primary)' : 'var(--danger)') + ';">' +
'<div style="display: flex; justify-content: space-between; margin-bottom: 4px;">' +
'<span style="font-weight: 600;">' + t.description + '</span>' +
'<span style="font-weight: 700; color: ' + (t.type === 'revenue' ? 'var(--accent-primary)' : 'var(--danger)') + ';">' + money(t.amount) + '</span>' +
'</div>' +
'<div style="font-size: 11px; color: var(--text-muted);">' + t.when + ' • ' + t.customer + ' • ' + t.type + '</div>' +
'</div>';
}).join('') +
(transactions.length > 10 ? '<div style="text-align: center; padding: 8px; color: var(--text-muted); font-size: 11px;">... and ' + (transactions.length - 10) + ' more</div>' : '') +
'</div>' +
'<div style="display: flex; gap: 12px;">' +
'<button id="confirmImport" class="btn" style="flex: 1;">✅ Import Transactions</button>' +
'<button id="cancelImport" class="ghost" style="flex: 1;">Cancel</button>' +
'</div></div>';

openModal(html);

setTimeout(() => {
const confirmBtn = $('#confirmImport');
if (confirmBtn) {
confirmBtn.addEventListener('click', () => {
// Add transactions to state
transactions.forEach(t => {
state.transactions.push(t);
// Update division stats
if (t.type === 'revenue') {
state.divisions[t.division].revenue += t.amount;
} else {
state.divisions[t.division].expenses += t.amount;
}
});
save();
renderTransactions();
renderAnalytics();
closeModal();
showToast(transactions.length + ' transactions imported successfully');
});
}

const cancelBtn = $('#cancelImport');
if (cancelBtn) {
cancelBtn.addEventListener('click', closeModal);
}
}, 100);
}

// Bulk action controls
const deselectAllBtn = $('#deselectAllBtn');
if (deselectAllBtn) {
deselectAllBtn.addEventListener('click', () => {
state.selectedTransactions = [];
renderTxnTable();
updateBulkActionsBar();
showToast('Selection cleared');
});
}

const bulkDeleteBtn = $('#bulkDeleteBtn');
if (bulkDeleteBtn) {
bulkDeleteBtn.addEventListener('click', () => {
if (state.selectedTransactions.length === 0) {
showToast('No transactions selected');
return;
}
const count = state.selectedTransactions.length;
if (!confirm(`Delete ${count} selected transaction${count === 1 ? '' : 's'}?`)) {
return;
}
// Update division stats before deleting
state.selectedTransactions.forEach(txId => {
const tx = state.transactions.find(t => t.id === txId);
if (tx && tx.division) {
if (tx.type === 'revenue') {
state.divisions[tx.division].revenue -= tx.amount;
} else {
state.divisions[tx.division].expenses -= tx.amount;
}
}
});
// Delete transactions
state.transactions = state.transactions.filter(t => !state.selectedTransactions.includes(t.id));
state.selectedTransactions = [];
save();
renderAll();
showToast(`${count} transaction${count === 1 ? '' : 's'} deleted`);
});
}

// Product controls
const addProductBtn = $('#addProductBtn');
if (addProductBtn) addProductBtn.addEventListener('click', () => showProductForm());

window.editProduct = function(id) {
const prod = state.products.find(p => p.id === id);
if(prod) showProductForm(prod);
};

window.deleteProduct = deleteProduct;

const exportChart = $('#exportChart');
if (exportChart) {
exportChart.addEventListener('click', () => {
const canvas = $('#productChart');
if(canvas) {
canvas.toBlob(blob => {
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = 'product-chart-' + new Date().toISOString().slice(0,10) + '.png';
a.click();
showToast('Chart exported');
});
}
});
}

// Contact controls
const newContactBtn = $('#newContactBtn');
if (newContactBtn) newContactBtn.addEventListener('click', () => showContactForm());

window.editContact = function(id) {
const contact = state.contacts.find(c => c.id === id);
if(contact) showContactForm(contact);
};

window.deleteContact = deleteContact;

const contactSearch = $('#contactSearch');
if (contactSearch) {
contactSearch.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase();
renderContacts(query);
});
}

// Task controls
const newTaskBtn = $('#newTaskBtn');
if (newTaskBtn) newTaskBtn.addEventListener('click', () => showTaskForm());

window.editTask = function(id) {
const task = state.tasks.find(t => t.id === id);
if(task) showTaskForm(task);
};

window.deleteTask = deleteTask;
window.toggleTask = toggleTask;

// Roadmap controls
const newRoadmapBtn = $('#newRoadmapBtn');
if (newRoadmapBtn) newRoadmapBtn.addEventListener('click', () => showRoadmapForm());

window.editRoadmapItem = function(id) {
const item = state.roadmapItems.find(r => r.id === id);
if(item) showRoadmapForm(item);
};

window.deleteRoadmapItem = deleteRoadmapItem;

// Notes controls
const newNoteBtn = $('#newNoteBtn');
if (newNoteBtn) newNoteBtn.addEventListener('click', () => showNoteForm());

const refreshNotes = $('#refreshNotes');
if (refreshNotes) {
refreshNotes.addEventListener('click', () => {
renderNotes();
showToast('Notes refreshed');
});
}

const noteSearch = $('#noteSearch');
if (noteSearch) {
noteSearch.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase();
renderNotes(query);
});
}

window.editNote = function(id) {
const note = state.notes.find(n => n.id === id);
if(note) showNoteForm(note);
};

window.deleteNote = deleteNote;
window.viewNote = viewNote;
window.showNoteFormFromEmpty = () => showNoteForm();

// Team Directory controls
const newTeamMemberBtn = $('#newTeamMemberBtn');
if (newTeamMemberBtn) newTeamMemberBtn.addEventListener('click', () => showTeamMemberForm());

const refreshTeam = $('#refreshTeam');
if (refreshTeam) {
refreshTeam.addEventListener('click', () => {
renderTeam();
showToast('Team directory refreshed');
});
}

const teamSearch = $('#teamSearch');
if (teamSearch) {
teamSearch.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase();
renderTeam(query);
});
}

window.editTeamMember = function(id) {
const member = state.team.find(t => t.id === id);
if(member) showTeamMemberForm(member);
};

window.deleteTeamMember = function(id) {
if(!confirm('Delete this team member?')) return;
state.team = state.team.filter(t => t.id !== id);
save();
renderTeam();
showToast('Team member deleted');
};

window.showTeamMemberForm = showTeamMemberForm;

// Vendor Directory controls
const newVendorBtn = $('#newVendorBtn');
if (newVendorBtn) newVendorBtn.addEventListener('click', () => showVendorForm());

const refreshVendors = $('#refreshVendors');
if (refreshVendors) {
refreshVendors.addEventListener('click', () => {
renderVendors();
showToast('Vendor directory refreshed');
});
}

const vendorSearch = $('#vendorSearch');
if (vendorSearch) {
vendorSearch.addEventListener('input', (e) => {
const query = e.target.value.toLowerCase();
renderVendors(query);
});
}

window.editVendor = function(id) {
const vendor = state.vendors.find(v => v.id === id);
if(vendor) showVendorForm(vendor);
};

window.deleteVendor = function(id) {
if(!confirm('Delete this vendor?')) return;
state.vendors = state.vendors.filter(v => v.id !== id);
save();
renderVendors();
showToast('Vendor deleted');
};

window.showVendorForm = showVendorForm;

// Report controls
const generateReportBtn = $('#generateReportBtn');
if (generateReportBtn) generateReportBtn.addEventListener('click', generateReport);

window.showReportById = function(id) {
const report = (state.reports || []).find(r => r.id === id);
if(report) showReportDetails(report);
};

window.generateReportFromList = generateReport;

// Quick actions
const quickCreate = $('#quickCreate');
if (quickCreate) quickCreate.addEventListener('click', () => showTransactionForm());

const quickSearch = $('#quickSearch');
if (quickSearch) {
quickSearch.addEventListener('click', () => {
const searchInput = $('#globalSearch');
if(searchInput) searchInput.focus();
});
}

const quickReport = $('#quickReport');
if (quickReport) quickReport.addEventListener('click', generateReport);

const runTests = $('#runTests');
if (runTests) runTests.addEventListener('click', runSystemTests);

// Navigation items that open modals
$$('.nav-item[data-section="integrations"]').forEach(item => {
item.addEventListener('click', (e) => {
e.stopPropagation();
renderIntegrationsModal();
});
});

$$('.nav-item[data-section="settings"]').forEach(item => {
item.addEventListener('click', (e) => {
e.stopPropagation();
renderSettingsModal();
});
});

console.log('✅ Controls wired');
}

// ============================================
// RENDERING
// ============================================
function renderSidebarProducts() {
const html = state.products.map(p => {
return '<div style="padding: 8px 12px; margin-bottom: 6px; background: rgba(255,255,255,0.02); border-radius: 8px; cursor: pointer; transition: all 0.3s ease; border-left: 3px solid ' + p.color + ';" onclick="window.showProductDetails(\'' + p.id + '\')" onmouseover="this.style.background=\'rgba(255,255,255,0.05)\'; this.style.transform=\'translateX(2px)\';" onmouseout="this.style.background=\'rgba(255,255,255,0.02)\'; this.style.transform=\'translateX(0)\';">' +
'<div style="font-size: 12px; font-weight: 600; margin-bottom: 4px;">' + p.name + '</div>' +
'<div class="tiny muted">' + money(p.price) + '/mo</div>' +
'</div>';
}).join('');
const sidebar = $('#sidebarProducts');
if(sidebar) sidebar.innerHTML = html;
}

function renderKPIs() {
const selectedProd = $('#prodSelect') ? $('#prodSelect').value : 'all';
let transactions = state.transactions;
if(selectedProd !== 'all') {
transactions = transactions.filter(t => t.product === selectedProd);
}

const revenue = transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const expenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
const profit = revenue - expenses;
const mrr = revenue / 12;
const runway = expenses > 0 ? (profit / (expenses / 12)) : 999;

const kpis = [
{label: 'Total Revenue', value: money(revenue), change: '+12.5%', positive: true, icon: '💰'},
{label: 'Total Expenses', value: money(expenses), change: '+8.2%', positive: false, icon: '💸'},
{label: 'Net Profit', value: money(profit), change: '+15.3%', positive: profit > 0, icon: '📈'},
{label: 'Monthly MRR', value: money(mrr), change: '+9.1%', positive: true, icon: '🔄'},
{label: 'Runway', value: runway > 99 ? '99+ months' : runway.toFixed(1) + ' months', change: '+2.5 mo', positive: true, icon: '⏳'},
{label: 'Profit Margin', value: revenue > 0 ? ((profit / revenue) * 100).toFixed(1) + '%' : '0%', change: '+3.2%', positive: profit > 0, icon: '📊'}
];

const html = kpis.map(kpi => {
return '<div class="kpi-card">' +
'<div class="kpi-header">' +
'<div class="kpi-label">' + kpi.label + '</div>' +
'<div class="kpi-icon">' + kpi.icon + '</div>' +
'</div>' +
'<div class="kpi-value">' + kpi.value + '</div>' +
'<div class="kpi-change ' + (kpi.positive ? 'positive' : 'negative') + '">' +
(kpi.positive ? '↑' : '↓') + ' ' + kpi.change +
'</div></div>';
}).join('');

const grid = $('#kpiGrid');
if(grid) grid.innerHTML = html;
}

let trendChartInstance = null;
function drawTrendChart() {
const canvas = $('#trendChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(trendChartInstance) {
trendChartInstance.destroy();
}

const selectedProd = $('#prodSelect') ? $('#prodSelect').value : 'all';
let transactions = state.transactions;
if(selectedProd !== 'all') {
transactions = transactions.filter(t => t.product === selectedProd);
}

const monthlyData = {};
const now = new Date();
for(let i = 11; i >= 0; i--) {
const date = new Date(now);
date.setMonth(date.getMonth() - i);
const key = date.toISOString().slice(0, 7);
monthlyData[key] = 0;
}

transactions.filter(t => t.type === 'revenue').forEach(t => {
const key = t.when.slice(0, 7);
if(monthlyData.hasOwnProperty(key)) {
monthlyData[key] += t.amount;
}
});

const labels = Object.keys(monthlyData).map(k => {
const d = new Date(k + '-01');
return d.toLocaleDateString('en-US', {month: 'short', year: 'numeric'});
});
const data = Object.values(monthlyData);

trendChartInstance = new Chart(ctx, {
type: state.chartType || 'line',
data: {
labels: labels,
datasets: [{
label: 'Revenue',
data: data,
backgroundColor: state.chartType === 'bar' ? 'rgba(110,231,183,0.5)' : 'rgba(110,231,183,0.1)',
borderColor: '#6ee7b7',
borderWidth: 3,
tension: 0.4,
fill: true,
pointRadius: 4,
pointHoverRadius: 6,
pointBackgroundColor: '#6ee7b7',
pointBorderColor: '#0a0e1a',
pointBorderWidth: 2
}]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: { display: false },
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#6ee7b7',
bodyColor: '#ffffff',
borderColor: '#6ee7b7',
borderWidth: 1,
padding: 12,
displayColors: false,
callbacks: {
label: function(context) {
return 'Revenue: ' + money(context.parsed.y);
}
}
}
},
scales: {
y: {
beginAtZero: true,
grid: { color: 'rgba(255,255,255,0.05)' },
ticks: {
color: '#94a3b8',
callback: function(value) {
return '$' + (value / 1000) + 'k';
}
}
},
x: {
grid: { display: false },
ticks: { color: '#94a3b8' }
}
}
}
});
}

let expenseChartInstance = null;
function drawExpenseChart() {
const canvas = $('#expenseChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(expenseChartInstance) {
expenseChartInstance.destroy();
}

const selectedProd = $('#prodSelect') ? $('#prodSelect').value : 'all';
let transactions = state.transactions;
if(selectedProd !== 'all') {
transactions = transactions.filter(t => t.product === selectedProd);
}

const monthlyData = {};
const now = new Date();
for(let i = 11; i >= 0; i--) {
const date = new Date(now);
date.setMonth(date.getMonth() - i);
const key = date.toISOString().slice(0, 7);
monthlyData[key] = 0;
}

transactions.filter(t => t.type === 'expense').forEach(t => {
const key = t.when.slice(0, 7);
if(monthlyData.hasOwnProperty(key)) {
monthlyData[key] += t.amount;
}
});

const labels = Object.keys(monthlyData).map(k => {
const d = new Date(k + '-01');
return d.toLocaleDateString('en-US', {month: 'short', year: 'numeric'});
});
const data = Object.values(monthlyData);

expenseChartInstance = new Chart(ctx, {
type: state.expenseChartType || 'bar',
data: {
labels: labels,
datasets: [{
label: 'Expenses',
data: data,
backgroundColor: state.expenseChartType === 'bar' ? 'rgba(255,107,107,0.5)' : 'rgba(255,107,107,0.1)',
borderColor: '#ff6b6b',
borderWidth: 3,
tension: 0.4,
fill: true,
pointRadius: 4,
pointHoverRadius: 6,
pointBackgroundColor: '#ff6b6b',
pointBorderColor: '#0a0e1a',
pointBorderWidth: 2
}]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: { display: false },
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#ff6b6b',
bodyColor: '#ffffff',
borderColor: '#ff6b6b',
borderWidth: 1,
padding: 12,
displayColors: false,
callbacks: {
label: function(context) {
return 'Expenses: ' + money(context.parsed.y);
}
}
}
},
scales: {
y: {
beginAtZero: true,
grid: { color: 'rgba(255,255,255,0.05)' },
ticks: {
color: '#94a3b8',
callback: function(value) {
return '$' + (value / 1000) + 'k';
}
}
},
x: {
grid: { display: false },
ticks: { color: '#94a3b8' }
}
}
}
});
}

let productChartInstance = null;
function drawProductDonut() {
const canvas = $('#productChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(productChartInstance) {
productChartInstance.destroy();
}

const productRevenue = state.products.map(p => {
const rev = state.transactions
.filter(t => t.product === p.id && t.type === 'revenue')
.reduce((sum, t) => sum + t.amount, 0);
return {name: p.name, value: rev, color: p.color};
});

productChartInstance = new Chart(ctx, {
type: 'doughnut',
data: {
labels: productRevenue.map(p => p.name),
datasets: [{
data: productRevenue.map(p => p.value),
backgroundColor: productRevenue.map(p => p.color),
borderColor: '#0a0e1a',
borderWidth: 3
}]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: {
position: 'bottom',
labels: {
color: '#94a3b8',
padding: 16,
font: { size: 12, weight: '600' }
}
},
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#6ee7b7',
bodyColor: '#ffffff',
borderColor: '#6ee7b7',
borderWidth: 1,
padding: 12,
callbacks: {
label: function(context) {
const total = context.dataset.data.reduce((a, b) => a + b, 0);
const percent = ((context.parsed / total) * 100).toFixed(1);
return context.label + ': ' + money(context.parsed) + ' (' + percent + '%)';
}
}
}
}
}
});
}

let divisionChartInstance = null;
function drawDivisionChart() {
const canvas = $('#divisionChart');
if(!canvas) return;

const ctx = canvas.getContext('2d');
if(divisionChartInstance) {
divisionChartInstance.destroy();
}

const divisions = Object.keys(state.divisions);
const revenueData = divisions.map(d => state.divisions[d].revenue);
const expenseData = divisions.map(d => state.divisions[d].expenses);
const labels = divisions.map(d => d.charAt(0).toUpperCase() + d.slice(1));

divisionChartInstance = new Chart(ctx, {
type: 'bar',
data: {
labels: labels,
datasets: [
{
label: 'Revenue',
data: revenueData,
backgroundColor: 'rgba(110,231,183,0.5)',
borderColor: '#6ee7b7',
borderWidth: 2
},
{
label: 'Expenses',
data: expenseData,
backgroundColor: 'rgba(255,107,107,0.5)',
borderColor: '#ff6b6b',
borderWidth: 2
}
]
},
options: {
responsive: true,
maintainAspectRatio: false,
plugins: {
legend: {
position: 'top',
labels: {
color: '#94a3b8',
padding: 16,
font: { size: 12, weight: '600' }
}
},
tooltip: {
backgroundColor: 'rgba(10,14,26,0.95)',
titleColor: '#6ee7b7',
bodyColor: '#ffffff',
borderColor: '#6ee7b7',
borderWidth: 1,
padding: 12
}
},
scales: {
y: {
beginAtZero: true,
grid: { color: 'rgba(255,255,255,0.05)' },
ticks: {
color: '#94a3b8',
callback: function(value) {
return '$' + (value / 1000) + 'k';
}
}
},
x: {
grid: { display: false },
ticks: { color: '#94a3b8' }
}
}
}
});
}

function runInsights() {
state.insights = [];
const revenue = state.transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const expenses = state.transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
const profit = revenue - expenses;

if(profit > 0) {
state.insights.push({text: '✨ <strong>Healthy profit margin</strong> of ' + ((profit/revenue)*100).toFixed(1) + '% detected'});
}

if(state.transactions.length > 40) {
state.insights.push({text: '📊 <strong>High transaction volume</strong> indicates active business operations'});
}

if(state.contacts.length > 10) {
state.insights.push({text: '👥 <strong>Growing customer base</strong> with ' + state.contacts.length + ' contacts'});
}

const topProduct = state.products.reduce((max, p) => {
const rev = state.transactions.filter(t => t.product === p.id && t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
return rev > max.rev ? {name: p.name, rev} : max;
}, {name: '', rev: 0});

if(topProduct.rev > 0) {
state.insights.push({text: '🏆 <strong>' + topProduct.name + '</strong> is your top performer'});
}

// Division insights
const topDivision = Object.keys(state.divisions).reduce((max, d) => {
const divProfit = state.divisions[d].revenue - state.divisions[d].expenses;
return divProfit > max.profit ? {name: d, profit: divProfit} : max;
}, {name: '', profit: -Infinity});

if(topDivision.profit > 0) {
state.insights.push({text: '🏢 <strong>' + topDivision.name.charAt(0).toUpperCase() + topDivision.name.slice(1) + '</strong> division is most profitable'});
}
}

function renderTxnTable() {
const allSelected = state.transactions.length > 0 && state.selectedTransactions.length === state.transactions.length;
const html = '<table>' +
'<thead><tr>' +
'<th style="width: 40px;"><input type="checkbox" id="selectAllTxn" ' + (allSelected ? 'checked' : '') + ' style="cursor: pointer; width: 18px; height: 18px;"></th>' +
'<th>Date</th>' +
'<th>Type</th>' +
'<th>Description</th>' +
'<th>Payee/Customer</th>' +
'<th>Amount</th>' +
'<th>Payment Source</th>' +
'<th>Division</th>' +
'<th>Actions</th>' +
'</tr></thead>' +
'<tbody>' +
state.transactions.map(t => {
const isSelected = state.selectedTransactions.includes(t.id);
// Format payment source for display
const paymentSourceLabels = {
'mercury': 'Mercury',
'capital-one-personal': 'Capital One - Personal',
'capital-one-business': 'Capital One - Business',
'paypal': 'Paypal',
'bank-of-america': 'Bank of America',
'referrals': 'Referrals',
'appointments': 'Appointments',
'reservations': 'Reservations'
};
const paymentSourceDisplay = t.division ? (paymentSourceLabels[t.division] || t.division) : '-';
// Format division for display
const divisionLabels = {
'referrals': 'Referrals',
'appointments': 'Appointments',
'reservations': 'Reservations'
};
const divisionDisplay = t.product ? (divisionLabels[t.product] || t.product) : '-';
return '<tr>' +
'<td><input type="checkbox" class="txn-checkbox" data-id="' + t.id + '" ' + (isSelected ? 'checked' : '') + ' style="cursor: pointer; width: 18px; height: 18px;"></td>' +
'<td>' + t.when + '</td>' +
'<td><span class="badge ' + t.type + '">' + t.type + '</span></td>' +
'<td>' + t.description + '</td>' +
'<td>' + (t.customer || '-') + '</td>' +
'<td>' + money(t.amount) + '</td>' +
'<td>' + paymentSourceDisplay + '</td>' +
'<td>' + divisionDisplay + '</td>' +
'<td>' +
'<button class="action-btn" onclick="window.editTransaction(\'' + t.id + '\')">✏️</button>' +
'<button class="action-btn danger" onclick="window.deleteTransaction(\'' + t.id + '\')">🗑️</button>' +
'</td></tr>';
}).join('') +
'</tbody></table>';

const container = $('#txnTable');
if(container) container.innerHTML = html;

// Wire up select all checkbox
const selectAllCheckbox = $('#selectAllTxn');
if(selectAllCheckbox) {
selectAllCheckbox.addEventListener('change', (e) => {
if(e.target.checked) {
state.selectedTransactions = state.transactions.map(t => t.id);
} else {
state.selectedTransactions = [];
}
renderTxnTable();
updateBulkActionsBar();
});
}

// Wire up individual checkboxes
const checkboxes = $$('.txn-checkbox');
checkboxes.forEach(cb => {
cb.addEventListener('change', (e) => {
const id = e.target.dataset.id;
if(e.target.checked) {
if(!state.selectedTransactions.includes(id)) {
state.selectedTransactions.push(id);
}
} else {
state.selectedTransactions = state.selectedTransactions.filter(tid => tid !== id);
}
renderTxnTable();
updateBulkActionsBar();
});
});

updateBulkActionsBar();
}

function updateBulkActionsBar() {
const bulkBar = $('#bulkActionsBar');
const selectedCount = $('#selectedCount');
if(bulkBar && selectedCount) {
if(state.selectedTransactions.length > 0) {
bulkBar.style.display = 'flex';
selectedCount.textContent = state.selectedTransactions.length + ' transaction' + (state.selectedTransactions.length === 1 ? '' : 's') + ' selected';
} else {
bulkBar.style.display = 'none';
}
}
}

function renderContacts(searchQuery = '') {
let contacts = state.contacts;
if(searchQuery) {
contacts = contacts.filter(c => 
c.name.toLowerCase().includes(searchQuery) ||
c.company.toLowerCase().includes(searchQuery) ||
c.email.toLowerCase().includes(searchQuery) ||
(c.division && c.division.toLowerCase().includes(searchQuery))
);
}

const html = contacts.map(c => {
const product = state.products.find(p => p.id === c.product);
const division = c.division || 'referrals';
const divisionLabels = {
'referrals': '🔗 Referrals',
'appointments': '📅 Appointments',
'reservations': '📝 Reservations'
};
const divisionColors = {
'referrals': '#6ee7b7',
'appointments': '#60a5fa',
'reservations': '#7c5cff'
};

return '<div class="contact-card">' +
'<div class="name">' + c.name + '</div>' +
'<div class="company">' + c.company + '</div>' +
'<div class="email"><a href="mailto:' + c.email + '" class="contact-link" title="Send email to ' + c.email + '">📧 ' + c.email + '</a></div>' +
(c.phone ? '<div class="email"><a href="tel:' + c.phone.replace(/[^0-9+]/g, '') + '" class="contact-link" title="Call ' + c.phone + '">📱 ' + c.phone + '</a></div>' : '') +
'<div style="margin-top: 10px; display: flex; gap: 6px; flex-wrap: wrap; align-items: center;">' +
'<span style="display: inline-block; padding: 4px 10px; background: rgba(110,231,183,0.15); border: 1px solid rgba(110,231,183,0.3); border-radius: 6px; font-size: 10px; font-weight: 600; color: ' + divisionColors[division] + ';">' + divisionLabels[division] + '</span>' +
(product ? '<span style="font-size: 11px; color: var(--text-muted);">📦 ' + product.name + '</span>' : '') +
'</div>' +
'<div class="tiny muted" style="margin-top: 8px;">Last activity: ' + c.lastActivity + '</div>' +
'<div class="actions">' +
'<button class="action-btn" onclick="window.editContact(\'' + c.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="window.deleteContact(\'' + c.id + '\')">🗑️ Delete</button>' +
'</div></div>';
}).join('');

const grid = $('#contactsGrid');
if(grid) grid.innerHTML = html || '<div style="text-align: center; padding: 60px; color: var(--text-muted);">No contacts found</div>';
}

function renderProductsGrid() {
const html = state.products.map(p => {
const revenue = state.transactions
.filter(t => t.product === p.id && t.type === 'revenue')
.reduce((sum, t) => sum + t.amount, 0);

return '<div class="product-card">' +
'<div class="name">' + p.name + '</div>' +
'<div class="price">' + money(p.price) + '/mo</div>' +
'<div class="id">ID: ' + p.id + '</div>' +
'<div style="font-size: 14px; color: var(--text-secondary); margin-bottom: 8px;">Revenue: ' + money(revenue) + '</div>' +
'<div style="width: 40px; height: 40px; background: ' + p.color + '; border-radius: 8px; margin-bottom: 12px;"></div>' +
'<div class="actions">' +
'<button class="action-btn" onclick="window.editProduct(\'' + p.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="window.deleteProduct(\'' + p.id + '\')">🗑️ Delete</button>' +
'</div>' +
'</div>';
}).join('');
const grid = $('#productsGrid');
if(grid) grid.innerHTML = html;
}

function renderTasks() {
const html = state.tasks.length > 0 ? state.tasks.map(t => {
return '<div class="task-item ' + (t.completed ? 'completed' : '') + '">' +
'<input type="checkbox" class="task-checkbox" ' + (t.completed ? 'checked' : '') + ' onchange="window.toggleTask(\'' + t.id + '\')" />' +
'<div class="task-content">' +
'<div class="task-title">' + t.title + '</div>' +
'<div class="task-meta">' +
'<span>👤 ' + t.assignee + '</span>' +
'<span>📅 ' + t.dueDate + '</span>' +
'<span class="badge ' + (t.priority === 'high' ? 'expense' : t.priority === 'medium' ? 'revenue' : '') + '" style="font-size: 10px;">' + t.priority + '</span>' +
'</div>' +
'</div>' +
'<div style="display: flex; gap: 4px;">' +
'<button class="action-btn" onclick="window.editTask(\'' + t.id + '\')">✏️</button>' +
'<button class="action-btn danger" onclick="window.deleteTask(\'' + t.id + '\')">🗑️</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">No tasks yet. Create your first task!</div>';

const container = $('#tasksList');
if(container) container.innerHTML = html;
}

function renderRoadmap() {
const html = state.roadmapItems.length > 0 ? state.roadmapItems.map(r => {
return '<div class="roadmap-item ' + r.status + '">' +
'<div class="roadmap-title">' + r.title + '</div>' +
'<div class="roadmap-desc">' + r.description + '</div>' +
'<div class="roadmap-meta">' +
'<span class="roadmap-badge ' + r.status + '">' + r.status.replace('-', ' ') + '</span>' +
'<span class="tiny muted">📅 ' + r.quarter + '</span>' +
'<span class="tiny muted">👤 ' + r.owner + '</span>' +
'<div style="flex: 1;"></div>' +
'<button class="action-btn" onclick="window.editRoadmapItem(\'' + r.id + '\')">✏️</button>' +
'<button class="action-btn danger" onclick="window.deleteRoadmapItem(\'' + r.id + '\')">🗑️</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">No roadmap items yet. Add your first milestone!</div>';

const container = $('#roadmapList');
if(container) container.innerHTML = html;
}

function renderDivisions() {
const html = Object.keys(state.divisions).map(key => {
const div = state.divisions[key];
const profit = div.revenue - div.expenses;
const icons = {
referrals: '🤝',
appointments: '📅',
reservations: '🎫'
};

return '<div class="division-card">' +
'<div class="division-header">' +
'<div class="division-name">' + div.name + '</div>' +
'<div class="division-icon">' + (icons[key] || '🏢') + '</div>' +
'</div>' +
'<div class="division-stats">' +
'<div class="division-stat revenue">' +
'<div class="division-stat-label">MRR</div>' +
'<div class="division-stat-value">' + money(div.mrr || 0) + '</div>' +
'</div>' +
'<div class="division-stat expense">' +
'<div class="division-stat-label">ARR</div>' +
'<div class="division-stat-value">' + money(div.arr || 0) + '</div>' +
'</div>' +
'<div class="division-stat" style="grid-column: 1 / -1;">' +
'<div class="division-stat-label">' + (div.metric === 'referrals' ? 'Referrals' : div.metric === 'appointments' ? 'Appointments' : 'Reservations') + '</div>' +
'<div class="division-stat-value">' + (div.count || 0).toLocaleString() + '</div>' +
'</div>' +
'<div class="division-stat profit" style="grid-column: 1 / -1;">' +
'<div class="division-stat-label">Net Profit</div>' +
'<div class="division-stat-value">' + money(profit) + '</div>' +
'</div>' +
'</div>' +
'</div>';
}).join('');

const grid = $('#divisionsGrid');
if(grid) grid.innerHTML = html;
}

function renderNotes(searchQuery = '') {
let notes = state.notes || [];
if(searchQuery) {
notes = notes.filter(n => 
n.title.toLowerCase().includes(searchQuery) ||
n.content.toLowerCase().includes(searchQuery)
);
}

const categoryIcons = {
general: '📝',
important: '⚠️',
idea: '💡',
todo: '✅'
};

const html = notes.length > 0 ? notes.map(n => {
return '<div class="note-card ' + n.category + '" onclick="window.viewNote(\'' + n.id + '\')" style="cursor: pointer;">' +
'<div class="note-title">' +
'<span>' + categoryIcons[n.category] + '</span>' +
'<span>' + n.title + '</span>' +
'</div>' +
'<div class="note-content" style="max-height: 100px; overflow: hidden; text-overflow: ellipsis;">' +
(n.content.length > 150 ? n.content.substring(0, 150) + '...' : n.content) +
'</div>' +
'<div class="note-meta">' +
'<span class="note-tag ' + n.category + '">' + n.category + '</span>' +
'<span>📅 ' + new Date(n.updated).toLocaleDateString() + '</span>' +
'</div>' +
'<div class="note-actions">' +
'<button class="action-btn" onclick="event.stopPropagation(); window.editNote(\'' + n.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="event.stopPropagation(); window.deleteNote(\'' + n.id + '\')">🗑️ Delete</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
'<div style="font-size: 48px; margin-bottom: 16px;">📝</div>' +
'<h3 style="margin-bottom: 12px;">No Notes Yet</h3>' +
'<p style="margin-bottom: 24px;">Create your first note to get started</p>' +
'<button class="btn" onclick="window.showNoteFormFromEmpty()">📝 New Note</button>' +
'</div>';

const grid = $('#notesGrid');
if(grid) grid.innerHTML = html;
}

function renderTeam(searchQuery = '') {
let team = state.team || [];
if(searchQuery) {
team = team.filter(t => 
t.name.toLowerCase().includes(searchQuery) ||
t.role.toLowerCase().includes(searchQuery) ||
t.email.toLowerCase().includes(searchQuery)
);
}

const html = team.length > 0 ? team.map(t => {
return '<div class="contact-card" style="padding: 20px; background: rgba(255,255,255,0.03); border-radius: 12px; border: 1px solid var(--glass-border); margin-bottom: 16px; transition: all 0.3s ease; cursor: pointer;" onmouseover="this.style.background=\'rgba(255,255,255,0.06)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.03)\'">' +
'<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">' +
'<div>' +
'<div style="font-size: 18px; font-weight: 700; color: var(--text-primary); margin-bottom: 4px;">' + t.name + '</div>' +
'<div style="font-size: 14px; color: var(--accent-primary); font-weight: 600; margin-bottom: 8px;">' + t.role + '</div>' +
'</div>' +
'<div style="font-size: 32px;">' + (t.avatar || '👤') + '</div>' +
'</div>' +
'<div style="display: grid; gap: 8px; font-size: 13px; color: var(--text-secondary); margin-bottom: 12px;">' +
'<div>📧 ' + t.email + '</div>' +
'<div>📱 ' + (t.phone || 'N/A') + '</div>' +
'<div>🏢 ' + (t.department || 'N/A') + '</div>' +
'</div>' +
'<div style="display: flex; gap: 8px; margin-top: 12px;">' +
'<button class="action-btn" onclick="event.stopPropagation(); window.editTeamMember(\'' + t.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="event.stopPropagation(); window.deleteTeamMember(\'' + t.id + '\')">🗑️ Delete</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
'<div style="font-size: 48px; margin-bottom: 16px;">👥</div>' +
'<h3 style="margin-bottom: 12px;">No Team Members Yet</h3>' +
'<p style="margin-bottom: 24px;">Add your first team member to get started</p>' +
'<button class="btn" onclick="window.showTeamMemberForm()">👥 Add Team Member</button>' +
'</div>';

const grid = $('#teamGrid');
if(grid) grid.innerHTML = html;
}

function renderVendors(searchQuery = '') {
let vendors = state.vendors || [];
if(searchQuery) {
vendors = vendors.filter(v => 
v.name.toLowerCase().includes(searchQuery) ||
v.category.toLowerCase().includes(searchQuery) ||
v.service.toLowerCase().includes(searchQuery)
);
}

const html = vendors.length > 0 ? vendors.map(v => {
const statusColor = v.status === 'active' ? 'var(--success)' : v.status === 'trial' ? 'var(--warning)' : 'var(--text-muted)';
return '<div class="contact-card" style="padding: 20px; background: rgba(255,255,255,0.03); border-radius: 12px; border: 1px solid var(--glass-border); margin-bottom: 16px; transition: all 0.3s ease; cursor: pointer;" onmouseover="this.style.background=\'rgba(255,255,255,0.06)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.03)\'">' +
'<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">' +
'<div>' +
'<div style="font-size: 18px; font-weight: 700; color: var(--text-primary); margin-bottom: 4px;">' + v.name + '</div>' +
'<div style="font-size: 14px; color: var(--accent-primary); font-weight: 600; margin-bottom: 8px;">' + v.category + '</div>' +
'</div>' +
'<div style="display: flex; flex-direction: column; align-items: flex-end; gap: 8px;">' +
'<span style="font-size: 11px; padding: 4px 10px; background: ' + statusColor + '20; color: ' + statusColor + '; border-radius: 6px; font-weight: 600; text-transform: uppercase;">' + (v.status || 'Active') + '</span>' +
'<div style="font-size: 16px; font-weight: 700; color: var(--accent-tertiary);">' + money(v.monthlyCost || 0) + '/mo</div>' +
'</div>' +
'</div>' +
'<div style="font-size: 13px; color: var(--text-secondary); margin-bottom: 12px; line-height: 1.6;">' + (v.service || 'No description provided') + '</div>' +
'<div style="display: grid; gap: 8px; font-size: 13px; color: var(--text-secondary); margin-bottom: 12px;">' +
'<div>🌐 ' + (v.website || 'N/A') + '</div>' +
'<div>📧 ' + (v.contact || 'N/A') + '</div>' +
'<div>📅 Renewal: ' + (v.renewalDate || 'N/A') + '</div>' +
'</div>' +
'<div style="display: flex; gap: 8px; margin-top: 12px;">' +
'<button class="action-btn" onclick="event.stopPropagation(); window.editVendor(\'' + v.id + '\')">✏️ Edit</button>' +
'<button class="action-btn danger" onclick="event.stopPropagation(); window.deleteVendor(\'' + v.id + '\')">🗑️ Delete</button>' +
'</div>' +
'</div>';
}).join('') : '<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
'<div style="font-size: 48px; margin-bottom: 16px;">🔧</div>' +
'<h3 style="margin-bottom: 12px;">No Vendors Yet</h3>' +
'<p style="margin-bottom: 24px;">Add your first technology vendor to get started</p>' +
'<button class="btn" onclick="window.showVendorForm()">🔧 Add Vendor</button>' +
'</div>';

const grid = $('#vendorGrid');
if(grid) grid.innerHTML = html;
}

function renderReports() {
const reports = state.reports || [];
const html = reports.length > 0 ? 
'<div style="display: grid; gap: 16px;">' +
reports.map(r => {
return '<div style="padding: 20px; background: rgba(255,255,255,0.03); border-radius: 12px; border: 1px solid var(--glass-border); cursor: pointer; transition: all 0.3s ease;" onclick="window.showReportById(\'' + r.id + '\')" onmouseover="this.style.background=\'rgba(255,255,255,0.06)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.03)\'">' +
'<div style="font-weight: 700; margin-bottom: 8px; color: var(--text-primary);">' + r.name + '</div>' +
'<div style="font-size: 12px; color: var(--text-muted);">Generated: ' + new Date(r.generated).toLocaleString() + '</div>' +
'<div style="font-size: 12px; color: var(--text-secondary); margin-top: 8px;">Type: ' + r.type + '</div>' +
'</div>';
}).join('') +
'</div>' :
'<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
'<div style="font-size: 48px; margin-bottom: 16px;">📄</div>' +
'<h3 style="margin-bottom: 12px;">No Reports Yet</h3>' +
'<p style="margin-bottom: 24px;">Generate your first report to see it here</p>' +
'<button class="btn" onclick="window.generateReportFromList()">📊 Generate Report</button>' +
'</div>';

const container = $('#reportsContent');
if(container) container.innerHTML = html;
}

function renderAlertsSection() {
// Helper functions for alert rendering
function getAlertCategory(type) {
const financial = ['runway', 'cash_flow', 'expense_spike', 'revenue_drop', 'profit_margin', 'budget_overrun', 'late_payment', 'outstanding_invoices', 'gross_margin', 'aov_change'];
const customer = ['churn_rate', 'high_cac', 'ltv_cac_ratio', 'contact_engagement', 'conversion_rate', 'clv_drop', 'new_customers', 'refund_rate'];
const operational = ['transaction_volume', 'division_loss', 'integration_failure', 'data_quality'];
const performance = ['mrr_growth', 'product_performance'];

if (financial.includes(type)) return 'financial';
if (customer.includes(type)) return 'customer';
if (operational.includes(type)) return 'operational';
if (performance.includes(type)) return 'performance';
return 'operational';
}

function getAlertDescription(alert) {
const rule = alert.rule;
switch(rule.type) {
case 'runway': return `Triggers when cash runway falls below ${rule.months} months`;
case 'expense_spike': return `Alerts on ${rule.percent}% expense increase over ${rule.days} days`;
case 'churn_rate': return `Warns when customer churn exceeds ${rule.threshold}%`;
case 'profit_margin': return `Triggers when profit margin drops below ${rule.threshold}%`;
case 'revenue_drop': return `Detects ${rule.percent}% revenue decrease over ${rule.days} days`;
case 'high_cac': return `Alerts when Customer Acquisition Cost exceeds $${rule.threshold}`;
case 'ltv_cac_ratio': return `Warns when LTV:CAC ratio falls below ${rule.threshold}:1`;
case 'mrr_growth': return `Triggers if MRR growth is under ${rule.threshold}% over ${rule.days} days`;
case 'transaction_volume': return `Detects ${rule.percent}% drop in transactions over ${rule.days} days`;
case 'cash_flow': return `Warns of negative cash flow over ${rule.days} days`;
case 'product_performance': return `Alerts when product revenue falls below $${rule.threshold}`;
case 'division_loss': return `Triggers when any division operates at a loss`;
case 'budget_overrun': return `Alerts when spending exceeds budget by ${rule.percent}%`;
case 'late_payment': return `Warns when invoices are overdue by ${rule.days} days`;
case 'contact_engagement': return `Triggers when no contact activity for ${rule.days} days`;
case 'conversion_rate': return `Alerts on ${rule.percent}% conversion rate decrease below ${rule.threshold}%`;
case 'aov_change': return `Detects ${rule.percent}% ${rule.direction} in average order value`;
case 'clv_drop': return `Warns when CLV drops ${rule.percent}% below $${rule.threshold}`;
case 'integration_failure': return `Alerts on integration sync failures for ${rule.service}`;
case 'data_quality': return `Triggers when missing data exceeds ${rule.missing_percent}%`;
case 'refund_rate': return `Warns when refund rate exceeds ${rule.threshold}% over ${rule.days} days`;
case 'new_customers': return `Alerts on ${rule.percent}% drop in new customer acquisition over ${rule.days} days`;
case 'outstanding_invoices': return `Triggers when ${rule.count}+ invoices are overdue by ${rule.age_days} days`;
case 'gross_margin': return `Warns when gross margin falls below ${rule.threshold}%`;
default: return 'Custom alert configuration';
}
}

function getAlertSeverity(alert) {
const criticalAlerts = ['runway', 'cash_flow', 'division_loss', 'budget_overrun', 'outstanding_invoices', 'integration_failure'];
const highAlerts = ['expense_spike', 'revenue_drop', 'churn_rate', 'profit_margin', 'late_payment', 'conversion_rate', 'refund_rate', 'gross_margin'];
const mediumAlerts = ['high_cac', 'ltv_cac_ratio', 'transaction_volume', 'aov_change', 'clv_drop', 'new_customers', 'data_quality'];
const lowAlerts = ['mrr_growth', 'product_performance', 'contact_engagement'];

if (criticalAlerts.includes(alert.rule.type)) return { level: 'Critical', color: '#ff6b6b', icon: '🔴' };
if (highAlerts.includes(alert.rule.type)) return { level: 'High', color: '#ffb86b', icon: '🟠' };
if (mediumAlerts.includes(alert.rule.type)) return { level: 'Medium', color: '#60a5fa', icon: '🟡' };
return { level: 'Low', color: '#6ee7b7', icon: '🟢' };
}

// Categorize alerts
const alertCategories = {
financial: { name: '💰 Financial Alerts', color: '#6ee7b7', alerts: [] },
customer: { name: '👥 Customer Alerts', color: '#60a5fa', alerts: [] },
operational: { name: '⚡ Operational Alerts', color: '#ffb86b', alerts: [] },
performance: { name: '📈 Performance Alerts', color: '#7c5cff', alerts: [] }
};

state.alerts.forEach(alert => {
const category = getAlertCategory(alert.rule.type);
if (alertCategories[category]) {
alertCategories[category].alerts.push(alert);
}
});

// Render statistics
const enabledCount = state.alerts.filter(a => a.enabled).length;
const criticalEnabled = state.alerts.filter(a => a.enabled && getAlertSeverity(a).level === 'Critical').length;
const highEnabled = state.alerts.filter(a => a.enabled && getAlertSeverity(a).level === 'High').length;
const mediumEnabled = state.alerts.filter(a => a.enabled && getAlertSeverity(a).level === 'Medium').length;

let statsHtml = '<div style="background: linear-gradient(135deg, rgba(110,231,183,0.1), rgba(124,92,255,0.1)); padding: 24px; border-radius: 16px; margin-bottom: 24px; border: 1px solid rgba(110,231,183,0.3);">' +
'<h3 style="margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">📊 Alert Overview</h3>' +
'<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">' +
'<div style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; text-align: center; border-left: 4px solid var(--accent-primary);">' +
'<div style="font-size: 32px; font-weight: 800; color: var(--accent-primary); margin-bottom: 8px;">' + enabledCount + '</div>' +
'<div style="font-size: 13px; color: var(--text-secondary); font-weight: 600;">Active Alerts</div>' +
'<div style="font-size: 11px; color: var(--text-muted); margin-top: 4px;">of ' + state.alerts.length + ' total</div>' +
'</div>' +
'<div style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; text-align: center; border-left: 4px solid #ff6b6b;">' +
'<div style="font-size: 32px; font-weight: 800; color: #ff6b6b; margin-bottom: 8px;">' + criticalEnabled + '</div>' +
'<div style="font-size: 13px; color: var(--text-secondary); font-weight: 600;">Critical</div>' +
'<div style="font-size: 11px; color: var(--text-muted); margin-top: 4px;">priority alerts</div>' +
'</div>' +
'<div style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; text-align: center; border-left: 4px solid #ffb86b;">' +
'<div style="font-size: 32px; font-weight: 800; color: #ffb86b; margin-bottom: 8px;">' + highEnabled + '</div>' +
'<div style="font-size: 13px; color: var(--text-secondary); font-weight: 600;">High Priority</div>' +
'<div style="font-size: 11px; color: var(--text-muted); margin-top: 4px;">alerts enabled</div>' +
'</div>' +
'<div style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; text-align: center; border-left: 4px solid #60a5fa;">' +
'<div style="font-size: 32px; font-weight: 800; color: #60a5fa; margin-bottom: 8px;">' + mediumEnabled + '</div>' +
'<div style="font-size: 13px; color: var(--text-secondary); font-weight: 600;">Medium Priority</div>' +
'<div style="font-size: 11px; color: var(--text-muted); margin-top: 4px;">alerts enabled</div>' +
'</div>' +
'</div>' +
'</div>';

const statsContainer = $('#alertStatistics');
if (statsContainer) statsContainer.innerHTML = statsHtml;

// Render alert categories
let categoriesHtml = '<div style="display: flex; flex-direction: column; gap: 20px;">';

Object.keys(alertCategories).forEach(categoryKey => {
const category = alertCategories[categoryKey];
if (category.alerts.length > 0) {
categoriesHtml += '<div style="background: rgba(255,255,255,0.02); border: 1px solid var(--glass-border); border-left: 4px solid ' + category.color + '; border-radius: 12px; padding: 24px; transition: all 0.3s ease;" onmouseover="this.style.borderColor=\'' + category.color + '\'" onmouseout="this.style.borderColor=\'var(--glass-border)\'">' +
'<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">' +
'<h3 style="display: flex; align-items: center; gap: 10px; margin: 0;">' + category.name + 
'<span style="font-size: 12px; background: ' + category.color + '20; color: ' + category.color + '; padding: 4px 12px; border-radius: 12px; font-weight: 600;">' + 
category.alerts.length + ' alerts</span></h3>' +
'<span style="font-size: 11px; color: var(--text-muted);">' + category.alerts.filter(a => a.enabled).length + ' enabled</span>' +
'</div>' +
'<div style="display: grid; gap: 12px;">';

category.alerts.forEach(alert => {
const severity = getAlertSeverity(alert);
const description = getAlertDescription(alert);
categoriesHtml += '<div style="display: flex; justify-content: space-between; align-items: center; padding: 16px; background: rgba(255,255,255,0.02); border-radius: 10px; border-left: 3px solid ' + severity.color + '; transition: all 0.3s ease;" onmouseover="this.style.background=\'rgba(255,255,255,0.05)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.02)\'">' +
'<div style="flex: 1; padding-right: 20px;">' +
'<div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">' +
'<span style="font-size: 16px;">' + severity.icon + '</span>' +
'<span style="font-weight: 700; font-size: 15px; color: var(--text-primary);">' + alert.name + '</span>' +
'<span style="font-size: 10px; padding: 3px 8px; background: ' + severity.color + '20; color: ' + severity.color + '; border-radius: 6px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">' + severity.level + '</span>' +
'</div>' +
'<div style="font-size: 13px; color: var(--text-muted); line-height: 1.6;">' + description + '</div>' +
'</div>' +
'<div>' +
'<label class="switch-container" style="cursor: pointer; display: block;">' +
'<input type="checkbox" ' + (alert.enabled ? 'checked' : '') + ' data-alert-id="' + alert.id + '" class="alert-section-toggle" style="display: none;" />' +
'<span class="switch-slider" style="display: block; width: 54px; height: 28px; background: ' + (alert.enabled ? severity.color : 'rgba(255,255,255,0.1)') + '; border-radius: 28px; position: relative; transition: all 0.3s;">' +
'<span style="position: absolute; top: 3px; left: ' + (alert.enabled ? '29px' : '3px') + '; width: 22px; height: 22px; background: white; border-radius: 50%; transition: all 0.3s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);"></span>' +
'</span>' +
'</label>' +
'</div>' +
'</div>';
});

categoriesHtml += '</div></div>';
}
});

categoriesHtml += '</div>';

const categoriesContainer = $('#alertCategoriesGrid');
if (categoriesContainer) categoriesContainer.innerHTML = categoriesHtml;

// Add event listeners for toggles
setTimeout(() => {
$$('.alert-section-toggle').forEach(toggle => {
toggle.addEventListener('change', (e) => {
const alertId = e.target.dataset.alertId;
const alert = state.alerts.find(a => a.id === alertId);
if (alert) {
alert.enabled = e.target.checked;
save();
showToast(alert.name + ' ' + (alert.enabled ? 'enabled' : 'disabled'));
renderAlertsSection(); // Re-render to update stats and UI
}
});
});
}, 100);
}

// Render detailed alert lists with delete checkboxes
function renderAlertLists() {
function getAlertCategory(type) {
const financial = ['runway', 'cash_flow', 'expense_spike', 'revenue_drop', 'profit_margin', 'budget_overrun', 'late_payment', 'outstanding_invoices', 'gross_margin', 'aov_change'];
const customer = ['churn_rate', 'high_cac', 'ltv_cac_ratio', 'contact_engagement', 'conversion_rate', 'clv_drop', 'new_customers', 'refund_rate'];
const operational = ['transaction_volume', 'division_loss', 'integration_failure', 'data_quality'];
const performance = ['mrr_growth', 'product_performance'];

if (financial.includes(type)) return 'financial';
if (customer.includes(type)) return 'customer';
if (operational.includes(type)) return 'operational';
if (performance.includes(type)) return 'performance';
return 'operational';
}

function getAlertDescription(alert) {
const rule = alert.rule;
switch(rule.type) {
case 'runway': return `Triggers when cash runway falls below ${rule.months} months`;
case 'expense_spike': return `Alerts on ${rule.percent}% expense increase over ${rule.days} days`;
case 'churn_rate': return `Warns when customer churn exceeds ${rule.threshold}%`;
case 'profit_margin': return `Triggers when profit margin drops below ${rule.threshold}%`;
case 'revenue_drop': return `Detects ${rule.percent}% revenue decrease over ${rule.days} days`;
case 'high_cac': return `Alerts when Customer Acquisition Cost exceeds $${rule.threshold}`;
case 'ltv_cac_ratio': return `Warns when LTV:CAC ratio falls below ${rule.threshold}:1`;
case 'mrr_growth': return `Triggers if MRR growth is under ${rule.threshold}% over ${rule.days} days`;
case 'transaction_volume': return `Detects ${rule.percent}% drop in transactions over ${rule.days} days`;
case 'cash_flow': return `Warns of negative cash flow over ${rule.days} days`;
case 'product_performance': return `Alerts when product revenue falls below $${rule.threshold}`;
case 'division_loss': return `Triggers when any division operates at a loss`;
case 'budget_overrun': return `Alerts when spending exceeds budget by ${rule.percent}%`;
case 'late_payment': return `Warns when invoices are overdue by ${rule.days} days`;
case 'contact_engagement': return `Triggers when no contact activity for ${rule.days} days`;
case 'conversion_rate': return `Alerts on ${rule.percent}% conversion rate decrease below ${rule.threshold}%`;
case 'aov_change': return `Detects ${rule.percent}% ${rule.direction} in average order value`;
case 'clv_drop': return `Warns when CLV drops ${rule.percent}% below $${rule.threshold}`;
case 'integration_failure': return `Alerts on integration sync failures for ${rule.service}`;
case 'data_quality': return `Triggers when missing data exceeds ${rule.missing_percent}%`;
case 'refund_rate': return `Warns when refund rate exceeds ${rule.threshold}% over ${rule.days} days`;
case 'new_customers': return `Alerts on ${rule.percent}% drop in new customer acquisition over ${rule.days} days`;
case 'outstanding_invoices': return `Triggers when ${rule.count}+ invoices are overdue by ${rule.age_days} days`;
case 'gross_margin': return `Warns when gross margin falls below ${rule.threshold}%`;
default: return 'Custom alert configuration';
}
}

function getAlertSeverity(alert) {
const criticalAlerts = ['runway', 'cash_flow', 'division_loss', 'budget_overrun', 'outstanding_invoices', 'integration_failure'];
const highAlerts = ['expense_spike', 'revenue_drop', 'churn_rate', 'profit_margin', 'late_payment', 'conversion_rate', 'refund_rate', 'gross_margin'];
const mediumAlerts = ['high_cac', 'ltv_cac_ratio', 'transaction_volume', 'aov_change', 'clv_drop', 'new_customers', 'data_quality'];
const lowAlerts = ['mrr_growth', 'product_performance', 'contact_engagement'];

if (criticalAlerts.includes(alert.rule.type)) return { level: 'Critical', color: '#ff6b6b', icon: '🔴' };
if (highAlerts.includes(alert.rule.type)) return { level: 'High', color: '#ffb86b', icon: '🟠' };
if (mediumAlerts.includes(alert.rule.type)) return { level: 'Medium', color: '#60a5fa', icon: '🟡' };
return { level: 'Low', color: '#6ee7b7', icon: '🟢' };
}

function renderAlertItem(alert) {
const severity = getAlertSeverity(alert);
const description = getAlertDescription(alert);
return '<div style="display: flex; align-items: center; gap: 12px; padding: 16px; background: rgba(255,255,255,0.02); border: 1px solid var(--glass-border); border-left: 3px solid ' + severity.color + '; border-radius: 10px; margin-bottom: 12px; transition: all 0.3s ease;" onmouseover="this.style.background=\'rgba(255,255,255,0.05)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.02)\'">' +
'<input type="checkbox" class="alert-delete-checkbox" data-alert-id="' + alert.id + '" style="width: 18px; height: 18px; cursor: pointer; accent-color: var(--danger);" />' +
'<div style="flex: 1;">' +
'<div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">' +
'<span style="font-size: 16px;">' + severity.icon + '</span>' +
'<span style="font-weight: 700; font-size: 14px; color: var(--text-primary);">' + alert.name + '</span>' +
'<span style="font-size: 10px; padding: 3px 8px; background: ' + severity.color + '20; color: ' + severity.color + '; border-radius: 6px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">' + severity.level + '</span>' +
(alert.enabled ? '<span style="font-size: 10px; padding: 3px 8px; background: rgba(74,222,128,0.2); color: var(--success); border-radius: 6px; font-weight: 600; text-transform: uppercase;">ENABLED</span>' : '<span style="font-size: 10px; padding: 3px 8px; background: rgba(100,116,139,0.2); color: var(--text-muted); border-radius: 6px; font-weight: 600; text-transform: uppercase;">DISABLED</span>') +
'</div>' +
'<div style="font-size: 12px; color: var(--text-muted); line-height: 1.5;">' + description + '</div>' +
'</div>' +
'<label class="switch-container" style="cursor: pointer; display: block;">' +
'<input type="checkbox" ' + (alert.enabled ? 'checked' : '') + ' data-alert-id="' + alert.id + '" class="alert-toggle" style="display: none;" />' +
'<span class="switch-slider" style="display: block; width: 54px; height: 28px; background: ' + (alert.enabled ? severity.color : 'rgba(255,255,255,0.1)') + '; border-radius: 28px; position: relative; transition: all 0.3s;">' +
'<span style="position: absolute; top: 3px; left: ' + (alert.enabled ? '29px' : '3px') + '; width: 22px; height: 22px; background: white; border-radius: 50%; transition: all 0.3s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);"></span>' +
'</span>' +
'</label>' +
'</div>';
}

// Categorize alerts
const categories = {
financial: [],
customer: [],
operational: [],
performance: []
};

state.alerts.forEach(alert => {
const category = getAlertCategory(alert.rule.type);
if (categories[category]) {
categories[category].push(alert);
}
});

// Render each category
const financialContainer = $('#financialAlertsList');
if (financialContainer) {
financialContainer.innerHTML = categories.financial.length > 0 ? 
categories.financial.map(renderAlertItem).join('') : 
'<p class="tiny muted">No financial alerts configured</p>';
}

const customerContainer = $('#customerAlertsList');
if (customerContainer) {
customerContainer.innerHTML = categories.customer.length > 0 ? 
categories.customer.map(renderAlertItem).join('') : 
'<p class="tiny muted">No customer alerts configured</p>';
}

const operationalContainer = $('#operationalAlertsList');
if (operationalContainer) {
operationalContainer.innerHTML = categories.operational.length > 0 ? 
categories.operational.map(renderAlertItem).join('') : 
'<p class="tiny muted">No operational alerts configured</p>';
}

const performanceContainer = $('#performanceAlertsList');
if (performanceContainer) {
performanceContainer.innerHTML = categories.performance.length > 0 ? 
categories.performance.map(renderAlertItem).join('') : 
'<p class="tiny muted">No performance alerts configured</p>';
}

// Add event listeners for toggles
setTimeout(() => {
$$('.alert-toggle').forEach(toggle => {
toggle.addEventListener('change', (e) => {
const alertId = e.target.dataset.alertId;
const alert = state.alerts.find(a => a.id === alertId);
if (alert) {
alert.enabled = e.target.checked;
save();
showToast(alert.name + ' ' + (alert.enabled ? 'enabled' : 'disabled'));
renderAlertsSection();
renderAlertLists();
}
});
});
}, 100);
}

// Delete selected alerts function
window.deleteSelectedAlerts = function() {
const checkboxes = document.querySelectorAll('.alert-delete-checkbox:checked');
if (checkboxes.length === 0) {
showToast('❌ No alerts selected', true);
return;
}

if (!confirm(`Delete ${checkboxes.length} selected alert(s)? This action cannot be undone.`)) {
return;
}

const idsToDelete = Array.from(checkboxes).map(cb => cb.dataset.alertId);
state.alerts = state.alerts.filter(alert => !idsToDelete.includes(alert.id));
save();
showToast(`🗑️ Deleted ${idsToDelete.length} alert(s)`);
renderAlertsSection();
renderAlertLists();
};

function renderMini() {
const insightHtml = state.insights.map(ins => {
return '<div class="insight-item">' + ins.text + '</div>';
}).join('');
const insList = $('#insightsList');
if(insList) insList.innerHTML = insightHtml || '<p class="tiny muted">No insights available</p>';

const actHtml = state.activities.slice(0, 6).map(act => {
const date = new Date(act.when);
const timeAgo = Math.floor((new Date() - date) / 60000);
return '<div class="activity-item">' +
'<div>' + act.action + '</div>' +
'<div class="time">' + (timeAgo < 60 ? timeAgo + ' min ago' : Math.floor(timeAgo / 60) + ' hr ago') + '</div>' +
'</div>';
}).join('');
const actFeed = $('#activityFeed');
if(actFeed) actFeed.innerHTML = actHtml || '<p class="tiny muted">No recent activity</p>';
}

function renderScheduledReports() {
const html = state.scheduledReports.map(r => {
return '<div style="padding: 12px; margin-bottom: 10px; background: rgba(255,255,255,0.03); border-radius: 8px; font-size: 13px;">' +
'<div style="font-weight: 600; margin-bottom: 4px;">' + r.name + '</div>' +
'<div class="tiny muted">' + r.schedule + '</div>' +
'</div>';
}).join('');
const container = $('#scheduledReports');
if(container) container.innerHTML = html;
}

// ============================================
// CALENDAR FUNCTIONS
// ============================================
let calendarState = {
	connected: false,
	view: 'month',
	currentDate: new Date(),
	events: []
};

function connectGoogleCalendar() {
	// Simulate connection
	calendarState.connected = true;
	calendarState.events = generateDemoCalendarEvents();
	renderCalendarView();
	showToast('✅ Connected to Google Calendar');
}

function generateDemoCalendarEvents() {
	const events = [];
	const now = new Date();
	
	// Generate some demo events
	const eventTemplates = [
		{ title: 'Team Standup', duration: 30, color: '#6ee7b7' },
		{ title: 'Client Meeting', duration: 60, color: '#7c5cff' },
		{ title: 'Product Review', duration: 90, color: '#60a5fa' },
		{ title: 'Strategy Planning', duration: 120, color: '#ffb86b' },
		{ title: '1:1 with Manager', duration: 30, color: '#ff6b6b' },
		{ title: 'Workshop', duration: 180, color: '#4ade80' },
		{ title: 'Demo Presentation', duration: 45, color: '#7c5cff' },
		{ title: 'Code Review', duration: 60, color: '#60a5fa' },
		{ title: 'Lunch & Learn', duration: 60, color: '#ffb86b' },
		{ title: 'Sprint Planning', duration: 120, color: '#6ee7b7' }
	];
	
	// Add events for the next 30 days
	for (let i = 0; i < 25; i++) {
		const daysAhead = Math.floor(Math.random() * 30);
		const template = eventTemplates[Math.floor(Math.random() * eventTemplates.length)];
		const eventDate = new Date(now);
		eventDate.setDate(eventDate.getDate() + daysAhead);
		eventDate.setHours(9 + Math.floor(Math.random() * 8), [0, 15, 30, 45][Math.floor(Math.random() * 4)], 0, 0);
		
		const endDate = new Date(eventDate);
		endDate.setMinutes(endDate.getMinutes() + template.duration);
		
		events.push({
			id: 'evt' + i,
			title: template.title,
			start: eventDate,
			end: endDate,
			color: template.color,
			description: 'Demo event for ' + template.title
		});
	}
	
	return events.sort((a, b) => a.start - b.start);
}

function renderCalendarView() {
	if (!calendarState.connected) {
		$('#calendarStatus').style.display = 'none';
		$('#calendarDisconnected').style.display = 'block';
		$('#calendarViewPanel').style.display = 'none';
		$('#upcomingEventsPanel').style.display = 'none';
		return;
	}
	
	$('#calendarStatus').style.display = 'block';
	$('#calendarDisconnected').style.display = 'none';
	$('#calendarViewPanel').style.display = 'block';
	$('#upcomingEventsPanel').style.display = 'block';
	
	// Update calendar month display
	const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
	                     'July', 'August', 'September', 'October', 'November', 'December'];
	const monthEl = $('#calendarMonth');
	if (monthEl) {
		monthEl.textContent = monthNames[calendarState.currentDate.getMonth()] + ' ' + calendarState.currentDate.getFullYear();
	}
	
	// Render based on view
	if (calendarState.view === 'month') {
		renderMonthView();
	} else if (calendarState.view === 'week') {
		renderWeekView();
	} else {
		renderDayView();
	}
	
	renderUpcomingEvents();
}

function renderMonthView() {
	const year = calendarState.currentDate.getFullYear();
	const month = calendarState.currentDate.getMonth();
	const firstDay = new Date(year, month, 1);
	const lastDay = new Date(year, month + 1, 0);
	const startingDayOfWeek = firstDay.getDay();
	const daysInMonth = lastDay.getDate();
	
	let html = '<div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 1px; background: var(--glass-border); border: 1px solid var(--glass-border); border-radius: 12px; overflow: hidden;">';
	
	// Day headers
	const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	dayNames.forEach(day => {
		html += '<div style="padding: 12px; background: rgba(110,231,183,0.1); text-align: center; font-weight: 700; font-size: 12px; color: var(--text-primary);">' + day + '</div>';
	});
	
	// Empty cells before first day
	for (let i = 0; i < startingDayOfWeek; i++) {
		html += '<div style="padding: 12px; background: var(--bg-secondary); min-height: 100px;"></div>';
	}
	
	// Days of month
	const today = new Date();
	for (let day = 1; day <= daysInMonth; day++) {
		const currentDate = new Date(year, month, day);
		const isToday = currentDate.toDateString() === today.toDateString();
		const dayEvents = calendarState.events.filter(e => {
			const eventDate = new Date(e.start);
			return eventDate.getDate() === day && 
			       eventDate.getMonth() === month && 
			       eventDate.getFullYear() === year;
		});
		
		html += '<div style="padding: 8px; background: var(--bg-secondary); min-height: 100px; position: relative; ' + (isToday ? 'outline: 2px solid var(--accent-primary);' : '') + '">' +
		        '<div style="font-weight: 700; margin-bottom: 8px; font-size: 14px; ' + (isToday ? 'color: var(--accent-primary);' : 'color: var(--text-primary);') + '">' + day + '</div>';
		
		// Add events for this day
		dayEvents.slice(0, 3).forEach(evt => {
			const startTime = evt.start.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
			html += '<div style="font-size: 10px; padding: 4px; margin-bottom: 4px; background: ' + evt.color + '20; border-left: 3px solid ' + evt.color + '; border-radius: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="' + evt.title + ' at ' + startTime + '">' +
			        '<div style="font-weight: 600; color: var(--text-primary);">' + startTime + '</div>' +
			        '<div style="color: var(--text-secondary);">' + evt.title + '</div>' +
			        '</div>';
		});
		
		if (dayEvents.length > 3) {
			html += '<div style="font-size: 10px; color: var(--text-muted); margin-top: 4px;">+' + (dayEvents.length - 3) + ' more</div>';
		}
		
		html += '</div>';
	}
	
	html += '</div>';
	
	const calendarView = $('#calendarView');
	if (calendarView) calendarView.innerHTML = html;
}

function renderWeekView() {
	const html = '<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
	             '<div style="font-size: 48px; margin-bottom: 16px;">📅</div>' +
	             '<h3>Week View</h3>' +
	             '<p class="tiny muted">Week view coming soon</p></div>';
	const calendarView = $('#calendarView');
	if (calendarView) calendarView.innerHTML = html;
}

function renderDayView() {
	const html = '<div style="text-align: center; padding: 60px; color: var(--text-muted);">' +
	             '<div style="font-size: 48px; margin-bottom: 16px;">📅</div>' +
	             '<h3>Day View</h3>' +
	             '<p class="tiny muted">Day view coming soon</p></div>';
	const calendarView = $('#calendarView');
	if (calendarView) calendarView.innerHTML = html;
}

function renderUpcomingEvents() {
	const now = new Date();
	const nextWeek = new Date(now);
	nextWeek.setDate(nextWeek.getDate() + 7);
	
	const upcoming = calendarState.events.filter(e => {
		return new Date(e.start) >= now && new Date(e.start) <= nextWeek;
	}).slice(0, 10);
	
	if (upcoming.length === 0) {
		const list = $('#upcomingEventsList');
		if (list) {
			list.innerHTML = '<div style="text-align: center; padding: 40px; color: var(--text-muted);">' +
			                 '<div style="font-size: 32px; margin-bottom: 12px;">📅</div>' +
			                 '<p>No upcoming events in the next 7 days</p></div>';
		}
		return;
	}
	
	const html = upcoming.map(evt => {
		const startDate = new Date(evt.start);
		const endDate = new Date(evt.end);
		const isToday = startDate.toDateString() === now.toDateString();
		const isTomorrow = startDate.toDateString() === new Date(now.getTime() + 86400000).toDateString();
		
		let dateLabel = startDate.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });
		if (isToday) dateLabel = 'Today';
		if (isTomorrow) dateLabel = 'Tomorrow';
		
		const timeStr = startDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }) + 
		                ' - ' + endDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
		
		return '<div style="padding: 16px; margin-bottom: 12px; background: rgba(255,255,255,0.03); border-left: 4px solid ' + evt.color + '; border-radius: 8px; transition: all 0.3s ease; cursor: pointer;" onmouseover="this.style.background=\'rgba(255,255,255,0.06)\'" onmouseout="this.style.background=\'rgba(255,255,255,0.03)\'">' +
		       '<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 8px;">' +
		       '<div style="font-weight: 700; font-size: 15px; color: var(--text-primary);">' + evt.title + '</div>' +
		       '<span style="font-size: 11px; padding: 4px 8px; background: ' + evt.color + '20; color: var(--text-primary); border-radius: 6px; font-weight: 600;">' + dateLabel + '</span>' +
		       '</div>' +
		       '<div style="font-size: 13px; color: var(--text-secondary); display: flex; align-items: center; gap: 8px;">' +
		       '<span>🕐</span>' + timeStr +
		       '</div></div>';
	}).join('');
	
	const list = $('#upcomingEventsList');
	if (list) list.innerHTML = html;
}

function changeCalendarView(view) {
	calendarState.view = view;
	
	// Update button states
	$$('button[data-view]').forEach(btn => {
		btn.classList.remove('active');
	});
	const activeBtn = $('button[data-view="' + view + '"]');
	if (activeBtn) activeBtn.classList.add('active');
	
	renderCalendarView();
}

function navigateCalendar(direction) {
	if (calendarState.view === 'month') {
		calendarState.currentDate.setMonth(calendarState.currentDate.getMonth() + direction);
	} else if (calendarState.view === 'week') {
		calendarState.currentDate.setDate(calendarState.currentDate.getDate() + (direction * 7));
	} else {
		calendarState.currentDate.setDate(calendarState.currentDate.getDate() + direction);
	}
	renderCalendarView();
}

// ============================================
// ADVANCED ANALYTICS CALCULATIONS
// ============================================
function renderAnalytics() {
console.log('📊 Calculating advanced analytics...');

// Helper function to create KPI card HTML
function createKPI(label, value, change, icon, positive = true, hint = '', hintId = '') {
const changeClass = positive ? 'positive' : 'negative';
const changeSymbol = positive ? '↑' : '↓';
const hintAttr = hint ? ` data-hint="${hint.replace(/"/g, '&quot;')}" data-hint-id="${hintId}"` : '';
return `<div class="kpi-card"${hintAttr} onclick="showKPIHint(this)">
<div class="kpi-header">
<div class="kpi-label">${label}</div>
<div class="kpi-icon">${icon}</div>
</div>
<div class="kpi-value">${value}</div>
${change !== null ? `<div class="kpi-change ${changeClass}">${changeSymbol} ${change}</div>` : ''}
</div>`;
}

// Global function to show KPI hints
window.showKPIHint = function(element) {
const hint = element.getAttribute('data-hint');
const hintId = element.getAttribute('data-hint-id');
if (!hint || !hintId) return;

// Get the hint display element
const hintDisplay = $('#' + hintId);
if (!hintDisplay) return;

// Check if this hint is already showing
const isActive = hintDisplay.classList.contains('active');
const isSameHint = hintDisplay.getAttribute('data-current-hint') === hint;

// Remove active class from all KPI cards in this section
const section = element.closest('.kpi-grid').parentElement;
const cards = section.querySelectorAll('.kpi-card');
cards.forEach(card => card.classList.remove('active-hint'));

// If clicking the same hint, close it
if (isActive && isSameHint) {
hintDisplay.classList.remove('active');
hintDisplay.setAttribute('data-current-hint', '');
return;
}

// Parse the hint to separate title and content
const parts = hint.split('</strong>');
const title = parts[0].replace('<strong>', '');
const content = parts[1] || hint;

// Show the new hint
hintDisplay.innerHTML = `
<button class="hint-close" onclick="closeHint('${hintId}')">×</button>
<div class="hint-title">💡 ${title}</div>
<div class="hint-content">${content}</div>
`;
hintDisplay.classList.add('active');
hintDisplay.setAttribute('data-current-hint', hint);
element.classList.add('active-hint');
}

window.closeHint = function(hintId) {
const hintDisplay = $('#' + hintId);
if (hintDisplay) {
hintDisplay.classList.remove('active');
hintDisplay.setAttribute('data-current-hint', '');
}
// Remove active class from all KPI cards
const cards = $$('.kpi-card.active-hint');
cards.forEach(card => card.classList.remove('active-hint'));
}

// Get date ranges for calculations
const now = new Date();
const currentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
const last3Months = new Date(now.getFullYear(), now.getMonth() - 3, 1);
const last30Days = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
const last60Days = new Date(now.getTime() - 60 * 24 * 60 * 60 * 1000);

// Filter transactions by date ranges
const currentMonthTxns = state.transactions.filter(t => new Date(t.when) >= currentMonth);
const lastMonthTxns = state.transactions.filter(t => new Date(t.when) >= lastMonth && new Date(t.when) < currentMonth);
const last30DaysTxns = state.transactions.filter(t => new Date(t.when) >= last30Days);
const last60DaysTxns = state.transactions.filter(t => new Date(t.when) >= last60Days && new Date(t.when) < last30Days);

// === REVENUE METRICS ===
const currentMonthRevenue = currentMonthTxns.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const lastMonthRevenue = lastMonthTxns.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const totalRevenue = state.transactions.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const last30Revenue = last30DaysTxns.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);
const last60Revenue = last60DaysTxns.filter(t => t.type === 'revenue').reduce((sum, t) => sum + t.amount, 0);

const revenueGrowth = lastMonthRevenue > 0 ? (((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100).toFixed(1) + '%' : 'N/A';
const mrr = (currentMonthRevenue).toFixed(0);
const arr = (currentMonthRevenue * 12).toFixed(0);
const avgDealSize = currentMonthTxns.filter(t => t.type === 'revenue').length > 0 
	? (currentMonthRevenue / currentMonthTxns.filter(t => t.type === 'revenue').length).toFixed(0) 
	: '0';

// === EXPENSE METRICS ===
const currentMonthExpenses = currentMonthTxns.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
const lastMonthExpenses = lastMonthTxns.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
const totalExpenses = state.transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);

const expenseChange = lastMonthExpenses > 0 ? (((currentMonthExpenses - lastMonthExpenses) / lastMonthExpenses) * 100).toFixed(1) + '%' : 'N/A';
const burnRate = currentMonthExpenses.toFixed(0);
const netProfit = currentMonthRevenue - currentMonthExpenses;
const profitMargin = currentMonthRevenue > 0 ? ((netProfit / currentMonthRevenue) * 100).toFixed(1) + '%' : '0%';
const runway = netProfit > 0 && currentMonthExpenses > 0 ? ((totalRevenue - totalExpenses) / currentMonthExpenses).toFixed(1) + ' mo' : 'N/A';

// === CUSTOMER METRICS ===
const totalCustomers = state.contacts.length;
const newCustomersThisMonth = state.contacts.filter(c => new Date(c.lastActivity) >= currentMonth).length;
const newCustomersLastMonth = state.contacts.filter(c => new Date(c.lastActivity) >= lastMonth && new Date(c.lastActivity) < currentMonth).length;
const customerGrowth = newCustomersLastMonth > 0 ? (((newCustomersThisMonth - newCustomersLastMonth) / newCustomersLastMonth) * 100).toFixed(1) + '%' : 'N/A';

const avgRevenuePerCustomer = totalCustomers > 0 ? (totalRevenue / totalCustomers).toFixed(0) : '0';
const customerLifetimeValue = totalCustomers > 0 && currentMonthRevenue > 0 
	? ((currentMonthRevenue / totalCustomers) * 12).toFixed(0) 
	: '0';

// Calculate CAC (Customer Acquisition Cost) - marketing/sales expenses per new customer
const acquisitionExpenses = currentMonthTxns.filter(t => 
	t.type === 'expense' && 
	(t.description.toLowerCase().includes('marketing') || 
	 t.description.toLowerCase().includes('sales') ||
	 t.description.toLowerCase().includes('advertising'))
).reduce((sum, t) => sum + t.amount, 0);
const cac = newCustomersThisMonth > 0 ? (acquisitionExpenses / newCustomersThisMonth).toFixed(0) : '0';

// === OPERATIONAL EFFICIENCY ===
const totalTasks = state.tasks.length;
const completedTasks = state.tasks.filter(t => t.completed).length;
const taskCompletionRate = totalTasks > 0 ? ((completedTasks / totalTasks) * 100).toFixed(1) + '%' : '0%';

const overdueTasks = state.tasks.filter(t => !t.completed && new Date(t.dueDate) < now).length;
const onTimeTasks = state.tasks.filter(t => t.completed).length; // Simplified: assuming completed = on time
const onTimeDeliveryRate = totalTasks > 0 ? ((onTimeTasks / totalTasks) * 100).toFixed(1) + '%' : '0%';

const highPriorityTasks = state.tasks.filter(t => t.priority === 'high' && !t.completed).length;
const avgTasksPerDay = totalTasks > 0 ? (totalTasks / 30).toFixed(1) : '0';

// Roadmap progress
const roadmapTotal = state.roadmapItems.length;
const roadmapCompleted = state.roadmapItems.filter(r => r.status === 'completed').length;
const roadmapProgress = roadmapTotal > 0 ? ((roadmapCompleted / roadmapTotal) * 100).toFixed(1) + '%' : '0%';

// === PRODUCT PERFORMANCE ===
const productRevenue = {};
state.products.forEach(p => {
	const rev = state.transactions
		.filter(t => t.type === 'revenue' && t.product === p.id)
		.reduce((sum, t) => sum + t.amount, 0);
	productRevenue[p.name] = rev;
});

const topProduct = Object.entries(productRevenue).sort((a, b) => b[1] - a[1])[0];
const topProductName = topProduct ? topProduct[0] : 'N/A';
const topProductRevenue = topProduct ? '$' + topProduct[1].toFixed(0) : '$0';

const avgRevenuePerProduct = state.products.length > 0 
	? (totalRevenue / state.products.length).toFixed(0) 
	: '0';

// Product diversity score (how evenly revenue is distributed)
const productRevenueValues = Object.values(productRevenue);
const avgProductRev = productRevenueValues.reduce((a, b) => a + b, 0) / productRevenueValues.length || 1;
const variance = productRevenueValues.reduce((sum, val) => sum + Math.pow(val - avgProductRev, 2), 0) / productRevenueValues.length;
const diversityScore = totalRevenue > 0 ? Math.max(0, 100 - (Math.sqrt(variance) / avgProductRev * 100)).toFixed(0) + '/100' : 'N/A';

// === DIVISION PERFORMANCE ===
const divisionData = Object.entries(state.divisions).map(([key, div]) => ({
	name: div.name,
	revenue: div.revenue,
	expenses: div.expenses,
	profit: div.revenue - div.expenses
}));

const topDivision = divisionData.sort((a, b) => b.profit - a.profit)[0];
const totalDivisionRevenue = divisionData.reduce((sum, d) => sum + d.revenue, 0);
const topDivisionShare = totalDivisionRevenue > 0 
	? ((topDivision.revenue / totalDivisionRevenue) * 100).toFixed(1) + '%'
	: '0%';

const mostProfitableDivision = topDivision ? topDivision.name : 'N/A';
const divisionProfitMargin = topDivision && topDivision.revenue > 0
	? ((topDivision.profit / topDivision.revenue) * 100).toFixed(1) + '%'
	: '0%';

// === TREND ANALYSIS ===
const mom30Growth = last60Revenue > 0 ? (((last30Revenue - last60Revenue) / last60Revenue) * 100).toFixed(1) + '%' : 'N/A';
const revenuePerDay = last30DaysTxns.filter(t => t.type === 'revenue').length > 0 
	? (last30Revenue / 30).toFixed(0)
	: '0';

const transactionVelocity = last30DaysTxns.length > 0 ? (last30DaysTxns.length / 30).toFixed(1) : '0';
const avgTransactionValue = last30DaysTxns.length > 0 
	? (last30DaysTxns.reduce((sum, t) => sum + t.amount, 0) / last30DaysTxns.length).toFixed(0)
	: '0';

// Quick ratio (current assets / current liabilities) - simplified
const quickRatio = currentMonthExpenses > 0 
	? (currentMonthRevenue / currentMonthExpenses).toFixed(2) 
	: 'N/A';

// === RENDER ALL METRICS ===

// Revenue Metrics
const revenueHtml = [
	createKPI('Total Revenue', '$' + totalRevenue.toFixed(0), null, '💰', true, '<strong>Total Revenue</strong>The cumulative income from all revenue transactions. This is your gross revenue before any expenses are deducted. A growing number indicates healthy business performance.', 'revenueHint'),
	createKPI('MRR', '$' + mrr, revenueGrowth, '📈', revenueGrowth !== 'N/A' && parseFloat(revenueGrowth) >= 0, '<strong>Monthly Recurring Revenue</strong>The predictable revenue you can expect each month. Growth shows increasing momentum. SaaS companies typically aim for 10-20% month-over-month growth.', 'revenueHint'),
	createKPI('ARR', '$' + arr, null, '🎯', true, '<strong>Annual Run Rate</strong>Your projected annual revenue based on current monthly performance (MRR × 12). This helps forecast yearly performance and is key for investor discussions.', 'revenueHint'),
	createKPI('Avg Deal Size', '$' + avgDealSize, null, '💵', true, '<strong>Average Deal Size</strong>The average value of each revenue transaction. Higher deal sizes often mean better profit margins and fewer transactions needed to hit revenue goals.', 'revenueHint'),
	createKPI('Revenue (30d)', '$' + last30Revenue.toFixed(0), mom30Growth, '📊', mom30Growth !== 'N/A' && parseFloat(mom30Growth) >= 0, '<strong>30-Day Revenue</strong>Revenue generated in the last 30 days compared to the previous 30 days. This short-term trend indicator helps you spot momentum shifts quickly.', 'revenueHint'),
	createKPI('Revenue/Day', '$' + revenuePerDay, null, '⚡', true, '<strong>Revenue per Day</strong>Your average daily revenue over the last 30 days. This helps you understand your daily earning power and set realistic short-term targets.', 'revenueHint')
].join('');

// Expense Metrics
const expenseHtml = [
	createKPI('Total Expenses', '$' + totalExpenses.toFixed(0), null, '💸', true, '<strong>Total Expenses</strong>The cumulative cost of all business expenses. Keeping this under control relative to revenue is critical for profitability and sustainable growth.', 'expenseHint'),
	createKPI('Monthly Burn', '$' + burnRate, expenseChange, '🔥', false, '<strong>Monthly Burn Rate</strong>How much cash you\'re spending each month. Lower is better unless you\'re strategically investing for growth. Startups should monitor this closely against available capital.', 'expenseHint'),
	createKPI('Net Profit', (netProfit >= 0 ? '$' : '-$') + Math.abs(netProfit).toFixed(0), null, '💎', netProfit >= 0, '<strong>Net Profit</strong>Revenue minus expenses - your bottom line. Positive means you\'re profitable, negative means you\'re spending more than earning. Aim to reach profitability or have a clear path to it.', 'expenseHint'),
	createKPI('Profit Margin', profitMargin, null, '📊', parseFloat(profitMargin) > 0, '<strong>Profit Margin</strong>Net profit as a percentage of revenue. Higher margins mean more efficient operations. SaaS companies typically aim for 20-40% margins, with best-in-class reaching 70%+.', 'expenseHint'),
	createKPI('Runway', runway, null, '⏳', true, '<strong>Cash Runway</strong>How many months you can operate at current burn rate before running out of money. Most startups aim for 12-18 months of runway. Below 6 months requires immediate action.', 'expenseHint'),
	createKPI('Quick Ratio', quickRatio, null, '⚖️', parseFloat(quickRatio) > 1, '<strong>Quick Ratio</strong>Current assets divided by current liabilities. Above 1.0 means you can cover short-term obligations. Above 2.0 indicates excellent financial health and flexibility.', 'expenseHint')
].join('');

// Customer Metrics
const customerHtml = [
	createKPI('Total Customers', totalCustomers.toString(), customerGrowth, '👥', customerGrowth !== 'N/A' && parseFloat(customerGrowth) >= 0, '<strong>Total Customers</strong>Your complete customer base. Growing this number while maintaining quality and profitability is key. Track growth rate to understand momentum.', 'customerHint'),
	createKPI('New (This Month)', newCustomersThisMonth.toString(), null, '✨', true, '<strong>New Customers This Month</strong>Fresh customer acquisitions this month. Consistent new customer flow indicates healthy marketing and sales. Compare to previous months to identify trends.', 'customerHint'),
	createKPI('Avg Revenue/Customer', '$' + avgRevenuePerCustomer, null, '💰', true, '<strong>Average Revenue per Customer</strong>Total revenue divided by customer count. Increasing this metric through upsells, cross-sells, or premium features is often easier than acquiring new customers.', 'customerHint'),
	createKPI('Customer LTV', '$' + customerLifetimeValue, null, '🎯', true, '<strong>Customer Lifetime Value</strong>The projected total revenue from a customer over their entire relationship with you. Higher LTV means each customer is more valuable. Aim to increase this over time.', 'customerHint'),
	createKPI('CAC', '$' + cac, null, '📈', true, '<strong>Customer Acquisition Cost</strong>The average cost to acquire one customer (marketing + sales expenses ÷ new customers). Lower is better. Track this to ensure sustainable growth.', 'customerHint'),
	createKPI('LTV:CAC Ratio', cac > 0 ? (parseFloat(customerLifetimeValue) / parseFloat(cac)).toFixed(2) : 'N/A', null, '⚖️', true, '<strong>LTV to CAC Ratio</strong>A critical metric showing return on customer acquisition. Aim for 3:1 or higher - meaning each customer generates 3× what you spent to acquire them. Below 1:1 is unsustainable.', 'customerHint')
].join('');

// Operational Metrics
const operationalHtml = [
	createKPI('Task Completion', taskCompletionRate, null, '✅', parseFloat(taskCompletionRate) > 50, '<strong>Task Completion Rate</strong>Percentage of tasks that have been completed. Higher rates indicate strong execution. Below 50% suggests capacity issues or poor prioritization.', 'operationalHint'),
	createKPI('On-Time Delivery', onTimeDeliveryRate, null, '⏰', parseFloat(onTimeDeliveryRate) > 70, '<strong>On-Time Delivery Rate</strong>Tasks completed by their due date. Above 70% is good, above 85% is excellent. Low rates may indicate unrealistic deadlines or execution challenges.', 'operationalHint'),
	createKPI('Overdue Tasks', overdueTasks.toString(), null, '⚠️', overdueTasks === 0, '<strong>Overdue Tasks</strong>Tasks past their due date that remain incomplete. Zero is ideal. High numbers indicate bottlenecks or resource constraints that need addressing.', 'operationalHint'),
	createKPI('High Priority', highPriorityTasks.toString(), null, '🔴', true, '<strong>High Priority Tasks</strong>Critical tasks requiring immediate attention. Keep this number manageable - if everything is high priority, nothing is. Aim to complete these first.', 'operationalHint'),
	createKPI('Roadmap Progress', roadmapProgress, null, '🗺️', parseFloat(roadmapProgress) > 50, '<strong>Roadmap Progress</strong>Percentage of strategic initiatives completed. Above 50% shows good execution on long-term goals. Track quarterly to ensure you\'re hitting strategic targets.', 'operationalHint'),
	createKPI('Avg Tasks/Day', avgTasksPerDay, null, '📋', true, '<strong>Average Tasks per Day</strong>Daily task throughput. This helps understand team capacity and workload. Use for capacity planning and identifying when you need additional resources.', 'operationalHint')
].join('');

// Product Metrics
const productHtml = [
	createKPI('Total Products', state.products.length.toString(), null, '📦', true, '<strong>Total Products</strong>The number of products in your portfolio. More products can mean more revenue streams but also increased complexity. Focus on products that deliver the best ROI.', 'productHint'),
	createKPI('Top Product', topProductName, null, '🏆', true, '<strong>Top Product</strong>Your best-performing product by revenue. This is often your flagship offering. Consider investing more resources into this winner while evaluating underperformers.', 'productHint'),
	createKPI('Top Product Rev', topProductRevenue, null, '💎', true, '<strong>Top Product Revenue</strong>Total revenue from your best-performing product. If one product dominates, you have concentration risk. Aim for balanced revenue across 2-3 strong products.', 'productHint'),
	createKPI('Avg Rev/Product', '$' + avgRevenuePerProduct, null, '📊', true, '<strong>Average Revenue per Product</strong>Total revenue divided by product count. Helps identify if you have products dragging down the portfolio. Consider sunsetting low performers.', 'productHint'),
	createKPI('Revenue Diversity', diversityScore, null, '🎯', true, '<strong>Revenue Diversity Score</strong>How evenly revenue is distributed across products (0-100). Higher scores mean less concentration risk. Scores above 60 indicate a well-balanced portfolio.', 'productHint'),
	createKPI('Products Active', state.products.length.toString(), null, '✅', true, '<strong>Active Products</strong>Currently available products. Regularly review to ensure each product justifies the development and support costs it requires.', 'productHint')
].join('');

// Division Metrics
const divisionHtml = [
	createKPI('Total Divisions', Object.keys(state.divisions).length.toString(), null, '🏢', true, '<strong>Total Divisions</strong>The number of business units or divisions in your organization. Each should have clear ownership and accountability for its performance.', 'divisionHint'),
	createKPI('Top Division', mostProfitableDivision, null, '🥇', true, '<strong>Top Division</strong>Your most profitable business division. Study what makes it successful and apply those learnings to other divisions. This is your strongest performer.', 'divisionHint'),
	createKPI('Top Division Share', topDivisionShare, null, '📊', true, '<strong>Top Division Market Share</strong>Percentage of total revenue from your top division. High concentration (>60%) means dependency risk. Aim for 2-3 strong divisions for stability.', 'divisionHint'),
	createKPI('Division Margin', divisionProfitMargin, null, '💎', parseFloat(divisionProfitMargin) > 0, '<strong>Division Profit Margin</strong>Profitability of your top division as a percentage. Higher margins indicate efficient operations. Compare across divisions to identify best practices.', 'divisionHint'),
	createKPI('Division Revenue', '$' + totalDivisionRevenue.toFixed(0), null, '💰', true, '<strong>Total Division Revenue</strong>Combined revenue across all divisions. This should match your total revenue and helps you understand the contribution of each business unit.', 'divisionHint'),
	createKPI('Avg Division Profit', '$' + (divisionData.reduce((sum, d) => sum + d.profit, 0) / divisionData.length).toFixed(0), null, '📈', true, '<strong>Average Division Profit</strong>Mean profit across all divisions. Divisions consistently below this average may need strategic review or restructuring.', 'divisionHint')
].join('');

// Trend Metrics
const trendHtml = [
	createKPI('MoM Growth', revenueGrowth, null, '📈', revenueGrowth !== 'N/A' && parseFloat(revenueGrowth) >= 0, '<strong>Month-over-Month Growth</strong>Revenue growth compared to last month. SaaS companies target 10-20% MoM. Consistent growth compounds dramatically - 15% monthly growth means 4.3× revenue in a year.', 'trendHint'),
	createKPI('30d Growth', mom30Growth, null, '📊', mom30Growth !== 'N/A' && parseFloat(mom30Growth) >= 0, '<strong>30-Day Growth Rate</strong>Rolling 30-day revenue growth. This smooths out monthly variations and shows true momentum. More reliable than single month comparisons.', 'trendHint'),
	createKPI('Transaction Velocity', transactionVelocity + '/day', null, '⚡', true, '<strong>Transaction Velocity</strong>Average transactions per day. Higher velocity means more business activity. Declining velocity may signal market saturation or need for new customer acquisition.', 'trendHint'),
	createKPI('Avg Transaction', '$' + avgTransactionValue, null, '💵', true, '<strong>Average Transaction Value</strong>Mean value of all transactions. Track this over time - increasing values suggest customers are buying more or you\'re moving upmarket. Decreasing may indicate competitive pressure.', 'trendHint'),
	createKPI('Active Contacts', state.contacts.filter(c => new Date(c.lastActivity) >= last30Days).length.toString(), null, '👥', true, '<strong>Active Contacts (30d)</strong>Customers with recent activity. This engagement metric predicts future revenue. Low numbers relative to total customers may indicate churn risk.', 'trendHint'),
	createKPI('Recent Transactions', last30DaysTxns.length.toString(), null, '🔄', true, '<strong>Recent Transactions (30d)</strong>Transaction count in the last 30 days. Compare to previous periods to spot trends. Declining counts need investigation even if revenue is stable.', 'trendHint')
].join('');

// Update all containers
const containers = {
	'revenueMetrics': revenueHtml,
	'expenseMetrics': expenseHtml,
	'customerMetrics': customerHtml,
	'operationalMetrics': operationalHtml,
	'productMetrics': productHtml,
	'divisionMetrics': divisionHtml,
	'trendMetrics': trendHtml
};

Object.entries(containers).forEach(([id, html]) => {
	const el = $('#' + id);
	if (el) el.innerHTML = html;
});

console.log('✅ Advanced analytics rendered');
}

function renderAll() {
console.log('🔄 Rendering all...');
renderAnalytics();
renderSidebarProducts();
renderKPIs();
drawTrendChart();
drawExpenseChart();
drawProductDonut();
drawDivisionChart();
runInsights();
renderTxnTable();
renderContacts();
renderProductsGrid();
renderTasks();
renderRoadmap();
renderDivisions();
renderNotes();
renderTeam();
renderVendors();
renderReports();
renderMini();
renderInvoiceReminders();
renderScheduledReports();
renderProductsSelects();
renderCalendarView();
renderAlertsSection();
renderAlertLists();
console.log('✅ All rendered');
}

function renderProductsSelects() {
const sel = $('#prodSelect');
if(!sel) return;
sel.innerHTML = '<option value="all">All products</option>';
state.products.forEach(p => {
sel.insertAdjacentHTML('beforeend', '<option value="' + p.id + '">' + p.name + '</option>');
});
}

// ============================================
// INITIALIZATION
// ============================================
console.log('📦 Loading state...');
load();
if(state.transactions.length === 0) {
console.log('📊 Generating demo data...');
generateDemoData();
}

console.log('🕐 Initializing...');
updateDateTime();
updateGreeting();
setInterval(updateDateTime, 1000);
setInterval(updateGreeting, 60000);

// Check for invoice reminders every hour
detectRecurringInvoices();
setInterval(() => {
	renderInvoiceReminders();
}, 3600000); // Check every hour

console.log('🔌 Wiring...');
wireNav();
wireControls();
setupGlobalSearch();

console.log('🎨 Rendering...');
renderAll();

// Initialize Advertising Module
initAdvertising();

const modalOverlay = $('#modalOverlay');
if (modalOverlay) {
modalOverlay.addEventListener('click', e => {
if(e.target.id === 'modalOverlay') closeModal();
});
}

let resizeTimer;
window.addEventListener('resize', () => {
clearTimeout(resizeTimer);
resizeTimer = setTimeout(() => {
drawTrendChart();
drawExpenseChart();
drawProductDonut();
drawDivisionChart();
}, 250);
});

window.addEventListener('beforeunload', () => save());

setTimeout(() => {
showToast('Welcome to Virely Ops! All features active.', 3500);
}, 800);

console.log('✅✅✅ FULLY OPERATIONAL - All features working including roadmap, tasks, divisions, and smart clear data! ✅✅✅');

});
</script>

<!-- DOCX Export Library -->
<script src="https://unpkg.com/docx@7.8.2/build/index.js"></script>
<script>
console.log('📄 Loading DOCX export functionality...');

// Wait for both DOM and docx library to be ready
function setupDocxExports() {
	if (typeof docx === 'undefined') {
		console.log('⏳ Waiting for DOCX library...');
		setTimeout(setupDocxExports, 100);
		return;
	}
	
	console.log('✅ DOCX library loaded');
	
	// Export Roadmap Function
	async function exportRoadmap() {
		try {
			console.log('📊 Exporting roadmap...');
			const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } = docx;
			
			const state = window.state || JSON.parse(localStorage.getItem('virelyOpsState') || '{}');
			const roadmapItems = state.roadmapItems || [];
			
			const children = [
				new Paragraph({
					text: "Product Roadmap",
					heading: HeadingLevel.HEADING_1,
					alignment: AlignmentType.CENTER,
					spacing: { after: 400 }
				})
			];
			
			if (roadmapItems.length === 0) {
				children.push(new Paragraph({
					children: [new TextRun({ text: "No roadmap items available.", italics: true })]
				}));
			} else {
				const statuses = ['planned', 'in-progress', 'completed', 'on-hold'];
				const statusLabels = {
					'planned': 'Planned',
					'in-progress': 'In Progress',
					'completed': 'Completed',
					'on-hold': 'On Hold'
				};
				
				statuses.forEach(status => {
					const items = roadmapItems.filter(r => r.status === status);
					if (items.length > 0) {
						children.push(new Paragraph({
							text: statusLabels[status],
							heading: HeadingLevel.HEADING_2,
							spacing: { before: 300, after: 200 }
						}));
						
						items.forEach(item => {
							children.push(new Paragraph({
								children: [new TextRun({ text: item.title, bold: true })],
								spacing: { before: 200, after: 100 }
							}));
							
							children.push(new Paragraph({
								children: [new TextRun(item.description)],
								spacing: { after: 100 }
							}));
							
							children.push(new Paragraph({
								children: [
									new TextRun({ text: "Quarter: ", bold: true }),
									new TextRun(item.quarter)
								],
								spacing: { after: 50 }
							}));
							
							children.push(new Paragraph({
								children: [
									new TextRun({ text: "Owner: ", bold: true }),
									new TextRun(item.owner)
								],
								spacing: { after: 200 }
							}));
						});
					}
				});
			}
			
			const doc = new Document({
				sections: [{ children: children }]
			});
			
			const blob = await Packer.toBlob(doc);
			const url = URL.createObjectURL(blob);
			const link = document.createElement('a');
			link.href = url;
			link.download = 'Roadmap_' + new Date().toISOString().split('T')[0] + '.docx';
			document.body.appendChild(link);
			link.click();
			document.body.removeChild(link);
			URL.revokeObjectURL(url);
			
			alert('Roadmap exported successfully!');
			console.log('✅ Roadmap exported');
		} catch (error) {
			console.error('❌ Export error:', error);
			alert('Error exporting roadmap: ' + error.message);
		}
	}
	
	// Export Tasks Function
	async function exportTasks() {
		try {
			console.log('📋 Exporting tasks...');
			const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } = docx;
			
			const state = window.state || JSON.parse(localStorage.getItem('virelyOpsState') || '{}');
			const tasks = state.tasks || [];
			
			const children = [
				new Paragraph({
					text: "Tasks",
					heading: HeadingLevel.HEADING_1,
					alignment: AlignmentType.CENTER,
					spacing: { after: 400 }
				})
			];
			
			if (tasks.length === 0) {
				children.push(new Paragraph({
					children: [new TextRun({ text: "No tasks available.", italics: true })]
				}));
			} else {
				const priorities = ['high', 'medium', 'low'];
				const priorityLabels = {
					'high': 'High Priority',
					'medium': 'Medium Priority',
					'low': 'Low Priority'
				};
				
				priorities.forEach(priority => {
					const priorityTasks = tasks.filter(t => t.priority === priority);
					if (priorityTasks.length > 0) {
						children.push(new Paragraph({
							text: priorityLabels[priority],
							heading: HeadingLevel.HEADING_2,
							spacing: { before: 300, after: 200 }
						}));
						
						priorityTasks.forEach(task => {
							const statusIcon = task.completed ? '✓ ' : '○ ';
							children.push(new Paragraph({
								children: [
									new TextRun({ text: statusIcon, bold: true }),
									new TextRun({ text: task.title, bold: true, strike: task.completed })
								],
								spacing: { before: 150, after: 80 }
							}));
							
							children.push(new Paragraph({
								children: [
									new TextRun({ text: "Assignee: ", bold: true }),
									new TextRun(task.assignee)
								],
								spacing: { after: 50 }
							}));
							
							children.push(new Paragraph({
								children: [
									new TextRun({ text: "Due Date: ", bold: true }),
									new TextRun(task.dueDate)
								],
								spacing: { after: 50 }
							}));
							
							children.push(new Paragraph({
								children: [
									new TextRun({ text: "Status: ", bold: true }),
									new TextRun(task.completed ? "Completed" : "Pending")
								],
								spacing: { after: 200 }
							}));
						});
					}
				});
			}
			
			const doc = new Document({
				sections: [{ children: children }]
			});
			
			const blob = await Packer.toBlob(doc);
			const url = URL.createObjectURL(blob);
			const link = document.createElement('a');
			link.href = url;
			link.download = 'Tasks_' + new Date().toISOString().split('T')[0] + '.docx';
			document.body.appendChild(link);
			link.click();
			document.body.removeChild(link);
			URL.revokeObjectURL(url);
			
			alert('Tasks exported successfully!');
			console.log('✅ Tasks exported');
		} catch (error) {
			console.error('❌ Export error:', error);
			alert('Error exporting tasks: ' + error.message);
		}
	}
	
	// Export Notes Function
	async function exportNotes() {
		try {
			console.log('📝 Exporting notes...');
			const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } = docx;
			
			const state = window.state || JSON.parse(localStorage.getItem('virelyOpsState') || '{}');
			const notes = state.notes || [];
			
			const children = [
				new Paragraph({
					text: "Notes",
					heading: HeadingLevel.HEADING_1,
					alignment: AlignmentType.CENTER,
					spacing: { after: 400 }
				})
			];
			
			if (notes.length === 0) {
				children.push(new Paragraph({
					children: [new TextRun({ text: "No notes available.", italics: true })]
				}));
			} else {
				const categories = ['important', 'idea', 'todo', 'general'];
				const categoryLabels = {
					'important': 'Important',
					'idea': 'Ideas',
					'todo': 'To Do',
					'general': 'General'
				};
				
				categories.forEach(category => {
					const categoryNotes = notes.filter(n => n.category === category);
					if (categoryNotes.length > 0) {
						children.push(new Paragraph({
							text: categoryLabels[category],
							heading: HeadingLevel.HEADING_2,
							spacing: { before: 300, after: 200 }
						}));
						
						categoryNotes.forEach(note => {
							children.push(new Paragraph({
								children: [new TextRun({ text: note.title, bold: true })],
								spacing: { before: 200, after: 100 }
							}));
							
							const contentLines = note.content.split('\n');
							contentLines.forEach(line => {
								if (line.trim()) {
									children.push(new Paragraph({
										children: [new TextRun(line)],
										spacing: { after: 80 }
									}));
								}
							});
							
							children.push(new Paragraph({
								children: [
									new TextRun({ text: "Updated: ", italics: true, size: 20 }),
									new TextRun({ text: new Date(note.updated).toLocaleDateString(), italics: true, size: 20 })
								],
								spacing: { before: 100, after: 250 }
							}));
						});
					}
				});
			}
			
			const doc = new Document({
				sections: [{ children: children }]
			});
			
			const blob = await Packer.toBlob(doc);
			const url = URL.createObjectURL(blob);
			const link = document.createElement('a');
			link.href = url;
			link.download = 'Notes_' + new Date().toISOString().split('T')[0] + '.docx';
			document.body.appendChild(link);
			link.click();
			document.body.removeChild(link);
			URL.revokeObjectURL(url);
			
			alert('Notes exported successfully!');
			console.log('✅ Notes exported');
		} catch (error) {
			console.error('❌ Export error:', error);
			alert('Error exporting notes: ' + error.message);
		}
	}
	
	// Wire up event listeners
	const exportRoadmapBtn = document.getElementById('exportRoadmapBtn');
	if (exportRoadmapBtn) {
		exportRoadmapBtn.addEventListener('click', exportRoadmap);
		console.log('✅ Roadmap export button wired');
	}
	
	const exportTasksBtn = document.getElementById('exportTasksBtn');
	if (exportTasksBtn) {
		exportTasksBtn.addEventListener('click', exportTasks);
		console.log('✅ Tasks export button wired');
	}
	
	const exportNotesBtn = document.getElementById('exportNotesBtn');
	if (exportNotesBtn) {
		exportNotesBtn.addEventListener('click', exportNotes);
		console.log('✅ Notes export button wired');
	}
	
	console.log('✅ DOCX export functionality ready');
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
	document.addEventListener('DOMContentLoaded', setupDocxExports);
} else {
	setupDocxExports();
}
</script>
</body>
</html>
